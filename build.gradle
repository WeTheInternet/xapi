plugins {
    id 'groovy'
    id 'idea'
    id 'xapi-root'
}


import net.wti.gradle.system.spi.GradleServiceFinder
import org.gradle.internal.jvm.Jvm
import xapi.gradle.gwt.Gwt 

apply from: "$rootDir/gradle/xapi-env.gradle"

tasks.create 'publishRequired', { req ->
    allprojects {
        def pub = tasks.findByName('xapiPublish')
        if (pub) {
            req.dependsOn pub
        }
    }
}

plugins.apply 'xapi-root'


xapi {
    preload('javax.validation:validation-api:1.0.0.GA')
    preload('javax.validation:validation-api:1.0.0.GA:sources')
}

File mvnRepo = new File(rootDir, 'repo')

def shouldApply = { Project p->
    return ! (
            p.plugins.hasPlugin('xapi-schema') ||
            p.plugins.hasPlugin('xapi-require') ||
            (p.path.split(':')?:[''])[-1]
                    .contains("parent")
            )
}

allprojects {
    group = 'net.wetheinter'
    version = findProperty('xapiVersion')

    plugins.apply 'maven'
    plugins.apply 'idea'
    repositories.jcenter()
    repositories.maven {
        name = 'xapiLocal'
        url = mvnRepo.toURI()
    }
    // we want all projects to have xapi plugin,
    // but we'll wait until they are resolved,
    // to give each project a chance to pick a more specific plugin.
    afterEvaluate {
        if (shouldApply(project)) {
            plugins.apply 'xapi-base'
        }
        test {
            if (!maxHeapSize) {
                maxHeapSize = '1G'
            }
        }
    }
}

gradle.beforeProject {
    Project p ->
        if (p.buildscript.repositories.empty) {
            p.buildscript.repositories.jcenter()
            p.buildscript.repositories.maven {
                name = 'xapiLocal'
                url = new File(rootDir, 'repo')
            }
        }
}

subprojects {
    Project p ->
    if (!shouldApply(p)) {
        return
    }
    p.with {
        plugins.apply 'java-library'

        tasks.create 'testJar', Jar, {
            Jar jar ->
                jar.classifier = 'test'
                jar.from sourceSets.test.output
        }
        Gwt.maybeInstall(p)

        p.dependencies.add JavaPlugin.RUNTIME_ONLY_CONFIGURATION_NAME,
                p.files(Jvm.current().toolsJar)

        p.tasks.withType(Test).all {
            Test test ->
                test.systemProperty('xapi.mvn.repo', mvnRepo.absolutePath)
        }

        p.tasks.withType(JavaCompile).all {
            JavaCompile javac ->
                // explicitly empty sourcepath.
                // If we want to recompile anything that isn't ours, we'll do so explicitly.
                javac.options.sourcepath = files()
        }

        artifacts {
            testRuntime testJar
        }

        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'

        tasks.withType(JavaCompile) {
            options.encoding = 'UTF-8'
        }
    }
}

GradleServiceFinder.getService(project).configureWrapper(project)
