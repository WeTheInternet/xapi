<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>net.wetheinter</groupId>
    <artifactId>xapi-dev-gwtc</artifactId>
    <version>0.5</version>
  </parent>

  <groupId>net.wetheinter</groupId>
  <artifactId>xapi-gwtc-impl</artifactId>
  <version>0.5</version>
  <packaging>jar</packaging>
  <name>XApi - Gwt Compiler Implementation</name>
  <url>WeTheInter.net</url>
  <description>
  This module contains the business logic of running gwt compiles.

  It implements and exposes all functionality of the gwt compiler,
  and should only ever be included in dev-mode runtimes that need to perform gwt compiles.

  In the maven plugin, the jre frontend and this backend are used together in one runtime.
  In the collide plugin, the gwt frontend runs in the browser, and this backend runs in vert.x server. 
  </description>
  
  <properties>
    <xapi.skip.test>true</xapi.skip.test>
  </properties>
  
  <dependencies>
    <!-- Take the full jre injection, for runtime classpath scanning. -->
    <dependency>
      <groupId>net.wetheinter</groupId>
      <artifactId>xapi-jre-inject</artifactId>
    </dependency>
    <!-- Take the gwt uber jar, so we always have all production mode code-->
    <!-- Because we are taking the uber jar, we will be shadowing other gwt modules. -->
    <!-- Ideally, whatever module is actually running the compiler will inherit the compiler last. -->
    <dependency>
      <groupId>net.wetheinter</groupId>
      <artifactId>xapi-gwt</artifactId>
    </dependency>
    <dependency>
      <groupId>net.wetheinter</groupId>
      <artifactId>xapi-gwtc-api</artifactId>
    </dependency>
    <dependency>
      <groupId>net.wetheinter</groupId>
      <artifactId>xapi-dev-shell</artifactId>
    </dependency>
    
    <!-- Yes, we declare direct dependency on gwt-dev. -->
    <!-- This is a big import with potential classpath conflicts; -->
    <!-- For this reason, you may want to launch gwtc-impl in its own thread -->

    <!-- Note that you can take xapi-gwtc-api for your client code, -->
    <!-- and only reference xapi-gwtc-impl when you run compiles -->
    <dependency>
      <groupId>${gwt.groupId}</groupId>
      <artifactId>gwt-dev</artifactId>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>${gwt.groupId}</groupId>
      <artifactId>gwt-user</artifactId>
    </dependency>
    <!-- Must declare compile dependency on JUnit, as we look at JUnit classes
         while generating entry points for test cases
    -->
    <dependency>
    	<groupId>junit</groupId>
    	<artifactId>junit</artifactId>
    </dependency>
  </dependencies>

  <build>
    <resources>
      <resource>
        <directory>src/main/resources</directory>
      </resource>
      <resource>
        <directory>src/main/java</directory>
      </resource>
    </resources>
    <testResources>
      <testResource>
        <directory>src/test/java</directory>
      </testResource>
      <testResource>
        <directory>src/main/java</directory>
      </testResource>
      <testResource>
        <directory>src/test/resources</directory>
      </testResource>
    </testResources>
  </build>


</project>
