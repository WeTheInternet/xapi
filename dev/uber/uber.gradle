buildscript {
    // GenInclude buildscript from file:///opt/xapi/dev/uber/src/gradle/main/buildscript
    repositories {
        gradlePluginPortal()
        mavenLocal()
        //maven {
        //    name "plugins"
        //    url "https://plugins.gradle.org/m2"
        //}
    }
    dependencies {
        if (gradle.gradleVersion.startsWith("5")) {
            classpath "com.github.jengelman.gradle.plugins:shadow:5.2.0"
        } else {
            // this is a hacked version where we allow any gradle version and build in java 8
            classpath "com.gradleup.shadow:shadow-gradle-plugin:8.3.1"
        }
    }
}
plugins {
    id	"java-library"
    id	"maven-publish"
}

// GenInclude body.start from file:///opt/xapi/dev/uber/src/gradle/main/body.start
import com.github.jengelman.gradle.plugins.shadow.internal.DependencyFilter
import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

plugins.apply "java-library"
plugins.apply "maven-publish"
//plugins.apply "com.gradleup.shadow"

plugins.apply com.github.jengelman.gradle.plugins.shadow.ShadowPlugin

setProperty("xapi.main.component", "shadow")
apply from: "$rootDir/gradle/xapi-env.gradle"
// GenStart net.wti.gradle.settings.plugin.XapiSettingsPlugin
ext.xapiModern = 'true'

java.toolchain.languageVersion = JavaLanguageVersion.of(8)
repositories.mavenCentral()
// setup sourcesets

SourceSet main = sourceSets.maybeCreate('main');

SourceSet test = sourceSets.maybeCreate('test');
main.java.setSrcDirs([]);
main.resources.setSrcDirs([]);
test.java.setSrcDirs([]);
test.resources.setSrcDirs([]);
main.java.srcDir("$rootDir/dev/uber/src/main/java")
main.resources.srcDir("$rootDir/dev/uber/src/main/resources")
test.java.srcDir("$rootDir/dev/uber/src/test/java")
test.resources.srcDir("$rootDir/dev/uber/src/test/resources")

dependencies {
    annotationProcessor project(path: ":base-api")
    api project(path: ":dev:javac-main")
    api project(path: ":server:vertx")
    api project(path: ":ui:javafx")
    api project(path: ":inject-jre")
    api project(path: ":process-jre")
    api project(path: ":gwtc-api")
    api project(path: ":gwtc-gwtCompiler")
    api project(path: ":dev:file-main")
    api project(path: ":dev:shell")
    api project(path: ":dev:scanner-main")
    api project(path: ":dev:maven-main")
    api project(path: ":server:gen-main")
    testImplementation project(path: ":base-testTools")
    testImplementation project(path: ":io-jre")
    implementation "net.wti.core:xapi-gen:$version"
    implementation "javax.inject:javax.inject:1:sources"
}

repositories {
    maven {
        name = 'xapiLocal'
        url = "$rootDir/repo"
    }
}
// Setup publishing to coordinates: net.wetheinter:xapi-dev-uber
project.extensions.add('xapi.mvn.repo', "$rootDir/repo")
Task xapiPublish = tasks.create('xapiPublish')
xapiPublish.group = 'Publishing'
xapiPublish.description = 'Publish jars to xapiLocal repository'
xapiPublish.dependsOn "publishXapiPublicationToXapiLocalRepository"

PublishingExtension ext = extensions.findByName(PublishingExtension.NAME) as PublishingExtension
ext.repositories.maven {
    MavenArtifactRepository repo ->
        repo.name = 'xapiLocal'
        repo.url = "file://$rootDir/repo"
}
// not really what we want, but it's good enough for right now
java.withSourcesJar()
java.withJavadocJar()

ext.publications.create("xapi", MavenPublication, {
    pub ->
        afterEvaluate {
            if (tasks.names.contains('shadowJar')) {
                shadow.component(pub)
            } else {
                pub.from(components.named('java').get())
            }
        }
        pub.artifactId = "xapi-dev-uber"
        pub.groupId = "net.wetheinter"
})
// GenEnd net.wti.gradle.settings.plugin.XapiSettingsPlugin
// GenInclude body.end from file:///opt/xapi/dev/uber/src/gradle/main/body.end
tasks.withType(Test).configureEach {
    Test t ->
        t.maxHeapSize("4G")
        t.forkEvery(1)
        t.maxParallelForks(4)
}

tasks.named('jar', Jar).configure {
    Jar j ->
        j.archiveClassifier.set "default"
}
//import com.github.jengelman.gradle.plugins.shadow.internal.DependencyFilter
//import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

tasks.named("shadowJar").configure {
    jar ->
        jar.archiveClassifier.set(null)
        jar.zip64=true
        jar.minimize {
            filter ->
                filter.exclude {
                    ResolvedDependency res ->
                        if (res.moduleGroup =~ "(" +
                                "org.assert|" +
                                "junit|" +
                                "org.junit|" +
                                "org.hamcrest|" +
                                "javax.enterprise|" +
                                "javax.servlet|" +
                                "commons-coded|" +
                                "com.google.guava" +
                                ").*") {
                            return false
                        }
                        switch(res.moduleName) {
                            case "gwt-dev":
                            case "gwt-user":
                            case "elemental":
                                return false
                        }
//                        println ""
//                        println res.name
//                        println res.moduleName
                        return true
                }
        }
}
artifacts {
    archives shadowJar
}
assemble.dependsOn(shadowJar)
// Done generating buildfile for :dev:uber at file://$rootDir/dev/uber/uber.gradle
