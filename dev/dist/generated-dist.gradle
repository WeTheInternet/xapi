import org.gradle.api.tasks.SourceSet;

ext.xapiModern = 'true'
// GenStart XapiSettingsPlugin

apply from: "$rootDir/gradle/xapi-modern.gradle"
String repo = project.findProperty("xapi.mvn.repo")
if (repo) {
  repositories {
    maven {
      name = 'xapiLocal'
      url = repo
    }
  }
}
String javaPlugin = findProperty('xapi.java.plugin') ?: 'java-library'
plugins.apply javaPlugin
repositories.mavenCentral()

SourceSet main = sourceSets.maybeCreate('main');


SourceSet test = sourceSets.maybeCreate('test');

main.java.setSrcDirs([]);
main.resources.setSrcDirs([]);
test.java.setSrcDirs([]);
test.resources.setSrcDirs([]);
main.java.srcDir("$rootDir/dev/dist/src/main/java")
main.resources.srcDir("$rootDir/dev/dist/src/main/resources")

dependencies {
  implementation project(path: ":server:vertx")
  implementation project(path: ":xapi-jre-parent:xapi-jre-ui-parent:xapi-jre-ui-javafx")
  implementation project(path: ":dev:file-main")
  implementation project(path: ":dev:template-main")
  implementation project(path: ":dev:shell")
  implementation project(path: ":dev:scanner-main")
  implementation project(path: ":dev:maven-main")
  implementation project(path: ":server:gen-main")
  implementation project(path: ":inject-jre")
  testImplementation project(path: ":base-testTools")
  implementation "net.wti.core:xapi-gen:$version"
}


configurations {
  mainOut
}
// GenEnd XapiSettingsPlugin
// GenInclude body.end from file:///opt/xapi/dev/dist/src/gradle/main/body.end
import org.gradle.internal.jvm.Jvm

Jvm jvm = Jvm.current()
if (jvm.javaVersion.isJava8()) {
    File tools = jvm.toolsJar
    if (tools) {
        dependencies {
            compileOnly files(tools)
            testImplementation files(tools)
        }
    }
}

tasks.named('test', Test).configure {
    Test t ->
        t.maxHeapSize = "2G"
}
// Done generating buildfile for :dev:dist at file://$rootDir/dev/dist/generated-dist.gradle
