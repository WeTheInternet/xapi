plugins {
    id 'xapi-require'
    id 'groovy'
}

//repositories.mavenCentral()

String xapiHome = rootDir.parent
apply from: "$xapiHome/gradle/xapi-env.gradle"

repositories {
    mavenCentral()
}

xapiRequire.main().configure {
    external "net.wti.core:xapi-gen:${->version}", 'main'
}

xapiRequire.module('api').configure {
    external "net.wti.gradle.tools:xapi-gradle-tools:${->version}", 'main'
    external "net.wti.gradle.modern:xapi-gradle-core:${->version}", 'main'
    external "net.wti.core:xapi-lang-core:${->version}", 'main'
    external "net.wti.core:xapi-fu:${->version}", 'main'
}

xapiRequire.module('test').configure {
    external "net.wti.gradle.tools:xapi-gradle-test:${->version}", 'main'
    external "net.bytebuddy:byte-buddy:1.11.0"
    external 'junit:junit:4.12'
    external "org.spockframework:spock-core:1.2-groovy-2.5"

}

dependencies {
    testImplementation gradleTestKit()
}

xapiRequire.module('spi').configure {
    internal 'main:api'
}

dependencies {
    compileOnly gradleApi()
}


String settingsPluginDoc = '''The loader plugin is a *settings.gradle* plugin which *creates* projects from schema.xapi files.

After you `apply plugin: 'xapi-loader'` in your settings.gradle,
we will have created gradle projects, as appropriate, based on your system configuration.

If the -Dxapi.platform=jre|gwt,etc property is supplied,
we will only create the projects necessary to build the given platform(s).
This includes any "parent platforms" of the comma-separated list of platform names.
'''

String parserPluginDoc = '''The parser plugin is a *build.gradle* plugin which *configures* projects from schema.xapi files.

All xapi plugins will automatically try to load this plugin from the classpath,
so we can be sure of eager-initialization of xapi schema objects, and gradle Configuration instances.
'''

description = settingsPluginDoc

xapiSchema.whenReady {
    // java-gradle-plugin relies on task jar being defined.  Lets use the schema to realize it early.
    xapiSchema.module('main', 'main').jarTask.get()

    // eagerly realize this so the apiCompile / apiCompileOnly configurations are created eagerly
    xapiSchema.module('main', 'api').tasks.javacTask.get()
    xapiSchema.module('main', 'spi').tasks.javacTask.get()
    dependencies.add('spiCompileOnly', dependencies.gradleApi())
    // apiCompileOnly won't exist before we perform (sloppy) eager initialization above.
    dependencies.add('apiCompileOnly', dependencies.gradleApi())

    setProperty('skip.java.plugin', 'true')
    setProperty('skip.java.component', 'true')
    plugins.apply 'java-gradle-plugin'
    GradlePluginDevelopmentExtension plugin = extensions.getByName("gradlePlugin")
    plugin.publishComponent = '_main_main'
//    println configurations.names
    plugin.plugins.register('xapi-loader', {
        PluginDeclaration decl->
            decl.id = 'xapi-loader'
            decl.displayName = "Xapi Loader Plugin"
            decl.description = settingsPluginDoc
            decl.implementationClass = "net.wti.loader.plugin.XapiLoaderPlugin"
    })
    plugin.plugins.register('xapi-parser', {
        PluginDeclaration decl->
            decl.id = 'xapi-parser'
            decl.displayName = "Xapi Parser Plugin"
            decl.description = parserPluginDoc
            decl.implementationClass = "net.wti.gradle.parser.plugin.XapiParserPlugin"
    })
    tasks.test.dependsOn 'pluginUnderTestMetadata'
    dependencies {
        testImplementation files(new File(buildDir, 'pluginUnderTestMetadata'))
    }
    tasks.test.doFirst {
        new File(buildDir, 'testRuntime.classpath').text = (tasks.test as Test).classpath.asPath
    }
} // end xapiSchema.whenReady{}

