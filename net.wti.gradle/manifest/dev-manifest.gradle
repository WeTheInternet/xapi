import net.wti.gradle.internal.require.api.Requirable

plugins {
    id 'xapi-require'
    id 'groovy'
    id 'maven-publish'
    id 'xapi-publish'
}
String xapiHome = "$rootDir.parent"
apply from: "$xapiHome/gradle/xapi-env.gradle"
apply from: "$xapiHome/gradle/int-test.gradle"
//repositories.mavenCentral()


// force-realize a jar task for java-gradle-plugin to configure eagerly.
xapiSchema.module('main', 'main').jarTask.get()
xapiSchema.whenReady {

    apply plugin: 'java-gradle-plugin'
    GradlePluginDevelopmentExtension plugin = extensions.getByName("gradlePlugin")
    plugin.publishComponent = '_main_main'

    plugin.plugins {
        NamedDomainObjectCollection<PluginDeclaration> decls ->
            decls.create 'xapi-manifest', {
                PluginDeclaration decl ->
                    decl.displayName = 'Xapi Manifest Plugin'
                    decl.id = 'xapi-manifest'
                    decl.implementationClass = 'net.wti.manifest.ManifestPlugin'
                    decl.description = '''xapi-manifest plugin collects classpath information
to emit into a xapi-lang-formatted manifest.xapi file,
as well as individual "classpath files", suitable for consumption via sh`$(cat $filename)`.

By separating any long, unreadable filename-lists from the rest of the metadata,
it will be easier to see the ..."more meta" structure of the gradle project;
where schema.xapi files describe the input metadata for a given build/project,
manifest.xapi files describe the final resolved values for those inputs
(the classpaths after parent schema.xapi + end user scripts have finished being applied).'''
            }
    }


}

xapiRequire.main().configure {
    Requirable req ->
        req.external "net.wti.core:xapi-gen:$version", 'main'
        req.external "net.wti.core:xapi-fu:$version", 'main'
        req.external "net.wti.gradle.tools:xapi-gradle-tools:$version"//, 'main'
        req.external "net.wti.gradle.modern:xapi-gradle-core:${->version}", 'main'
        req.project 'xapi-gradle-api', 'main'
}

xapiRequire.module('test').configure {
    external "net.wti.gradle.tools:xapi-gradle-test:$version", 'main'
}

tasks.withType(Test).configureEach({
    Test t ->
        t.systemProperty 'xapi.home', xapiHome
        t.useJUnit()
})
