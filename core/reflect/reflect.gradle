import org.gradle.api.tasks.SourceSet;

plugins {
    id	"java-library"
    id	"maven-publish"
}
// GenStart net.wti.gradle.settings.plugin.XapiSettingsPlugin
ext.xapiModern = 'true'

java.toolchain.languageVersion = JavaLanguageVersion.of(8)
repositories.mavenCentral()
// setup sourcesets

SourceSet main = sourceSets.maybeCreate('main');


SourceSet test = sourceSets.maybeCreate('test');

main.java.setSrcDirs([]);
main.resources.setSrcDirs([]);
test.java.setSrcDirs([]);
test.resources.setSrcDirs([]);
main.java.srcDir("$rootDir/core/reflect/src/main/java")
main.resources.srcDir("$rootDir/core/reflect/src/main/resources")
test.java.srcDir("$rootDir/core/reflect/src/test/java")
test.resources.srcDir("$rootDir/core/reflect/src/test/resources")

dependencies {
    implementation project(path: ":base-main")
    implementation "net.wti.core:xapi-fu:$version"
    implementation "net.wti.core:xapi-gen:$version"
    implementation "javax.inject:javax.inject:1"
    implementation "junit:junit:4.12"
}

repositories {
    maven {
        name = 'xapiLocal'
        url = "$rootDir/repo"
    }
}
// Setup publishing to coordinates: net.wetheinter:xapi-core-reflect
project.extensions.add('xapi.mvn.repo', "$rootDir/repo")
Task xapiPublish = tasks.create('xapiPublish')
xapiPublish.group = 'Publishing'
xapiPublish.description = 'Publish jars to xapiLocal repository'
xapiPublish.dependsOn "publishXapiPublicationToXapiLocalRepository"

PublishingExtension ext = extensions.findByName(PublishingExtension.NAME) as PublishingExtension
ext.repositories.maven {
    MavenArtifactRepository repo ->
        repo.name = 'xapiLocal'
        repo.url = "file://$rootDir/repo"
}
// not really what we want, but it's good enough for right now
java.withSourcesJar()
java.withJavadocJar()

ext.publications.create("xapi", MavenPublication, {
    pub ->
        afterEvaluate {
            if (tasks.names.contains('shadowJar')) {
                shadow.component(pub)
            } else {
                pub.from(components.named('java').get())
            }
        }
        pub.artifactId = "xapi-core-reflect"
        pub.groupId = "net.wetheinter"
})
// GenEnd net.wti.gradle.settings.plugin.XapiSettingsPlugin
// GenInclude body.end from file:///opt/xapi/core/reflect/src/gradle/main/body.end
SourceSet java9 = sourceSets.maybeCreate("java9")

if (JavaVersion.current().isJava9Compatible()) {
    java9.java.srcDir("src/main/java9")
    dependencies.add(java9.compileOnlyConfigurationName, project.files(configurations.runtimeClasspath))
    dependencies.add(java9.compileOnlyConfigurationName, project.files(configurations.compileClasspath))
    gradle.projectsEvaluated {
        tasks.named('jar', Jar).configure({ jar ->
            jar.manifest.attributes['Multi-Release'] = 'true'
            jar.into("META-INF/versions/9") {
                CopySpec c ->
                    c.from(java9.output)
            }
            jar.into("META-INF/versions/11") {
                CopySpec c ->
                    c.from(java9.output)
            }
        })
    }
} else {
    tasks.named(java9.compileJavaTaskName).configure({Task javac ->
        javac.enabled(false)
    })
//    logger.info "Java9 classes directories: {}", java9.output.classesDirs.asPath
    if (java9.output.classesDirs.any { File d -> d.directory }) {
        gradle.projectsEvaluated {
            tasks.named('jar', Jar).configure({ jar ->
                jar.manifest.attributes['Multi-Release'] = 'true'
                jar.into("META-INF/versions/9") {
                    CopySpec c ->
                        c.from(java9.output.classesDirs)
                }
                jar.into("META-INF/versions/11") {
                    CopySpec c ->
                        c.from(java9.output.classesDirs)
                }
            })
        }
    }
}
// Done generating buildfile for :core:reflect at file://$rootDir/core/reflect/reflect.gradle
