plugins {
    id	"java-library"
    id	"maven-publish"
}
// GenStart net.wti.gradle.settings.plugin.XapiSettingsPlugin
ext.xapiModern = 'true'

java.toolchain.languageVersion = JavaLanguageVersion.of(8)
repositories.mavenCentral()
// setup sourcesets

SourceSet main = sourceSets.maybeCreate('main');

SourceSet test = sourceSets.maybeCreate('test');
main.java.setSrcDirs([]);
main.resources.setSrcDirs([]);
test.java.setSrcDirs([]);
test.resources.setSrcDirs([]);
main.java.srcDir("$rootDir/gwtc/src/gwtCompiler/java")
test.java.srcDir("$rootDir/gwtc/src/gwtCompilerTest/java")
test.resources.srcDir("$rootDir/gwtc/src/gwtCompilerTest/resources")

dependencies {
    testImplementation project(path: ":gwt-gwtUber")
    testImplementation project(path: ":inject-jre")
    testImplementation project(path: ":base-gwtTestTools")
    testImplementation project(path: ":dev:maven-main")
    testImplementation project(path: ":gwtc-gwtTestTools")
    api project(path: ":gwtc-compiler")
    api project(":gwtc-gwtCompiler-sources")
}

repositories {
    maven {
        name = 'xapiLocal'
        url = "$rootDir/repo"
    }
}
// Setup publishing to coordinates: net.wetheinter:xapi-gwtc-compiler-gwt
project.extensions.add('xapi.mvn.repo', "$rootDir/repo")
Task xapiPublish = tasks.create('xapiPublish')
xapiPublish.group = 'Publishing'
xapiPublish.description = 'Publish jars to xapiLocal repository'
xapiPublish.dependsOn "publishXapiPublicationToXapiLocalRepository"

PublishingExtension ext = extensions.findByName(PublishingExtension.NAME) as PublishingExtension
ext.repositories.maven {
    MavenArtifactRepository repo ->
        repo.name = 'xapiLocal'
        repo.url = "file://$rootDir/repo"
}
// not really what we want, but it's good enough for right now
java.withSourcesJar()
java.withJavadocJar()

ext.publications.create("xapi", MavenPublication, {
    pub ->
        afterEvaluate {
            if (tasks.names.contains('shadowJar')) {
                shadow.component(pub)
            } else {
                pub.from(components.named('java').get())
            }
        }
        pub.artifactId = "xapi-gwtc-compiler-gwt"
        pub.groupId = "net.wetheinter"
})
// GenEnd net.wti.gradle.settings.plugin.XapiSettingsPlugin
// GenInclude body.end from file:///opt/xapi/gwtc/src/gradle/gwtCompiler/body.end
tasks.withType(Test) {
    if (gradle.gradleVersion.startsWith("5")) {
        logging.level = LogLevel.INFO
    } else {
        logging.levelInternal = LogLevel.INFO
    }
    forkEvery = 1
    maxHeapSize = "2G"
    timeout = Duration.ofMinutes(10)
//    systemProperty("gwt.args", "-logLevel TRACE -noincremental  -ea -userAgents safari -runStyle Manual -style PRETTY -gen $buildDir/www-test/gen -nodevMode -war $buildDir/www-test ")
    systemProperty("gwt.args", "-logLevel INFO -noincremental  -ea -userAgents gecko1_8 -runStyle HtmlUnit -nodevMode -war $buildDir/www-test ")
}
import net.wti.gradle.system.tools.TestIsolator
tasks.create("testIsolator", TestIsolator).addAll()
// Done generating buildfile for :gwtc at file://$rootDir/gwtc/src/gwtCompiler/gwtcGwtCompiler.gradle
