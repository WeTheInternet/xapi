/* ASTParserTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. ASTParserTokenManager.java */
/*
 *
 * This file is part of Java 1.8 parser and Abstract Syntax Tree.
 *
 * Java 1.8 parser and Abstract Syntax Tree is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with Java 1.8 parser and Abstract Syntax Tree.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.github.javaparser;
import java.io.*;
import java.util.*;
import com.github.javaparser.ast.*;
import com.github.javaparser.ast.body.*;
import com.github.javaparser.ast.comments.*;
import com.github.javaparser.ast.expr.*;
import com.github.javaparser.ast.stmt.*;
import com.github.javaparser.ast.type.*;

/** Token Manager. */
public class ASTParserTokenManager implements ASTParserConstants {
  void CommonTokenAction(Token t) {
    ((com.github.javaparser.ASTParser.GTToken)t).bufPos = input_stream.bufpos - t.image.length();
  }

  int setState(int state) {
    int was = curLexState;
    curLexState = state;
    return was;
  }

  void backup(int n) { input_stream.backup(n); }

  char peekNext() {
    return peekNext(true);
  }

  char peekNext(boolean eatWhitespace) {
    int backup = 0;
    char c = 0;
    try {
      if (eatWhitespace) {
        backup += eatWhitespaceAndComments();
        c = input_stream.readChar();
        backup ++;
      } else {
        c = input_stream.readChar();
        backup ++;
      }
    } catch (IOException e) {
      // Hit EOF while peeking...
    } finally {
      input_stream.backup(backup);
    }
    return c;
  }

  int eatWhitespace() {
    int backup = 0;
    int amt = 0;
    char c = 0;
    try {
      c = input_stream.readChar();
      backup ++;
      while (Character.isWhitespace(c)) {
          backup = 1;
          amt ++;
          c = input_stream.readChar();
      }
    } catch (IOException e) {
      // Hit EOF while peeking...
      return amt;
    } finally {
        input_stream.backup(backup);
    }
    return amt;
  }
  int eatComments() {
    int backup = 0;
    int amt = 0;
    char c = 0;
    try {
      c = input_stream.readChar();
      backup ++;
      if (c == '/') {
          c = input_stream.readChar();
          if (c == '*') {
              backup = 0;
              amt = 2;
              do {
                  while ((c = input_stream.readChar()) != '*') {
                      amt ++;
                  }
                  amt ++;
              } while ((c = input_stream.readChar()) != '/');
              amt++;
          } else if (c == '/') {
              backup = 0;
              amt = 2;
              while ((c = input_stream.readChar()) != '\n') {
                  amt ++;
              }
              if (c == '\n') {
                amt++;
              }
          } else {
              backup++;
              return 0;
          }
      }
    } catch (IOException e) {
      // Hit EOF while peeking...
      return amt;
    } finally {
        input_stream.backup(backup);
    }
    return amt;
  }

  int eatWhitespaceAndComments() {
    int ws, comments, backup = 0;
    do {
      ws = eatWhitespace();
      comments = eatComments();
      backup += ws + comments;
    } while (ws > 0 || comments > 0);
    return backup;
  }

  boolean isAnnotation(Token token) {
    if (token.next != null) {
      return token.next.image.equals("@");
    }
    return peekNext() == '@';
  }

  boolean isCommaNotTrailing(Token token) {
    char c;
    if (token.next != null) {
      if (",".equals(token.next.image)) {
        if (token.next.next != null) {
          switch(token.next.next.image) {
            case "}":
            case "]":
              return true;
            default:
              return false;
          }
        }
        c = peekNext();
        return c != '}' && c != ']';
      }
      return false;
    }
    int backup = 0;
    try {
      backup += eatWhitespaceAndComments();
      c = input_stream.readChar();
      backup ++;
      if (c == ',') {
        backup += eatWhitespaceAndComments();
        c = input_stream.readChar();
        backup ++;
        return c != '}' && c != ']';
      }
    } catch (IOException e) {
    } finally {
        input_stream.backup(backup);
    }
    return false;
  }

  boolean isCommaCloseJson(Token token) {
    char c;
    if (token.next != null) {
      if (",".equals(token.next.image)) {
        if (token.next.next != null) {
          switch(token.next.next.image) {
            case "}":
            case "]":
              return true;
            default:
              return false;
          }
        }
        c = peekNext();
        return c == '}' || c == ']';
      }
      return false;
    }
    int backup = 0;
    try {
      backup += eatWhitespaceAndComments();
      c = input_stream.readChar();
      backup ++;
      if (c == ',') {
        backup += eatWhitespaceAndComments();
        c = input_stream.readChar();
        backup ++;
        return c == '}' || c == ']';
      }
    } catch (IOException e) {
    } finally {
        input_stream.backup(backup);
    }
    return false;
  }
  boolean isMemberBody(Token token) {
    if (token.next != null) {
      return token.next.image.matches("public|private|protected");
    }
    input_stream.backup(0);
    if (peekNext() == 'p') {
      int backup = 0;
      try {
        backup += eatWhitespaceAndComments();
        char c = input_stream.readChar();
        backup ++;
        assert c == 'p';
        c = input_stream.readChar();
        backup ++;
        switch (c) {
          case 'u'://blic
            c = input_stream.readChar();
            backup ++;
            if (c != 'b') {
              return false;
            }
            c = input_stream.readChar();
            backup ++;
            if (c != 'l') {
              return false;
            }
            c = input_stream.readChar();
            backup ++;
            if (c != 'i') {
              return false;
            }
            c = input_stream.readChar();
            backup ++;
            if (c != 'c') {
              return false;
            }
            c = input_stream.readChar();
            backup ++;
            return Character.isWhitespace(c);

          case 'r'://rivate | rotected
            c = input_stream.readChar();
            backup ++;
            switch (c) {
              case 'i'://ivate
                c = input_stream.readChar();
                backup ++;
                if (c != 'v') {
                  return false;
                }
                c = input_stream.readChar();
                backup ++;
                if (c != 'a') {
                  return false;
                }
                c = input_stream.readChar();
                backup ++;
                if (c != 't') {
                  return false;
                }
                c = input_stream.readChar();
                backup ++;
                if (c != 'e') {
                  return false;
                }
                c = input_stream.readChar();
                backup ++;
                return Character.isWhitespace(c);

              case 'o'://otected
                c = input_stream.readChar();
                backup ++;
                if (c != 't') {
                  return false;
                }
                c = input_stream.readChar();
                backup ++;
                if (c != 'e') {
                  return false;
                }
                c = input_stream.readChar();
                backup ++;
                if (c != 'c') {
                  return false;
                }
                c = input_stream.readChar();
                backup ++;
                if (c != 't') {
                  return false;
                }
                c = input_stream.readChar();
                backup ++;
                if (c != 'e') {
                  return false;
                }
                c = input_stream.readChar();
                backup ++;
                if (c != 'd') {
                  return false;
                }
                c = input_stream.readChar();
                backup ++;
                return Character.isWhitespace(c);
            }
        }
      } catch (IOException e) {
      } finally {
        input_stream.backup(backup);
      }
    }
    return false;
  }

  boolean looksLikeNumber(Token token) {
    if (token.next != null) {
      token = token.next;
      if ("-".equals(token.image)) {
        if (token.next != null) {
          return Character.isDigit(token.next.image.charAt(0));
        }
        // only the - token is found, fall through to "check stream for numbers" below
      } else {
          return Character.isDigit(token.image.charAt(0));
      }
    }
    char c = peekNext();
    if (c == '-') {
      int backup = 0;
      try {
        backup = eatWhitespaceAndComments();
        c = input_stream.readChar();
        backup ++;
        assert c == '-';
        backup += eatWhitespaceAndComments();
        c = input_stream.readChar();
        return Character.isDigit(c);
      } catch (IOException e) {
      } finally {
        input_stream.backup(backup);
      }
    }
    return Character.isDigit(c);
  }
  boolean looksLikeInitializer(Token token) {
    boolean checkStatic = true;
    if (token.next != null) {
      if (token.next.image.equals("static")) {
        if (token.next.next != null) {
           return token.next.next.image.equals("{");
        }
        checkStatic = false;
      } else {
        return token.next.image.equals("{");
      }
    }
    input_stream.backup(0);
    int backup = 0;
    try {
      backup = eatWhitespaceAndComments();
      switch (peekNext()) {
          case '{':
            return true;
          case 's':
            if (!checkStatic) {
              return false;
            }
            char c = input_stream.readChar();
            backup++;
            assert c == 's';

            c = input_stream.readChar();
            backup++;
            if (c != 't') {
              return false;
            }

            c = input_stream.readChar();
            backup++;
            if (c != 'a') {
              return false;
            }

            c = input_stream.readChar();
            backup++;
            if (c != 't') {
              return false;
            }

            c = input_stream.readChar();
            backup++;
            if (c != 'i') {
              return false;
            }

            c = input_stream.readChar();
            backup++;
            if (c != 'c') {
              return false;
            }

            c = input_stream.readChar();
            backup++;
            return Character.isWhitespace(c) || c == '{';
          default:
            return false;
      }
    } catch (IOException e) {
    } finally {
      input_stream.backup(backup);
    }
    return false;
  }

  boolean looksLikeCssSelector(Token token) {
    int backup = 0;
    if (token.next != null) {
      // reverse the stream however far it is ahead,
      Token remove = token.next;
      while (remove != null) {
        backup -= remove.image.length();
        input_stream.backup(remove.image.length());
        remove = remove.next;
      }
    }
    // TODO make this far stricter,
    // and in doing so, be able to support more advanced selectors
    char c;
    try {
      boolean sawNonSpace = false;
      boolean previousWasAlphaNum = false;
      while (true) {
          c = input_stream.readChar();
          backup ++;
          switch (c) {
            case '{':
              return sawNonSpace;
            case '~':
            case '+':
            case '>':
              // Avoid matching e->{ (lambdas)
              if (!previousWasAlphaNum) {
                return false;
              }
            case '.':
            case '#':
            case '-':
            case '_':
            case ':':
              previousWasAlphaNum = false;
              sawNonSpace = true;
              break;
            default:
              if (Character.isLetterOrDigit(c)) {
                previousWasAlphaNum = true;
                sawNonSpace = true;
              } else if (!Character.isWhitespace(c)){
                return false;
              }
          }
      }
    } catch (IOException ignore) {
      // Hit EOF while peeking...
    } finally {
      input_stream.backup(backup);
    }
  return false;
  }

  boolean looksLikeJson(Token token) {
    if (token.next != null) {
      return token.next.image.equals("[") || token.next.image.equals("{");
    }
    char c = peekNext();
    return c == '[' || c == '{';
  }

  boolean looksLikeMethodOrLambda() {
    // look for a valid java name followed by ->, :: or (
    int backup = 1;
    input_stream.backup(0);
    try {
        char c = input_stream.readChar();

        while(Character.isWhitespace(c)) {
            backup++;
            c = input_stream.readChar();
        }
        if (c == '.') {
          while (c == '.' || Character.isJavaIdentifierPart(c)) {
            backup++;
            c = input_stream.readChar();
          }
          while(Character.isWhitespace(c)) {
              backup++;
              c = input_stream.readChar();
          }
        }
        switch (c) {
          case '-':
            backup++;
            c = input_stream.readChar();
            return c == '>';
          case ':':
            backup++;
            c = input_stream.readChar();
            return c == ':';
          case '(':
            return true;
          default:
            return false;
        }
    } catch (IOException e){
        return false;
    } finally {
      input_stream.backup(backup);
    }
  }

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2){
   switch (pos)
   {
      case 0:
         if ((active1 & 0x8200000000000000L) != 0L || (active2 & 0x1000804000L) != 0L)
            return 0;
         if ((active1 & 0x40000000000000L) != 0L || (active2 & 0x4000000L) != 0L)
            return 11;
         if ((active1 & 0x6aa0000L) != 0L)
            return 151;
         if ((active0 & 0xfffffffffe000000L) != 0L || (active1 & 0x1bfffL) != 0L)
         {
            jjmatchedKind = 106;
            return 109;
         }
         if ((active0 & 0x100L) != 0L || (active2 & 0x40200L) != 0L)
            return 58;
         return -1;
      case 1:
         if ((active0 & 0x100L) != 0L)
            return 63;
         if ((active0 & 0x1006000000000L) != 0L)
            return 152;
         if ((active1 & 0x6aa0000L) != 0L)
            return 151;
         if ((active0 & 0xfffeff9ffe000000L) != 0L || (active1 & 0x3fffL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 106;
               jjmatchedPos = 1;
            }
            return 152;
         }
         return -1;
      case 2:
         if ((active0 & 0x130400000000000L) != 0L || (active1 & 0x400L) != 0L)
            return 153;
         if ((active0 & 0xfecebfdffe000000L) != 0L || (active1 & 0x3bffL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 106;
               jjmatchedPos = 2;
            }
            return 153;
         }
         if ((active1 & 0x2a0000L) != 0L)
            return 151;
         return -1;
      case 3:
         if ((active0 & 0xfcae3e5e9e000000L) != 0L || (active1 & 0x31dfL) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 3;
            return 153;
         }
         if ((active0 & 0x240818160000000L) != 0L || (active1 & 0xa20L) != 0L)
            return 153;
         if ((active1 & 0x2a0000L) != 0L)
            return 151;
         return -1;
      case 4:
         if ((active0 & 0x80003c0690000000L) != 0L || (active1 & 0x20c4L) != 0L)
            return 153;
         if ((active0 & 0x7cae02580e000000L) != 0L || (active1 & 0x111bL) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 106;
               jjmatchedPos = 4;
            }
            return 153;
         }
         if ((active1 & 0x2a0000L) != 0L)
            return 151;
         return -1;
      case 5:
         if ((active0 & 0x6084004004000000L) != 0L || (active1 & 0x89L) != 0L)
            return 153;
         if ((active1 & 0xa0000L) != 0L)
            return 151;
         if ((active0 & 0x1c2a12180a000000L) != 0L || (active1 & 0x1112L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 5;
            return 153;
         }
         return -1;
      case 6:
         if ((active0 & 0xc00121008000000L) != 0L)
            return 153;
         if ((active0 & 0x102a000802000000L) != 0L || (active1 & 0x1112L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 6;
            return 153;
         }
         return -1;
      case 7:
         if ((active0 & 0x102a000000000000L) != 0L || (active1 & 0x110L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 7;
            return 153;
         }
         if ((active0 & 0x802000000L) != 0L || (active1 & 0x1002L) != 0L)
            return 153;
         return -1;
      case 8:
         if ((active0 & 0x1020000000000000L) != 0L || (active1 & 0x100L) != 0L)
            return 153;
         if ((active0 & 0xa000000000000L) != 0L || (active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 8;
            return 153;
         }
         return -1;
      case 9:
         if ((active0 & 0xa000000000000L) != 0L)
            return 153;
         if ((active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 9;
            return 153;
         }
         return -1;
      case 10:
         if ((active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 10;
            return 153;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 26:
         return jjStopAtPos(0, 160);
      case 33:
         jjmatchedKind = 122;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x2L);
      case 36:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x18000L, 0x0L);
      case 37:
         jjmatchedKind = 141;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x400000L);
      case 38:
         jjmatchedKind = 138;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x80008L);
      case 40:
         return jjStopAtPos(0, 110);
      case 41:
         return jjStopAtPos(0, 111);
      case 42:
         jjmatchedKind = 136;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x20000L);
      case 43:
         jjmatchedKind = 134;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x8010L);
      case 44:
         return jjStopAtPos(0, 117);
      case 45:
         jjmatchedKind = 135;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x8010020L);
      case 46:
         jjmatchedKind = 118;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x4000000L);
      case 47:
         jjmatchedKind = 137;
         return jjMoveStringLiteralDfa1_0(0x100L, 0x0L, 0x40000L);
      case 58:
         jjmatchedKind = 125;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x540000L, 0x10000000L);
      case 59:
         return jjStopAtPos(0, 116);
      case 60:
         jjmatchedKind = 121;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000000000000000L, 0x1000804000L);
      case 61:
         jjmatchedKind = 120;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000000000000000L, 0x0L);
      case 62:
         jjmatchedKind = 159;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x2463000001L);
      case 63:
         return jjStopAtPos(0, 124);
      case 64:
         jjmatchedKind = 119;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000000L, 0x0L);
      case 91:
         return jjStopAtPos(0, 114);
      case 92:
         jjmatchedKind = 163;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x200000000L);
      case 93:
         return jjStopAtPos(0, 115);
      case 94:
         jjmatchedKind = 140;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x200000L);
      case 96:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x6aa0000L, 0x0L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x6000000L, 0x0L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x38000000L, 0x0L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0xfc0000000L, 0x0L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x7000000000L, 0x0L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x38000000000L, 0x0L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x7c0000000000L, 0x0L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x800000000000L, 0x0L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x3f000000000000L, 0x0L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x40000000000000L, 0x0L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x380000000000000L, 0x0L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x3c00000000000000L, 0x0L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x4000000000000000L, 0x0L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x8000000000000000L, 0x1fL, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x7e0L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1800L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 112);
      case 124:
         jjmatchedKind = 139;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x100004L);
      case 125:
         jjmatchedKind = 113;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000000L, 0x0L);
      case 126:
         return jjStopAtPos(0, 123);
      default :
         return jjMoveNfa_0(9, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active2 & 0x8L) != 0L)
            return jjStopAtPos(1, 131);
         break;
      case 42:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(1, 8, 63);
         break;
      case 43:
         if ((active2 & 0x10L) != 0L)
            return jjStopAtPos(1, 132);
         break;
      case 45:
         if ((active2 & 0x20L) != 0L)
            return jjStopAtPos(1, 133);
         break;
      case 46:
         if ((active1 & 0x8000L) != 0L)
            return jjStopAtPos(1, 79);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x4000000L);
      case 47:
         if ((active2 & 0x1000000000L) != 0L)
            return jjStopAtPos(1, 164);
         break;
      case 58:
         if ((active1 & 0x10000L) != 0L)
            return jjStopAtPos(1, 80);
         else if ((active2 & 0x10000000L) != 0L)
            return jjStopAtPos(1, 156);
         else if ((active2 & 0x2000000000L) != 0L)
            return jjStopAtPos(1, 165);
         break;
      case 60:
         if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(1, 89, 151);
         else if ((active2 & 0x4000L) != 0L)
         {
            jjmatchedKind = 142;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x800000L);
      case 61:
         if ((active1 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(1, 126);
         else if ((active1 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(1, 127);
         else if ((active2 & 0x1L) != 0L)
            return jjStopAtPos(1, 128);
         else if ((active2 & 0x2L) != 0L)
            return jjStopAtPos(1, 129);
         else if ((active2 & 0x8000L) != 0L)
            return jjStopAtPos(1, 143);
         else if ((active2 & 0x10000L) != 0L)
            return jjStopAtPos(1, 144);
         else if ((active2 & 0x20000L) != 0L)
            return jjStopAtPos(1, 145);
         else if ((active2 & 0x40000L) != 0L)
            return jjStopAtPos(1, 146);
         else if ((active2 & 0x80000L) != 0L)
            return jjStopAtPos(1, 147);
         else if ((active2 & 0x100000L) != 0L)
            return jjStopAtPos(1, 148);
         else if ((active2 & 0x200000L) != 0L)
            return jjStopAtPos(1, 149);
         else if ((active2 & 0x400000L) != 0L)
            return jjStopAtPos(1, 150);
         break;
      case 62:
         if ((active2 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 155);
         else if ((active2 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 158;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x23000000L);
      case 64:
         if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(1, 87, 151);
         break;
      case 92:
         if ((active2 & 0x200000000L) != 0L)
            return jjStopAtPos(1, 161);
         break;
      case 96:
         if ((active1 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 88);
         else if ((active1 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 91);
         else if ((active2 & 0x400000000L) != 0L)
            return jjStopAtPos(1, 162);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x4800400c0000000L, active1, 0L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000L, active1, 0L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x600000L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x4100001000000000L, active1, 0L, active2, 0L);
      case 102:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 48, 152);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000100000000L, active1, 0x1820e0L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x180000000000L, active1, 0L, active2, 0L);
      case 106:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x60000L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x208200000000L, active1, 0L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x6000000000000L, active1, 0L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x38010000000000L, active1, 0L, active2, 0L);
      case 111:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x40c04c08000000L, active1, 0x1800L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x1800000010000000L, active1, 0x700L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000L, active1, 0L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x3L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x2200000000000000L, active1, 0x4L, active2, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8L, active2, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000L, active1, 0L, active2, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000L, active1, 0x10L, active2, 0L);
      case 123:
         if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(1, 90, 151);
         break;
      case 124:
         if ((active2 & 0x4L) != 0L)
            return jjStopAtPos(1, 130);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2);
      return 2;
   }
   switch(curChar)
   {
      case 46:
         if ((active2 & 0x4000000L) != 0L)
            return jjStopAtPos(2, 154);
         break;
      case 61:
         if ((active2 & 0x800000L) != 0L)
            return jjStopAtPos(2, 151);
         else if ((active2 & 0x1000000L) != 0L)
            return jjStopAtPos(2, 152);
         break;
      case 62:
         if ((active2 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 157;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x2000000L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x300000000L, active1, 0x60101L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000000L, active1, 0L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000000L, active1, 0L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000L, active1, 0L, active2, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000L, active1, 0L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000000L, active1, 0x2828L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x200040000000000L, active1, 0x1000L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x40180c00000000L, active1, 0x10L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x9000200008000000L, active1, 0L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x6000000000000L, active1, 0x4L, active2, 0L);
      case 114:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 46, 153);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0xc2L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x8008046000000L, active1, 0x600000L, active2, 0L);
      case 116:
         if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x40a08200a0000000L, active1, 0x180000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x14000000000L, active1, 0x200L, active2, 0L);
      case 119:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 56, 153);
         break;
      case 121:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(2, 74, 153);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2);
      return 3;
   }
   switch(curChar)
   {
      case 61:
         if ((active2 & 0x2000000L) != 0L)
            return jjStopAtPos(3, 153);
         break;
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x381010000000L, active1, 0x1000L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000L, active1, 0L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000L, active1, 0x10L, active2, 0L);
      case 100:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(3, 75, 153);
         break;
      case 101:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(3, 29, 153);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(3, 30, 153);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 39, 153);
         else if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(3, 73, 153);
         return jjMoveStringLiteralDfa4_0(active0, 0x20020004000000L, active1, 0x4L, active2, 0L);
      case 103:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 54, 153);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000000L, active1, 0x2L, active2, 0L);
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000000L, active1, 0L, active2, 0L);
      case 108:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 57, 153);
         return jjMoveStringLiteralDfa4_0(active0, 0x2002000008000000L, active1, 0x2000L, active2, 0L);
      case 109:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 40, 153);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x180000L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x100L, active2, 0L);
      case 111:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 47, 153);
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000L, active1, 0xc0L, active2, 0L);
      case 114:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 32, 153);
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000000L, active1, 0L, active2, 0L);
      case 115:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(3, 69, 153);
         return jjMoveStringLiteralDfa4_0(active0, 0x40600000000L, active1, 0x600000L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x1008000802000000L, active1, 0x9L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000000L, active1, 0L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000000000L, active1, 0x60000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 58:
         if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(4, 85, 151);
         break;
      case 96:
         if ((active1 & 0x400000L) != 0L)
            return jjStopAtPos(4, 86);
         break;
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0xc08000000000000L, active1, 0x60000L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0xaL);
      case 101:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 42, 153);
         else if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(4, 77, 153);
         return jjMoveStringLiteralDfa5_0(active0, 0x1002000008000000L, active1, 0L);
      case 104:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(4, 31, 153);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000800000000L, active1, 0x1L);
      case 107:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(4, 28, 153);
         break;
      case 108:
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x104000000000L, active1, 0x180000L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000000L, active1, 0L);
      case 114:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(4, 66, 153);
         return jjMoveStringLiteralDfa5_0(active0, 0x4024000006000000L, active1, 0L);
      case 115:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(4, 33, 153);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x100L);
      case 116:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(4, 34, 153);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 45, 153);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 63, 153);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000000L, active1, 0L);
      case 119:
         if ((active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 58:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(5, 81, 151);
         else if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(5, 83, 151);
         break;
      case 96:
         if ((active1 & 0x40000L) != 0L)
            return jjStopAtPos(5, 82);
         else if ((active1 & 0x100000L) != 0L)
            return jjStopAtPos(5, 84);
         break;
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0xa000000L, active1, 0L);
      case 99:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 61, 153);
         else if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(5, 64, 153);
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 38, 153);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 55, 153);
         break;
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000000000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000000000L, active1, 0L);
      case 104:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(5, 67, 153);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1100L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x101000000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000000L, active1, 0L);
      case 110:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 62, 153);
         return jjMoveStringLiteralDfa6_0(active0, 0x8000800000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x10L);
      case 115:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(5, 71, 153);
         break;
      case 116:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(5, 26, 153);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 50, 153);
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000000000L, active1, 0x2L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000002000000L, active1, 0L);
      case 101:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 58, 153);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 59, 153);
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000000L, active1, 0x100L);
      case 102:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1000L);
      case 110:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(6, 27, 153);
         break;
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x10L);
      case 115:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 41, 153);
         break;
      case 116:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 36, 153);
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000L, active1, 0L);
      case 121:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 44, 153);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(7, 35, 153);
         else if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(7, 76, 153);
         return jjMoveStringLiteralDfa8_0(active0, 0x1008000000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000000000L, active1, 0x110L);
      case 112:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(7, 65, 153);
         break;
      case 116:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(7, 25, 153);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 60, 153);
         break;
      case 101:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 53, 153);
         break;
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x10L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000000000L, active1, 0L);
      case 116:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(8, 72, 153);
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 102:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 51, 153);
         break;
      case 115:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 49, 153);
         break;
      case 122:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x10L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, 0L, active1, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa11_0(active1, 0x10L);
      default :
         break;
   }
   return jjStartNfa_0(9, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa11_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(9, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, 0L, active1, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 100:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(11, 68, 153);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, 0L, active1, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec1 = {
   0xfff0000000200002L, 0xffffffffffffdfffL, 0xfffff00f7fffffffL, 0x12000000007fffffL
};
static final long[] jjbitVec3 = {
   0x0L, 0x0L, 0x420043c00000000L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec4 = {
   0x7fffffffffffffL, 0xffffffffffff0000L, 0xffffffffffffffffL, 0x401f0003ffc3L
};
static final long[] jjbitVec5 = {
   0x0L, 0x400000000000000L, 0xfffffffbffffd740L, 0xfbfffffffff7fffL
};
static final long[] jjbitVec6 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffffffc03L, 0x33fffffffff7fffL
};
static final long[] jjbitVec7 = {
   0xfffe00000000ffffL, 0xfffffffe027fffffL, 0xffL, 0x707ffffff0000L
};
static final long[] jjbitVec8 = {
   0x7fffffe00000000L, 0xfffec000000007ffL, 0xffffffffffffffffL, 0x9c00c060002fffffL
};
static final long[] jjbitVec9 = {
   0xfffffffd0000L, 0xe000L, 0x2003fffffffffL, 0x0L
};
static final long[] jjbitVec10 = {
   0x23fffffffffffff0L, 0x3ff010000L, 0x23c5fdfffff99fe0L, 0xf0003b0000000L
};
static final long[] jjbitVec11 = {
   0x36dfdfffff987e0L, 0x1c00005e000000L, 0x23edfdfffffbbfe0L, 0x2000300010000L
};
static final long[] jjbitVec12 = {
   0x23edfdfffff99fe0L, 0x20003b0000000L, 0x3bfc718d63dc7e8L, 0x200000000000000L
};
static final long[] jjbitVec13 = {
   0x3effdfffffddfe0L, 0x300000000L, 0x23effdfffffddfe0L, 0x340000000L
};
static final long[] jjbitVec14 = {
   0x3fffdfffffddfe0L, 0x300000000L, 0x2ffbfffffc7fffe0L, 0x7fL
};
static final long[] jjbitVec15 = {
   0x800dfffffffffffeL, 0x7fL, 0x200decaefef02596L, 0x3000005fL
};
static final long[] jjbitVec16 = {
   0x1L, 0x7fffffffeffL, 0xf00L, 0x0L
};
static final long[] jjbitVec17 = {
   0x6fbffffffffL, 0x3f0000L, 0xffffffff00000000L, 0x1ffffffffff003fL
};
static final long[] jjbitVec18 = {
   0xffffffffffffffffL, 0xffffffff83ffffffL, 0xffffff07ffffffffL, 0x3ffffffffffffffL
};
static final long[] jjbitVec19 = {
   0xffffffffffffff7fL, 0xffffffff3d7f3d7fL, 0x7f3d7fffffff3d7fL, 0xffff7fffff7f7f3dL
};
static final long[] jjbitVec20 = {
   0xffffffff7f3d7fffL, 0x7ffff7fL, 0xffffffff00000000L, 0x1fffffffffffffL
};
static final long[] jjbitVec21 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec22 = {
   0xffffffffffffffffL, 0x7f9fffffffffffL, 0xffffffff07fffffeL, 0x1c7ffffffffffL
};
static final long[] jjbitVec23 = {
   0x3ffff0003dfffL, 0x1dfff0003ffffL, 0xfffffffffffffL, 0x18800000L
};
static final long[] jjbitVec24 = {
   0xffffffff00000000L, 0xffffffffffffffL, 0x1ffffffffffL, 0x0L
};
static final long[] jjbitVec25 = {
   0x1fffffffL, 0x1f3fffffff0000L, 0x0L, 0x0L
};
static final long[] jjbitVec26 = {
   0xffffffffffffffffL, 0xfffffffffffL, 0x0L, 0x0L
};
static final long[] jjbitVec27 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffff0fffffffL, 0x3ffffffffffffffL
};
static final long[] jjbitVec28 = {
   0xffffffff3f3fffffL, 0x3fffffffaaff3f3fL, 0x5fdfffffffffffffL, 0x1fdc1fff0fcf1fdcL
};
static final long[] jjbitVec29 = {
   0x8000000000000000L, 0x8002000000100001L, 0x3ffff00000000L, 0x0L
};
static final long[] jjbitVec30 = {
   0xe3fbbd503e2ffc84L, 0xffffffff000003e0L, 0xfL, 0x0L
};
static final long[] jjbitVec31 = {
   0x1f3e03fe000000e0L, 0xfffffffffffffffeL, 0xfffffffee07fffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec32 = {
   0xfffe1fffffffffe0L, 0xffffffffffffffffL, 0xffffff00007fffL, 0xffff000000000000L
};
static final long[] jjbitVec33 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fffffffffffffL, 0x0L
};
static final long[] jjbitVec34 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fffffffffL, 0x0L
};
static final long[] jjbitVec35 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x1fffL, 0x0L
};
static final long[] jjbitVec36 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffL, 0x0L
};
static final long[] jjbitVec37 = {
   0x6L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec38 = {
   0xffff3fffffffffffL, 0x7ffffffffffL, 0x0L, 0x0L
};
static final long[] jjbitVec39 = {
   0x5f7ffdffa0f8007fL, 0xffffffffffffffdbL, 0x3ffffffffffffL, 0xfffffffffff80000L
};
static final long[] jjbitVec40 = {
   0x3fffffffffffffffL, 0xffffffffffff0000L, 0xfffffffffffcffffL, 0x1fff0000000000ffL
};
static final long[] jjbitVec41 = {
   0x18000000000000L, 0xffdf02000000e000L, 0xffffffffffffffffL, 0x1fffffffffffffffL
};
static final long[] jjbitVec42 = {
   0x87fffffe00000010L, 0xffffffe007fffffeL, 0x7fffffffffffffffL, 0x631cfcfcfcL
};
static final long[] jjbitVec43 = {
   0x0L, 0x0L, 0x420243cffffffffL, 0xff7fffffff7fffffL
};
static final long[] jjbitVec44 = {
   0xffffffffffffffffL, 0x400ffffe0ffffffL, 0xfffffffbffffd740L, 0xfbfffffffff7fffL
};
static final long[] jjbitVec45 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffffffc7bL, 0x33fffffffff7fffL
};
static final long[] jjbitVec46 = {
   0xfffe00000000ffffL, 0xfffffffe027fffffL, 0xbbfffffbfffe00ffL, 0x707ffffff0016L
};
static final long[] jjbitVec47 = {
   0x7fffffe003f000fL, 0xffffc3ff01ffffffL, 0xffffffffffffffffL, 0x9ffffdffbfefffffL
};
static final long[] jjbitVec48 = {
   0xffffffffffff8000L, 0xe7ffL, 0x3ffffffffffffL, 0x0L
};
static final long[] jjbitVec49 = {
   0xf3fffffffffffffeL, 0xffcfff1f3fffL, 0xf3c5fdfffff99feeL, 0xfffcfb080399fL
};
static final long[] jjbitVec50 = {
   0xd36dfdfffff987eeL, 0x1fffc05e003987L, 0xf3edfdfffffbbfeeL, 0x2ffcf00013bbfL
};
static final long[] jjbitVec51 = {
   0xf3edfdfffff99feeL, 0x2ffc3b0c0398fL, 0xc3bfc718d63dc7ecL, 0x200ff8000803dc7L
};
static final long[] jjbitVec52 = {
   0xc3effdfffffddfeeL, 0xffc300603ddfL, 0xf3effdfffffddfecL, 0xffc340603ddfL
};
static final long[] jjbitVec53 = {
   0xc3fffdfffffddfecL, 0xffc300803dcfL, 0x2ffbfffffc7fffecL, 0xc0000ff5f847fL
};
static final long[] jjbitVec54 = {
   0x87fffffffffffffeL, 0x3ff7fffL, 0x3bffecaefef02596L, 0x33ff3f5fL
};
static final long[] jjbitVec55 = {
   0xc2a003ff03000001L, 0xfffe07fffffffeffL, 0x1ffffffffeff0fdfL, 0x40L
};
static final long[] jjbitVec56 = {
   0x3c7f6fbffffffffL, 0x3ff03ffL, 0xffffffff00000000L, 0x1ffffffffff003fL
};
static final long[] jjbitVec57 = {
   0xffffffff7f3d7fffL, 0x3fe0007ffff7fL, 0xffffffff00000000L, 0x1fffffffffffffL
};
static final long[] jjbitVec58 = {
   0x1fffff001fdfffL, 0xddfff000fffffL, 0xffffffffffffffffL, 0x3ff388fffffL
};
static final long[] jjbitVec59 = {
   0xffffffff03ff3800L, 0xffffffffffffffL, 0x3ffffffffffL, 0x0L
};
static final long[] jjbitVec60 = {
   0xfff0fff1fffffffL, 0x1f3fffffffffc0L, 0x0L, 0x0L
};
static final long[] jjbitVec61 = {
   0x80007c000000f000L, 0x8002fc0f00100001L, 0x3ffff00000000L, 0x7e21fff0000L
};
static final long[] jjbitVec62 = {
   0x1f3efffe000000e0L, 0xfffffffffffffffeL, 0xfffffffee67fffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec63 = {
   0x10000000000006L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec64 = {
   0x3L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec65 = {
   0x0L, 0x800000000000000L, 0x0L, 0x0L
};
static final long[] jjbitVec66 = {
   0x5f7ffdffe0f8007fL, 0xffffffffffffffdbL, 0x3ffffffffffffL, 0xfffffffffff80000L
};
static final long[] jjbitVec67 = {
   0x18000f0000ffffL, 0xffdf02000000e000L, 0xffffffffffffffffL, 0x9fffffffffffffffL
};
static final long[] jjbitVec68 = {
   0x87fffffe03ff0010L, 0xffffffe007fffffeL, 0x7fffffffffffffffL, 0xe0000631cfcfcfcL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 151;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 9:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 93)
                        kind = 93;
                     { jjCheckNAddStates(0, 14); }
                  }
                  else if (curChar == 36)
                  {
                     if (kind > 106)
                        kind = 106;
                     { jjCheckNAddStates(15, 17); }
                  }
                  else if (curChar == 47)
                     { jjAddStates(18, 19); }
                  else if (curChar == 34)
                     { jjCheckNAddStates(20, 23); }
                  else if (curChar == 39)
                     { jjAddStates(24, 26); }
                  else if (curChar == 46)
                     { jjCheckNAdd(11); }
                  else if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 0;
                  if (curChar == 48)
                     { jjAddStates(27, 34); }
                  break;
               case 109:
                  if ((0x3ff00100fffc1ffL & l) != 0L)
                  {
                     if (kind > 106)
                        kind = 106;
                     { jjCheckNAdd(108); }
                  }
                  else if ((0x240000000000L & l) != 0L)
                     { jjCheckNAddStates(35, 37); }
                  if (curChar == 36)
                     { jjCheckNAddStates(38, 41); }
                  break;
               case 152:
                  if ((0x3ff00100fffc1ffL & l) != 0L)
                     { jjCheckNAddStates(38, 41); }
                  else if ((0x240000000000L & l) != 0L)
                     { jjCheckNAddStates(35, 37); }
                  if ((0x3ff00100fffc1ffL & l) != 0L)
                  {
                     if (kind > 106)
                        kind = 106;
                     { jjCheckNAdd(108); }
                  }
                  else if (curChar == 42)
                  {
                     if (kind > 107)
                        kind = 107;
                  }
                  if (curChar == 36)
                  {
                     if (kind > 107)
                        kind = 107;
                     { jjCheckNAddStates(42, 46); }
                  }
                  break;
               case 58:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 63;
                  else if (curChar == 47)
                  {
                     if (kind > 6)
                        kind = 6;
                     { jjCheckNAddStates(47, 49); }
                  }
                  break;
               case 153:
                  if ((0x3ff00100fffc1ffL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     { jjCheckNAdd(114); }
                  }
                  else if ((0x240000000000L & l) != 0L)
                     { jjCheckNAddStates(35, 37); }
                  if ((0x3ff00100fffc1ffL & l) != 0L)
                     { jjCheckNAddStates(38, 41); }
                  else if (curChar == 42)
                  {
                     if (kind > 107)
                        kind = 107;
                  }
                  if ((0x3ff00100fffc1ffL & l) != 0L)
                  {
                     if (kind > 106)
                        kind = 106;
                     { jjCheckNAdd(108); }
                  }
                  if (curChar == 36)
                  {
                     if (kind > 107)
                        kind = 107;
                     { jjCheckNAddStates(42, 46); }
                  }
                  break;
               case 151:
               case 53:
                  { jjCheckNAddStates(50, 52); }
                  break;
               case 0:
                  if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 8:
                  if (curChar == 32 && kind > 78)
                     kind = 78;
                  break;
               case 10:
                  if (curChar == 46)
                     { jjCheckNAdd(11); }
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  { jjCheckNAddStates(53, 56); }
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(12, 13); }
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  { jjCheckNAddStates(57, 59); }
                  break;
               case 15:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(16); }
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  { jjCheckNAddStates(60, 62); }
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(17, 18); }
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  { jjCheckNAddTwoStates(16, 19); }
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  { jjCheckNAddStates(63, 66); }
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  { jjCheckNAddStates(67, 71); }
                  break;
               case 22:
                  if (curChar == 39)
                     { jjAddStates(24, 26); }
                  break;
               case 23:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     { jjCheckNAdd(24); }
                  break;
               case 24:
                  if (curChar == 39 && kind > 103)
                     kind = 103;
                  break;
               case 26:
                  if ((0x8400000000L & l) != 0L)
                     { jjCheckNAdd(24); }
                  break;
               case 27:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(28, 24); }
                  break;
               case 28:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAdd(24); }
                  break;
               case 29:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 30:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAdd(28); }
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(24); }
                  break;
               case 37:
                  if (curChar == 34)
                     { jjCheckNAddStates(20, 23); }
                  break;
               case 38:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     { jjCheckNAddStates(20, 23); }
                  break;
               case 40:
                  if ((0x8400000000L & l) != 0L)
                     { jjCheckNAddStates(20, 23); }
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 44:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(20, 23); }
                  break;
               case 47:
                  if (curChar == 34 && kind > 104)
                     kind = 104;
                  break;
               case 48:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(72, 76); }
                  break;
               case 49:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(20, 23); }
                  break;
               case 50:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 51:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAdd(49); }
                  break;
               case 57:
                  if (curChar == 47)
                     { jjAddStates(18, 19); }
                  break;
               case 59:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  { jjCheckNAddStates(47, 49); }
                  break;
               case 60:
                  if ((0x2400L & l) != 0L && kind > 6)
                     kind = 6;
                  break;
               case 61:
                  if (curChar == 10 && kind > 6)
                     kind = 6;
                  break;
               case 62:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 63:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 64:
                  if ((0xffff7fffffffffffL & l) != 0L && kind > 7)
                     kind = 7;
                  break;
               case 65:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 66:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 93)
                     kind = 93;
                  { jjCheckNAddStates(0, 14); }
                  break;
               case 67:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(67, 68); }
                  break;
               case 68:
               case 119:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(69); }
                  break;
               case 70:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(70, 71); }
                  break;
               case 71:
               case 130:
                  if ((0x3ff000000000000L & l) != 0L && kind > 93)
                     kind = 93;
                  break;
               case 72:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(72, 73); }
                  break;
               case 73:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(77, 79); }
                  break;
               case 74:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(80, 83); }
                  break;
               case 76:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(77); }
                  break;
               case 77:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(84, 86); }
                  break;
               case 78:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(78, 79); }
                  break;
               case 79:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(77, 19); }
                  break;
               case 80:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(87, 90); }
                  break;
               case 81:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(91, 95); }
                  break;
               case 82:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(82, 83); }
                  break;
               case 83:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(84, 85); }
                  break;
               case 84:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(96, 98); }
                  break;
               case 86:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(87); }
                  break;
               case 87:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  { jjCheckNAddStates(99, 101); }
                  break;
               case 88:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(88, 89); }
                  break;
               case 89:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  { jjCheckNAddTwoStates(87, 19); }
                  break;
               case 90:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  { jjCheckNAddStates(102, 105); }
                  break;
               case 91:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(106, 109); }
                  break;
               case 92:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(92, 93); }
                  break;
               case 93:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(94, 95); }
                  break;
               case 94:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(110, 112); }
                  break;
               case 95:
                  if (curChar != 46)
                     break;
                  if (kind > 98)
                     kind = 98;
                  { jjCheckNAddStates(113, 115); }
                  break;
               case 96:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  { jjCheckNAddStates(116, 119); }
                  break;
               case 97:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(97, 98); }
                  break;
               case 98:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  { jjCheckNAddStates(113, 115); }
                  break;
               case 100:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(101); }
                  break;
               case 101:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  { jjCheckNAddStates(120, 122); }
                  break;
               case 102:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(102, 103); }
                  break;
               case 103:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  { jjCheckNAddTwoStates(101, 19); }
                  break;
               case 104:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  { jjCheckNAddStates(123, 126); }
                  break;
               case 105:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  { jjCheckNAddStates(127, 131); }
                  break;
               case 106:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(132, 135); }
                  break;
               case 107:
                  if (curChar != 36)
                     break;
                  if (kind > 106)
                     kind = 106;
                  { jjCheckNAddStates(15, 17); }
                  break;
               case 108:
                  if ((0x3ff00100fffc1ffL & l) == 0L)
                     break;
                  if (kind > 106)
                     kind = 106;
                  { jjCheckNAdd(108); }
                  break;
               case 110:
                  if ((0x3ff00100fffc1ffL & l) != 0L)
                     { jjCheckNAddStates(38, 41); }
                  break;
               case 111:
                  if ((0x240000000000L & l) != 0L)
                     { jjCheckNAddStates(35, 37); }
                  break;
               case 112:
                  if (curChar == 42 && kind > 107)
                     kind = 107;
                  break;
               case 113:
                  if (curChar != 36)
                     break;
                  if (kind > 107)
                     kind = 107;
                  { jjCheckNAddStates(42, 46); }
                  break;
               case 114:
                  if ((0x3ff00100fffc1ffL & l) == 0L)
                     break;
                  if (kind > 107)
                     kind = 107;
                  { jjCheckNAdd(114); }
                  break;
               case 115:
                  if (curChar == 48)
                     { jjAddStates(27, 34); }
                  break;
               case 117:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(136, 138); }
                  break;
               case 118:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(118, 119); }
                  break;
               case 120:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(139, 141); }
                  break;
               case 121:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(121, 122); }
                  break;
               case 122:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAdd(69); }
                  break;
               case 124:
                  if ((0x3000000000000L & l) != 0L)
                     { jjCheckNAddStates(142, 144); }
                  break;
               case 125:
                  if ((0x3000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(125, 126); }
                  break;
               case 126:
                  if ((0x3000000000000L & l) != 0L)
                     { jjCheckNAdd(69); }
                  break;
               case 128:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 93)
                     kind = 93;
                  { jjCheckNAddTwoStates(129, 130); }
                  break;
               case 129:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(129, 130); }
                  break;
               case 131:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 93)
                     kind = 93;
                  { jjCheckNAddTwoStates(132, 133); }
                  break;
               case 132:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(132, 133); }
                  break;
               case 133:
                  if ((0xff000000000000L & l) != 0L && kind > 93)
                     kind = 93;
                  break;
               case 135:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 93)
                     kind = 93;
                  { jjCheckNAddTwoStates(136, 137); }
                  break;
               case 136:
                  if ((0x3000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(136, 137); }
                  break;
               case 137:
                  if ((0x3000000000000L & l) != 0L && kind > 93)
                     kind = 93;
                  break;
               case 139:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjAddStates(145, 146); }
                  break;
               case 140:
                  if (curChar == 46)
                     { jjCheckNAdd(141); }
                  break;
               case 141:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(141, 142); }
                  break;
               case 143:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(144); }
                  break;
               case 144:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  { jjCheckNAddTwoStates(144, 19); }
                  break;
               case 146:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(147, 149); }
                  break;
               case 147:
                  if (curChar == 46)
                     { jjCheckNAdd(148); }
                  break;
               case 149:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(150); }
                  break;
               case 150:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  { jjCheckNAddTwoStates(150, 19); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 9:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 106)
                        kind = 106;
                     { jjCheckNAddStates(15, 17); }
                  }
                  else if (curChar == 96)
                     { jjCheckNAddStates(50, 52); }
                  break;
               case 109:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(38, 41); }
                  if ((0x87fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 106)
                        kind = 106;
                     { jjCheckNAdd(108); }
                  }
                  break;
               case 152:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     { jjCheckNAddStates(42, 46); }
                  }
                  if ((0x87fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(38, 41); }
                  if ((0x87fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 106)
                        kind = 106;
                     { jjCheckNAdd(108); }
                  }
                  break;
               case 153:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     { jjCheckNAddStates(42, 46); }
                  }
                  if ((0x87fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     { jjCheckNAdd(114); }
                  }
                  if ((0x87fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(38, 41); }
                  if ((0x87fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 106)
                        kind = 106;
                     { jjCheckNAdd(108); }
                  }
                  break;
               case 151:
                  if ((0xfffffffeffffffffL & l) != 0L)
                     { jjCheckNAddStates(50, 52); }
                  else if (curChar == 96)
                  {
                     if (kind > 105)
                        kind = 105;
                  }
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 1:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 2:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 3:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 4:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 5:
                  if ((0x200000002000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 6:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 7:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 12:
                  if (curChar == 95)
                     { jjAddStates(150, 151); }
                  break;
               case 14:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(152, 153); }
                  break;
               case 17:
                  if (curChar == 95)
                     { jjAddStates(154, 155); }
                  break;
               case 19:
                  if ((0x5000000050L & l) != 0L && kind > 98)
                     kind = 98;
                  break;
               case 23:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAdd(24); }
                  break;
               case 25:
                  if (curChar == 92)
                     { jjAddStates(156, 158); }
                  break;
               case 26:
                  if ((0x14404410000000L & l) != 0L)
                     { jjCheckNAdd(24); }
                  break;
               case 31:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 32:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 33:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 34:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 35:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAdd(24); }
                  break;
               case 36:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 38:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(20, 23); }
                  break;
               case 39:
                  if (curChar == 92)
                     { jjAddStates(159, 161); }
                  break;
               case 40:
                  if ((0x14404410000000L & l) != 0L)
                     { jjCheckNAddStates(20, 23); }
                  break;
               case 41:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 42:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 43:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 44:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 45:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(20, 23); }
                  break;
               case 46:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 52:
               case 54:
                  if (curChar == 96)
                     { jjCheckNAddStates(50, 52); }
                  break;
               case 53:
                  if ((0xfffffffeffffffffL & l) != 0L)
                     { jjCheckNAddStates(50, 52); }
                  break;
               case 55:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 56:
                  if (curChar == 96 && kind > 105)
                     kind = 105;
                  break;
               case 59:
                  if (kind > 6)
                     kind = 6;
                  { jjAddStates(47, 49); }
                  break;
               case 64:
                  if (kind > 7)
                     kind = 7;
                  break;
               case 67:
                  if (curChar == 95)
                     { jjAddStates(162, 163); }
                  break;
               case 69:
                  if ((0x100000001000L & l) != 0L && kind > 92)
                     kind = 92;
                  break;
               case 70:
                  if (curChar == 95)
                     { jjAddStates(164, 165); }
                  break;
               case 72:
                  if (curChar == 95)
                     { jjAddStates(166, 167); }
                  break;
               case 75:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(168, 169); }
                  break;
               case 78:
                  if (curChar == 95)
                     { jjAddStates(170, 171); }
                  break;
               case 82:
                  if (curChar == 95)
                     { jjAddStates(172, 173); }
                  break;
               case 85:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(174, 175); }
                  break;
               case 88:
                  if (curChar == 95)
                     { jjAddStates(176, 177); }
                  break;
               case 92:
                  if (curChar == 95)
                     { jjAddStates(178, 179); }
                  break;
               case 97:
                  if (curChar == 95)
                     { jjAddStates(180, 181); }
                  break;
               case 99:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(182, 183); }
                  break;
               case 102:
                  if (curChar == 95)
                     { jjAddStates(184, 185); }
                  break;
               case 107:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 106)
                     kind = 106;
                  { jjCheckNAddStates(15, 17); }
                  break;
               case 108:
                  if ((0x87fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 106)
                     kind = 106;
                  { jjCheckNAdd(108); }
                  break;
               case 110:
                  if ((0x87fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(38, 41); }
                  break;
               case 113:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 107)
                     kind = 107;
                  { jjCheckNAddStates(42, 46); }
                  break;
               case 114:
                  if ((0x87fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 107)
                     kind = 107;
                  { jjCheckNAdd(114); }
                  break;
               case 116:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 117;
                  break;
               case 117:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(136, 138); }
                  break;
               case 118:
                  if ((0x7e8000007eL & l) != 0L)
                     { jjCheckNAddTwoStates(118, 119); }
                  break;
               case 119:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAdd(69); }
                  break;
               case 121:
                  if (curChar == 95)
                     { jjAddStates(186, 187); }
                  break;
               case 123:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 124;
                  break;
               case 125:
                  if (curChar == 95)
                     { jjAddStates(188, 189); }
                  break;
               case 127:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 128;
                  break;
               case 128:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 93)
                     kind = 93;
                  { jjCheckNAddTwoStates(129, 130); }
                  break;
               case 129:
                  if ((0x7e8000007eL & l) != 0L)
                     { jjCheckNAddTwoStates(129, 130); }
                  break;
               case 130:
                  if ((0x7e0000007eL & l) != 0L && kind > 93)
                     kind = 93;
                  break;
               case 132:
                  if (curChar == 95)
                     { jjAddStates(190, 191); }
                  break;
               case 134:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 135;
                  break;
               case 136:
                  if (curChar == 95)
                     { jjAddStates(192, 193); }
                  break;
               case 138:
                  if ((0x100000001000000L & l) != 0L)
                     { jjCheckNAddTwoStates(139, 140); }
                  break;
               case 139:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddTwoStates(139, 140); }
                  break;
               case 141:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjAddStates(194, 195); }
                  break;
               case 142:
                  if ((0x1000000010000L & l) != 0L)
                     { jjAddStates(196, 197); }
                  break;
               case 145:
                  if ((0x100000001000000L & l) != 0L)
                     { jjCheckNAdd(146); }
                  break;
               case 146:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(147, 149); }
                  break;
               case 148:
                  if ((0x1000000010000L & l) != 0L)
                     { jjAddStates(198, 199); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 9:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 106)
                     kind = 106;
                  { jjCheckNAddStates(15, 17); }
                  break;
               case 109:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 106)
                        kind = 106;
                     { jjCheckNAdd(108); }
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(38, 41); }
                  break;
               case 152:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 106)
                        kind = 106;
                     { jjCheckNAdd(108); }
                  }
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(38, 41); }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 107)
                        kind = 107;
                     { jjCheckNAddStates(42, 46); }
                  }
                  break;
               case 153:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 106)
                        kind = 106;
                     { jjCheckNAdd(108); }
                  }
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(38, 41); }
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 107)
                        kind = 107;
                     { jjCheckNAdd(114); }
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 107)
                        kind = 107;
                     { jjCheckNAddStates(42, 46); }
                  }
                  break;
               case 151:
               case 53:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(50, 52); }
                  break;
               case 23:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 38:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(20, 23); }
                  break;
               case 59:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 6)
                     kind = 6;
                  { jjAddStates(47, 49); }
                  break;
               case 64:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 7)
                     kind = 7;
                  break;
               case 108:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 106)
                     kind = 106;
                  { jjCheckNAdd(108); }
                  break;
               case 110:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(38, 41); }
                  break;
               case 113:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 107)
                     kind = 107;
                  { jjCheckNAddStates(42, 46); }
                  break;
               case 114:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 107)
                     kind = 107;
                  { jjCheckNAdd(114); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 151 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_3(int pos, long active0, long active1, long active2){
   switch (pos)
   {
      case 0:
         if ((active1 & 0x8200000000000000L) != 0L || (active2 & 0x804000L) != 0L)
            return 0;
         if ((active1 & 0x40000000000000L) != 0L || (active2 & 0x4000000L) != 0L)
            return 11;
         if ((active1 & 0x6aa0000L) != 0L)
            return 151;
         if ((active0 & 0xfffffffffe000000L) != 0L || (active1 & 0x1bfffL) != 0L)
         {
            jjmatchedKind = 106;
            return 109;
         }
         if ((active0 & 0x100L) != 0L || (active2 & 0x40200L) != 0L)
            return 58;
         return -1;
      case 1:
         if ((active0 & 0x100L) != 0L)
            return 63;
         if ((active0 & 0x1006000000000L) != 0L)
            return 152;
         if ((active1 & 0x6aa0000L) != 0L)
            return 151;
         if ((active0 & 0xfffeff9ffe000000L) != 0L || (active1 & 0x3fffL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 106;
               jjmatchedPos = 1;
            }
            return 152;
         }
         return -1;
      case 2:
         if ((active0 & 0x130400000000000L) != 0L || (active1 & 0x400L) != 0L)
            return 153;
         if ((active0 & 0xfecebfdffe000000L) != 0L || (active1 & 0x3bffL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 106;
               jjmatchedPos = 2;
            }
            return 153;
         }
         if ((active1 & 0x2a0000L) != 0L)
            return 151;
         return -1;
      case 3:
         if ((active0 & 0xfcae3e5e9e000000L) != 0L || (active1 & 0x31dfL) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 3;
            return 153;
         }
         if ((active0 & 0x240818160000000L) != 0L || (active1 & 0xa20L) != 0L)
            return 153;
         if ((active1 & 0x2a0000L) != 0L)
            return 151;
         return -1;
      case 4:
         if ((active0 & 0x80003c0690000000L) != 0L || (active1 & 0x20c4L) != 0L)
            return 153;
         if ((active0 & 0x7cae02580e000000L) != 0L || (active1 & 0x111bL) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 106;
               jjmatchedPos = 4;
            }
            return 153;
         }
         if ((active1 & 0x2a0000L) != 0L)
            return 151;
         return -1;
      case 5:
         if ((active0 & 0x6084004004000000L) != 0L || (active1 & 0x89L) != 0L)
            return 153;
         if ((active1 & 0xa0000L) != 0L)
            return 151;
         if ((active0 & 0x1c2a12180a000000L) != 0L || (active1 & 0x1112L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 5;
            return 153;
         }
         return -1;
      case 6:
         if ((active0 & 0xc00121008000000L) != 0L)
            return 153;
         if ((active0 & 0x102a000802000000L) != 0L || (active1 & 0x1112L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 6;
            return 153;
         }
         return -1;
      case 7:
         if ((active0 & 0x102a000000000000L) != 0L || (active1 & 0x110L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 7;
            return 153;
         }
         if ((active0 & 0x802000000L) != 0L || (active1 & 0x1002L) != 0L)
            return 153;
         return -1;
      case 8:
         if ((active0 & 0x1020000000000000L) != 0L || (active1 & 0x100L) != 0L)
            return 153;
         if ((active0 & 0xa000000000000L) != 0L || (active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 8;
            return 153;
         }
         return -1;
      case 9:
         if ((active0 & 0xa000000000000L) != 0L)
            return 153;
         if ((active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 9;
            return 153;
         }
         return -1;
      case 10:
         if ((active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 10;
            return 153;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_3(int pos, long active0, long active1, long active2){
   return jjMoveNfa_3(jjStopStringLiteralDfa_3(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_3(){
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 122;
         return jjMoveStringLiteralDfa1_3(0x0L, 0x0L, 0x2L);
      case 36:
         return jjMoveStringLiteralDfa1_3(0x0L, 0x18000L, 0x0L);
      case 37:
         jjmatchedKind = 141;
         return jjMoveStringLiteralDfa1_3(0x0L, 0x0L, 0x400000L);
      case 38:
         jjmatchedKind = 138;
         return jjMoveStringLiteralDfa1_3(0x0L, 0x0L, 0x80008L);
      case 40:
         return jjStopAtPos(0, 110);
      case 41:
         return jjStopAtPos(0, 111);
      case 42:
         jjmatchedKind = 136;
         return jjMoveStringLiteralDfa1_3(0x0L, 0x0L, 0x20000L);
      case 43:
         jjmatchedKind = 134;
         return jjMoveStringLiteralDfa1_3(0x0L, 0x0L, 0x8010L);
      case 44:
         return jjStopAtPos(0, 117);
      case 45:
         jjmatchedKind = 135;
         return jjMoveStringLiteralDfa1_3(0x0L, 0x0L, 0x8010020L);
      case 46:
         jjmatchedKind = 118;
         return jjMoveStringLiteralDfa1_3(0x0L, 0x0L, 0x4000000L);
      case 47:
         jjmatchedKind = 137;
         return jjMoveStringLiteralDfa1_3(0x100L, 0x0L, 0x40000L);
      case 58:
         jjmatchedKind = 125;
         return jjMoveStringLiteralDfa1_3(0x0L, 0x540000L, 0x10000000L);
      case 59:
         return jjStopAtPos(0, 116);
      case 60:
         jjmatchedKind = 121;
         return jjMoveStringLiteralDfa1_3(0x0L, 0x8000000000000000L, 0x804000L);
      case 61:
         jjmatchedKind = 120;
         return jjMoveStringLiteralDfa1_3(0x0L, 0x4000000000000000L, 0x0L);
      case 62:
         jjmatchedKind = 159;
         return jjMoveStringLiteralDfa1_3(0x0L, 0x0L, 0x63000001L);
      case 63:
         return jjStopAtPos(0, 124);
      case 64:
         jjmatchedKind = 119;
         return jjMoveStringLiteralDfa1_3(0x0L, 0x1000000L, 0x0L);
      case 91:
         return jjStopAtPos(0, 114);
      case 93:
         return jjStopAtPos(0, 115);
      case 94:
         jjmatchedKind = 140;
         return jjMoveStringLiteralDfa1_3(0x0L, 0x0L, 0x200000L);
      case 96:
         return jjMoveStringLiteralDfa1_3(0x0L, 0x6aa0000L, 0x0L);
      case 97:
         return jjMoveStringLiteralDfa1_3(0x6000000L, 0x0L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_3(0x38000000L, 0x0L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_3(0xfc0000000L, 0x0L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_3(0x7000000000L, 0x0L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_3(0x38000000000L, 0x0L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_3(0x7c0000000000L, 0x0L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_3(0x800000000000L, 0x0L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_3(0x3f000000000000L, 0x0L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_3(0x40000000000000L, 0x0L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_3(0x380000000000000L, 0x0L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_3(0x3c00000000000000L, 0x0L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_3(0x4000000000000000L, 0x0L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_3(0x8000000000000000L, 0x1fL, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_3(0x0L, 0x7e0L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_3(0x0L, 0x1800L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_3(0x0L, 0x2000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 112);
      case 124:
         jjmatchedKind = 139;
         return jjMoveStringLiteralDfa1_3(0x0L, 0x0L, 0x100004L);
      case 125:
         jjmatchedKind = 113;
         return jjMoveStringLiteralDfa1_3(0x0L, 0x8000000L, 0x0L);
      case 126:
         return jjStopAtPos(0, 123);
      default :
         return jjMoveNfa_3(9, 0);
   }
}
private int jjMoveStringLiteralDfa1_3(long active0, long active1, long active2){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active2 & 0x8L) != 0L)
            return jjStopAtPos(1, 131);
         break;
      case 42:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_3(1, 8, 63);
         break;
      case 43:
         if ((active2 & 0x10L) != 0L)
            return jjStopAtPos(1, 132);
         break;
      case 45:
         if ((active2 & 0x20L) != 0L)
            return jjStopAtPos(1, 133);
         break;
      case 46:
         if ((active1 & 0x8000L) != 0L)
            return jjStopAtPos(1, 79);
         return jjMoveStringLiteralDfa2_3(active0, 0L, active1, 0L, active2, 0x4000000L);
      case 58:
         if ((active1 & 0x10000L) != 0L)
            return jjStopAtPos(1, 80);
         else if ((active2 & 0x10000000L) != 0L)
            return jjStopAtPos(1, 156);
         break;
      case 60:
         if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_3(1, 89, 151);
         else if ((active2 & 0x4000L) != 0L)
         {
            jjmatchedKind = 142;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_3(active0, 0L, active1, 0L, active2, 0x800000L);
      case 61:
         if ((active1 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(1, 126);
         else if ((active1 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(1, 127);
         else if ((active2 & 0x1L) != 0L)
            return jjStopAtPos(1, 128);
         else if ((active2 & 0x2L) != 0L)
            return jjStopAtPos(1, 129);
         else if ((active2 & 0x8000L) != 0L)
            return jjStopAtPos(1, 143);
         else if ((active2 & 0x10000L) != 0L)
            return jjStopAtPos(1, 144);
         else if ((active2 & 0x20000L) != 0L)
            return jjStopAtPos(1, 145);
         else if ((active2 & 0x40000L) != 0L)
            return jjStopAtPos(1, 146);
         else if ((active2 & 0x80000L) != 0L)
            return jjStopAtPos(1, 147);
         else if ((active2 & 0x100000L) != 0L)
            return jjStopAtPos(1, 148);
         else if ((active2 & 0x200000L) != 0L)
            return jjStopAtPos(1, 149);
         else if ((active2 & 0x400000L) != 0L)
            return jjStopAtPos(1, 150);
         break;
      case 62:
         if ((active2 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 155);
         else if ((active2 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 158;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_3(active0, 0L, active1, 0L, active2, 0x23000000L);
      case 64:
         if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_3(1, 87, 151);
         break;
      case 96:
         if ((active1 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 88);
         else if ((active1 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 91);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_3(active0, 0x4800400c0000000L, active1, 0L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa2_3(active0, 0x2000000L, active1, 0L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa2_3(active0, 0L, active1, 0x600000L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_3(active0, 0x4100001000000000L, active1, 0L, active2, 0L);
      case 102:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_3(1, 48, 152);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_3(active0, 0x8000000100000000L, active1, 0x1820e0L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_3(active0, 0x180000000000L, active1, 0L, active2, 0L);
      case 106:
         return jjMoveStringLiteralDfa2_3(active0, 0L, active1, 0x60000L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_3(active0, 0x208200000000L, active1, 0L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_3(active0, 0x6000000000000L, active1, 0L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_3(active0, 0x38010000000000L, active1, 0L, active2, 0L);
      case 111:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_3(active0, 0x40c04c08000000L, active1, 0x1800L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_3(active0, 0x1800000010000000L, active1, 0x700L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa2_3(active0, 0x4000000L, active1, 0L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_3(active0, 0L, active1, 0x3L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_3(active0, 0x2200000000000000L, active1, 0x4L, active2, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_3(active0, 0L, active1, 0x8L, active2, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_3(active0, 0x20000000000L, active1, 0L, active2, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_3(active0, 0x20000000L, active1, 0x10L, active2, 0L);
      case 123:
         if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_3(1, 90, 151);
         break;
      case 124:
         if ((active2 & 0x4L) != 0L)
            return jjStopAtPos(1, 130);
         break;
      default :
         break;
   }
   return jjStartNfa_3(0, active0, active1, active2);
}
private int jjMoveStringLiteralDfa2_3(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_3(0, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(1, active0, active1, active2);
      return 2;
   }
   switch(curChar)
   {
      case 46:
         if ((active2 & 0x4000000L) != 0L)
            return jjStopAtPos(2, 154);
         break;
      case 61:
         if ((active2 & 0x800000L) != 0L)
            return jjStopAtPos(2, 151);
         else if ((active2 & 0x1000000L) != 0L)
            return jjStopAtPos(2, 152);
         break;
      case 62:
         if ((active2 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 157;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_3(active0, 0L, active1, 0L, active2, 0x2000000L);
      case 97:
         return jjMoveStringLiteralDfa3_3(active0, 0x300000000L, active1, 0x60101L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_3(active0, 0x2000000000000000L, active1, 0L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_3(active0, 0x400000000000000L, active1, 0L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_3(active0, 0x10000000L, active1, 0L, active2, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_3(active0, 0x1000000000L, active1, 0L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_3(active0, 0x800000000000000L, active1, 0x2828L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_3(active0, 0x200040000000000L, active1, 0x1000L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_3(active0, 0x40180c00000000L, active1, 0x10L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_3(active0, 0x9000200008000000L, active1, 0L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_3(active0, 0x6000000000000L, active1, 0x4L, active2, 0L);
      case 114:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_3(2, 46, 153);
         return jjMoveStringLiteralDfa3_3(active0, 0L, active1, 0xc2L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_3(active0, 0x8008046000000L, active1, 0x600000L, active2, 0L);
      case 116:
         if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_3(active0, 0x40a08200a0000000L, active1, 0x180000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_3(active0, 0x14000000000L, active1, 0x200L, active2, 0L);
      case 119:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_3(2, 56, 153);
         break;
      case 121:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_3(2, 74, 153);
         break;
      default :
         break;
   }
   return jjStartNfa_3(1, active0, active1, active2);
}
private int jjMoveStringLiteralDfa3_3(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_3(1, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(2, active0, active1, active2);
      return 3;
   }
   switch(curChar)
   {
      case 61:
         if ((active2 & 0x2000000L) != 0L)
            return jjStopAtPos(3, 153);
         break;
      case 97:
         return jjMoveStringLiteralDfa4_3(active0, 0x381010000000L, active1, 0x1000L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa4_3(active0, 0x4000000000L, active1, 0L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_3(active0, 0x80000000L, active1, 0x10L, active2, 0L);
      case 100:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_3(3, 75, 153);
         break;
      case 101:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_3(3, 29, 153);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_3(3, 30, 153);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_3(3, 39, 153);
         else if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_3(3, 73, 153);
         return jjMoveStringLiteralDfa4_3(active0, 0x20020004000000L, active1, 0x4L, active2, 0L);
      case 103:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_3(3, 54, 153);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_3(active0, 0x80000000000000L, active1, 0x2L, active2, 0L);
      case 107:
         return jjMoveStringLiteralDfa4_3(active0, 0x400000000000000L, active1, 0L, active2, 0L);
      case 108:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_3(3, 57, 153);
         return jjMoveStringLiteralDfa4_3(active0, 0x2002000008000000L, active1, 0x2000L, active2, 0L);
      case 109:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_3(3, 40, 153);
         return jjMoveStringLiteralDfa4_3(active0, 0L, active1, 0x180000L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa4_3(active0, 0L, active1, 0x100L, active2, 0L);
      case 111:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_3(3, 47, 153);
         return jjMoveStringLiteralDfa4_3(active0, 0x4000000000000L, active1, 0xc0L, active2, 0L);
      case 114:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_3(3, 32, 153);
         return jjMoveStringLiteralDfa4_3(active0, 0x8000000000000000L, active1, 0L, active2, 0L);
      case 115:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_3(3, 69, 153);
         return jjMoveStringLiteralDfa4_3(active0, 0x40600000000L, active1, 0x600000L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa4_3(active0, 0x1008000802000000L, active1, 0x9L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_3(active0, 0x4000000000000000L, active1, 0L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa4_3(active0, 0x800000000000000L, active1, 0x60000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_3(2, active0, active1, active2);
}
private int jjMoveStringLiteralDfa4_3(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_3(2, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(3, active0, active1, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 58:
         if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_3(4, 85, 151);
         break;
      case 96:
         if ((active1 & 0x400000L) != 0L)
            return jjStopAtPos(4, 86);
         break;
      case 97:
         return jjMoveStringLiteralDfa5_3(active0, 0xc08000000000000L, active1, 0x60000L);
      case 99:
         return jjMoveStringLiteralDfa5_3(active0, 0L, active1, 0xaL);
      case 101:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_3(4, 42, 153);
         else if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_3(4, 77, 153);
         return jjMoveStringLiteralDfa5_3(active0, 0x1002000008000000L, active1, 0L);
      case 104:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_3(4, 31, 153);
         return jjMoveStringLiteralDfa5_3(active0, 0L, active1, 0x10L);
      case 105:
         return jjMoveStringLiteralDfa5_3(active0, 0x2000000800000000L, active1, 0x1L);
      case 107:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_3(4, 28, 153);
         break;
      case 108:
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_3(active0, 0x104000000000L, active1, 0x180000L);
      case 110:
         return jjMoveStringLiteralDfa5_3(active0, 0x20000000000L, active1, 0L);
      case 114:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_3(4, 66, 153);
         return jjMoveStringLiteralDfa5_3(active0, 0x4024000006000000L, active1, 0L);
      case 115:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_3(4, 33, 153);
         return jjMoveStringLiteralDfa5_3(active0, 0L, active1, 0x100L);
      case 116:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_3(4, 34, 153);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_3(4, 45, 153);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_3(4, 63, 153);
         return jjMoveStringLiteralDfa5_3(active0, 0L, active1, 0x1000L);
      case 117:
         return jjMoveStringLiteralDfa5_3(active0, 0x1000000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa5_3(active0, 0x80000000000000L, active1, 0L);
      case 119:
         if ((active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_3(active0, 0L, active1, 0x80L);
      default :
         break;
   }
   return jjStartNfa_3(3, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa5_3(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_3(3, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(4, active0, active1, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 58:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_3(5, 81, 151);
         else if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_3(5, 83, 151);
         break;
      case 96:
         if ((active1 & 0x40000L) != 0L)
            return jjStopAtPos(5, 82);
         else if ((active1 & 0x100000L) != 0L)
            return jjStopAtPos(5, 84);
         break;
      case 97:
         return jjMoveStringLiteralDfa6_3(active0, 0xa000000L, active1, 0L);
      case 99:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_3(5, 61, 153);
         else if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_3(5, 64, 153);
         return jjMoveStringLiteralDfa6_3(active0, 0x1000000000000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa6_3(active0, 0x20000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_3(5, 38, 153);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_3(5, 55, 153);
         break;
      case 102:
         return jjMoveStringLiteralDfa6_3(active0, 0x20000000000000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa6_3(active0, 0x400000000000000L, active1, 0L);
      case 104:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_3(5, 67, 153);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_3(active0, 0L, active1, 0x1100L);
      case 108:
         return jjMoveStringLiteralDfa6_3(active0, 0x101000000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa6_3(active0, 0x2000000000000L, active1, 0L);
      case 110:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_3(5, 62, 153);
         return jjMoveStringLiteralDfa6_3(active0, 0x8000800000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa6_3(active0, 0L, active1, 0x10L);
      case 115:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_3(5, 71, 153);
         break;
      case 116:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_3(5, 26, 153);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_3(5, 50, 153);
         return jjMoveStringLiteralDfa6_3(active0, 0x800000000000000L, active1, 0x2L);
      default :
         break;
   }
   return jjStartNfa_3(4, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa6_3(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_3(4, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(5, active0, active1, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_3(active0, 0x20000000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa7_3(active0, 0x8000002000000L, active1, 0L);
      case 101:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_3(6, 58, 153);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_3(6, 59, 153);
         return jjMoveStringLiteralDfa7_3(active0, 0x2000000000000L, active1, 0x100L);
      case 102:
         return jjMoveStringLiteralDfa7_3(active0, 0L, active1, 0x2L);
      case 108:
         return jjMoveStringLiteralDfa7_3(active0, 0L, active1, 0x1000L);
      case 110:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_3(6, 27, 153);
         break;
      case 111:
         return jjMoveStringLiteralDfa7_3(active0, 0L, active1, 0x10L);
      case 115:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_3(6, 41, 153);
         break;
      case 116:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_3(6, 36, 153);
         return jjMoveStringLiteralDfa7_3(active0, 0x1000000000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa7_3(active0, 0x800000000L, active1, 0L);
      case 121:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_3(6, 44, 153);
         break;
      default :
         break;
   }
   return jjStartNfa_3(5, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa7_3(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_3(5, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(6, active0, active1, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa8_3(active0, 0x20000000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_3(7, 35, 153);
         else if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_3(7, 76, 153);
         return jjMoveStringLiteralDfa8_3(active0, 0x1008000000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa8_3(active0, 0x2000000000000L, active1, 0x110L);
      case 112:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_3(7, 65, 153);
         break;
      case 116:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_3(7, 25, 153);
         break;
      default :
         break;
   }
   return jjStartNfa_3(6, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa8_3(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_3(6, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(7, active0, active1, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_3(8, 60, 153);
         break;
      case 101:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_3(8, 53, 153);
         break;
      case 105:
         return jjMoveStringLiteralDfa9_3(active0, 0L, active1, 0x10L);
      case 111:
         return jjMoveStringLiteralDfa9_3(active0, 0x8000000000000L, active1, 0L);
      case 116:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_3(8, 72, 153);
         return jjMoveStringLiteralDfa9_3(active0, 0x2000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_3(7, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa9_3(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_3(7, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(8, active0, active1, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 102:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_3(9, 51, 153);
         break;
      case 115:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_3(9, 49, 153);
         break;
      case 122:
         return jjMoveStringLiteralDfa10_3(active0, 0L, active1, 0x10L);
      default :
         break;
   }
   return jjStartNfa_3(8, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa10_3(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_3(8, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(9, 0L, active1, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa11_3(active1, 0x10L);
      default :
         break;
   }
   return jjStartNfa_3(9, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa11_3(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_3(9, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(10, 0L, active1, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 100:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_3(11, 68, 153);
         break;
      default :
         break;
   }
   return jjStartNfa_3(10, 0L, active1, 0L);
}
private int jjStartNfaWithStates_3(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_3(state, pos + 1);
}
private int jjMoveNfa_3(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 151;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 9:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 93)
                        kind = 93;
                     { jjCheckNAddStates(0, 14); }
                  }
                  else if (curChar == 36)
                  {
                     if (kind > 106)
                        kind = 106;
                     { jjCheckNAddStates(15, 17); }
                  }
                  else if (curChar == 47)
                     { jjAddStates(18, 19); }
                  else if (curChar == 34)
                     { jjCheckNAddStates(20, 23); }
                  else if (curChar == 39)
                     { jjAddStates(24, 26); }
                  else if (curChar == 46)
                     { jjCheckNAdd(11); }
                  else if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 0;
                  if (curChar == 48)
                     { jjAddStates(27, 34); }
                  break;
               case 109:
                  if ((0x3ff00100fffc1ffL & l) != 0L)
                  {
                     if (kind > 106)
                        kind = 106;
                     { jjCheckNAdd(108); }
                  }
                  else if ((0x240000000000L & l) != 0L)
                     { jjCheckNAddStates(35, 37); }
                  if (curChar == 36)
                     { jjCheckNAddStates(38, 41); }
                  break;
               case 152:
                  if ((0x3ff00100fffc1ffL & l) != 0L)
                     { jjCheckNAddStates(38, 41); }
                  else if ((0x240000000000L & l) != 0L)
                     { jjCheckNAddStates(35, 37); }
                  if ((0x3ff00100fffc1ffL & l) != 0L)
                  {
                     if (kind > 106)
                        kind = 106;
                     { jjCheckNAdd(108); }
                  }
                  else if (curChar == 42)
                  {
                     if (kind > 107)
                        kind = 107;
                  }
                  if (curChar == 36)
                  {
                     if (kind > 107)
                        kind = 107;
                     { jjCheckNAddStates(42, 46); }
                  }
                  break;
               case 58:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 63;
                  else if (curChar == 47)
                  {
                     if (kind > 6)
                        kind = 6;
                     { jjCheckNAddStates(47, 49); }
                  }
                  break;
               case 153:
                  if ((0x3ff00100fffc1ffL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     { jjCheckNAdd(114); }
                  }
                  else if ((0x240000000000L & l) != 0L)
                     { jjCheckNAddStates(35, 37); }
                  if ((0x3ff00100fffc1ffL & l) != 0L)
                     { jjCheckNAddStates(38, 41); }
                  else if (curChar == 42)
                  {
                     if (kind > 107)
                        kind = 107;
                  }
                  if ((0x3ff00100fffc1ffL & l) != 0L)
                  {
                     if (kind > 106)
                        kind = 106;
                     { jjCheckNAdd(108); }
                  }
                  if (curChar == 36)
                  {
                     if (kind > 107)
                        kind = 107;
                     { jjCheckNAddStates(42, 46); }
                  }
                  break;
               case 151:
               case 53:
                  { jjCheckNAddStates(50, 52); }
                  break;
               case 0:
                  if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 8:
                  if (curChar == 32 && kind > 78)
                     kind = 78;
                  break;
               case 10:
                  if (curChar == 46)
                     { jjCheckNAdd(11); }
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  { jjCheckNAddStates(53, 56); }
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(12, 13); }
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  { jjCheckNAddStates(57, 59); }
                  break;
               case 15:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(16); }
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  { jjCheckNAddStates(60, 62); }
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(17, 18); }
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  { jjCheckNAddTwoStates(16, 19); }
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  { jjCheckNAddStates(63, 66); }
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  { jjCheckNAddStates(67, 71); }
                  break;
               case 22:
                  if (curChar == 39)
                     { jjAddStates(24, 26); }
                  break;
               case 23:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     { jjCheckNAdd(24); }
                  break;
               case 24:
                  if (curChar == 39 && kind > 103)
                     kind = 103;
                  break;
               case 26:
                  if ((0x8400000000L & l) != 0L)
                     { jjCheckNAdd(24); }
                  break;
               case 27:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(28, 24); }
                  break;
               case 28:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAdd(24); }
                  break;
               case 29:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 30:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAdd(28); }
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(24); }
                  break;
               case 37:
                  if (curChar == 34)
                     { jjCheckNAddStates(20, 23); }
                  break;
               case 38:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     { jjCheckNAddStates(20, 23); }
                  break;
               case 40:
                  if ((0x8400000000L & l) != 0L)
                     { jjCheckNAddStates(20, 23); }
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 44:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(20, 23); }
                  break;
               case 47:
                  if (curChar == 34 && kind > 104)
                     kind = 104;
                  break;
               case 48:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(72, 76); }
                  break;
               case 49:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(20, 23); }
                  break;
               case 50:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 51:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAdd(49); }
                  break;
               case 57:
                  if (curChar == 47)
                     { jjAddStates(18, 19); }
                  break;
               case 59:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  { jjCheckNAddStates(47, 49); }
                  break;
               case 60:
                  if ((0x2400L & l) != 0L && kind > 6)
                     kind = 6;
                  break;
               case 61:
                  if (curChar == 10 && kind > 6)
                     kind = 6;
                  break;
               case 62:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 63:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 64:
                  if ((0xffff7fffffffffffL & l) != 0L && kind > 7)
                     kind = 7;
                  break;
               case 65:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 66:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 93)
                     kind = 93;
                  { jjCheckNAddStates(0, 14); }
                  break;
               case 67:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(67, 68); }
                  break;
               case 68:
               case 119:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(69); }
                  break;
               case 70:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(70, 71); }
                  break;
               case 71:
               case 130:
                  if ((0x3ff000000000000L & l) != 0L && kind > 93)
                     kind = 93;
                  break;
               case 72:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(72, 73); }
                  break;
               case 73:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(77, 79); }
                  break;
               case 74:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(80, 83); }
                  break;
               case 76:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(77); }
                  break;
               case 77:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(84, 86); }
                  break;
               case 78:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(78, 79); }
                  break;
               case 79:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(77, 19); }
                  break;
               case 80:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(87, 90); }
                  break;
               case 81:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(91, 95); }
                  break;
               case 82:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(82, 83); }
                  break;
               case 83:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(84, 85); }
                  break;
               case 84:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(96, 98); }
                  break;
               case 86:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(87); }
                  break;
               case 87:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  { jjCheckNAddStates(99, 101); }
                  break;
               case 88:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(88, 89); }
                  break;
               case 89:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  { jjCheckNAddTwoStates(87, 19); }
                  break;
               case 90:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  { jjCheckNAddStates(102, 105); }
                  break;
               case 91:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(106, 109); }
                  break;
               case 92:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(92, 93); }
                  break;
               case 93:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(94, 95); }
                  break;
               case 94:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(110, 112); }
                  break;
               case 95:
                  if (curChar != 46)
                     break;
                  if (kind > 98)
                     kind = 98;
                  { jjCheckNAddStates(113, 115); }
                  break;
               case 96:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  { jjCheckNAddStates(116, 119); }
                  break;
               case 97:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(97, 98); }
                  break;
               case 98:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  { jjCheckNAddStates(113, 115); }
                  break;
               case 100:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(101); }
                  break;
               case 101:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  { jjCheckNAddStates(120, 122); }
                  break;
               case 102:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(102, 103); }
                  break;
               case 103:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  { jjCheckNAddTwoStates(101, 19); }
                  break;
               case 104:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  { jjCheckNAddStates(123, 126); }
                  break;
               case 105:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  { jjCheckNAddStates(127, 131); }
                  break;
               case 106:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(132, 135); }
                  break;
               case 107:
                  if (curChar != 36)
                     break;
                  if (kind > 106)
                     kind = 106;
                  { jjCheckNAddStates(15, 17); }
                  break;
               case 108:
                  if ((0x3ff00100fffc1ffL & l) == 0L)
                     break;
                  if (kind > 106)
                     kind = 106;
                  { jjCheckNAdd(108); }
                  break;
               case 110:
                  if ((0x3ff00100fffc1ffL & l) != 0L)
                     { jjCheckNAddStates(38, 41); }
                  break;
               case 111:
                  if ((0x240000000000L & l) != 0L)
                     { jjCheckNAddStates(35, 37); }
                  break;
               case 112:
                  if (curChar == 42 && kind > 107)
                     kind = 107;
                  break;
               case 113:
                  if (curChar != 36)
                     break;
                  if (kind > 107)
                     kind = 107;
                  { jjCheckNAddStates(42, 46); }
                  break;
               case 114:
                  if ((0x3ff00100fffc1ffL & l) == 0L)
                     break;
                  if (kind > 107)
                     kind = 107;
                  { jjCheckNAdd(114); }
                  break;
               case 115:
                  if (curChar == 48)
                     { jjAddStates(27, 34); }
                  break;
               case 117:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(136, 138); }
                  break;
               case 118:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(118, 119); }
                  break;
               case 120:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(139, 141); }
                  break;
               case 121:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(121, 122); }
                  break;
               case 122:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAdd(69); }
                  break;
               case 124:
                  if ((0x3000000000000L & l) != 0L)
                     { jjCheckNAddStates(142, 144); }
                  break;
               case 125:
                  if ((0x3000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(125, 126); }
                  break;
               case 126:
                  if ((0x3000000000000L & l) != 0L)
                     { jjCheckNAdd(69); }
                  break;
               case 128:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 93)
                     kind = 93;
                  { jjCheckNAddTwoStates(129, 130); }
                  break;
               case 129:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(129, 130); }
                  break;
               case 131:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 93)
                     kind = 93;
                  { jjCheckNAddTwoStates(132, 133); }
                  break;
               case 132:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(132, 133); }
                  break;
               case 133:
                  if ((0xff000000000000L & l) != 0L && kind > 93)
                     kind = 93;
                  break;
               case 135:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 93)
                     kind = 93;
                  { jjCheckNAddTwoStates(136, 137); }
                  break;
               case 136:
                  if ((0x3000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(136, 137); }
                  break;
               case 137:
                  if ((0x3000000000000L & l) != 0L && kind > 93)
                     kind = 93;
                  break;
               case 139:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjAddStates(145, 146); }
                  break;
               case 140:
                  if (curChar == 46)
                     { jjCheckNAdd(141); }
                  break;
               case 141:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(141, 142); }
                  break;
               case 143:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(144); }
                  break;
               case 144:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  { jjCheckNAddTwoStates(144, 19); }
                  break;
               case 146:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(147, 149); }
                  break;
               case 147:
                  if (curChar == 46)
                     { jjCheckNAdd(148); }
                  break;
               case 149:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(150); }
                  break;
               case 150:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  { jjCheckNAddTwoStates(150, 19); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 9:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 106)
                        kind = 106;
                     { jjCheckNAddStates(15, 17); }
                  }
                  else if (curChar == 96)
                     { jjCheckNAddStates(50, 52); }
                  break;
               case 109:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(38, 41); }
                  if ((0x87fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 106)
                        kind = 106;
                     { jjCheckNAdd(108); }
                  }
                  break;
               case 152:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     { jjCheckNAddStates(42, 46); }
                  }
                  if ((0x87fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(38, 41); }
                  if ((0x87fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 106)
                        kind = 106;
                     { jjCheckNAdd(108); }
                  }
                  break;
               case 153:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     { jjCheckNAddStates(42, 46); }
                  }
                  if ((0x87fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     { jjCheckNAdd(114); }
                  }
                  if ((0x87fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(38, 41); }
                  if ((0x87fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 106)
                        kind = 106;
                     { jjCheckNAdd(108); }
                  }
                  break;
               case 151:
                  if ((0xfffffffeffffffffL & l) != 0L)
                     { jjCheckNAddStates(50, 52); }
                  else if (curChar == 96)
                  {
                     if (kind > 105)
                        kind = 105;
                  }
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 1:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 2:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 3:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 4:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 5:
                  if ((0x200000002000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 6:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 7:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 12:
                  if (curChar == 95)
                     { jjAddStates(150, 151); }
                  break;
               case 14:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(152, 153); }
                  break;
               case 17:
                  if (curChar == 95)
                     { jjAddStates(154, 155); }
                  break;
               case 19:
                  if ((0x5000000050L & l) != 0L && kind > 98)
                     kind = 98;
                  break;
               case 23:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAdd(24); }
                  break;
               case 25:
                  if (curChar == 92)
                     { jjAddStates(156, 158); }
                  break;
               case 26:
                  if ((0x14404410000000L & l) != 0L)
                     { jjCheckNAdd(24); }
                  break;
               case 31:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 32:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 33:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 34:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 35:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAdd(24); }
                  break;
               case 36:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 38:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(20, 23); }
                  break;
               case 39:
                  if (curChar == 92)
                     { jjAddStates(159, 161); }
                  break;
               case 40:
                  if ((0x14404410000000L & l) != 0L)
                     { jjCheckNAddStates(20, 23); }
                  break;
               case 41:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 42:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 43:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 44:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 45:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(20, 23); }
                  break;
               case 46:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 52:
               case 54:
                  if (curChar == 96)
                     { jjCheckNAddStates(50, 52); }
                  break;
               case 53:
                  if ((0xfffffffeffffffffL & l) != 0L)
                     { jjCheckNAddStates(50, 52); }
                  break;
               case 55:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 56:
                  if (curChar == 96 && kind > 105)
                     kind = 105;
                  break;
               case 59:
                  if (kind > 6)
                     kind = 6;
                  { jjAddStates(47, 49); }
                  break;
               case 64:
                  if (kind > 7)
                     kind = 7;
                  break;
               case 67:
                  if (curChar == 95)
                     { jjAddStates(162, 163); }
                  break;
               case 69:
                  if ((0x100000001000L & l) != 0L && kind > 92)
                     kind = 92;
                  break;
               case 70:
                  if (curChar == 95)
                     { jjAddStates(164, 165); }
                  break;
               case 72:
                  if (curChar == 95)
                     { jjAddStates(166, 167); }
                  break;
               case 75:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(168, 169); }
                  break;
               case 78:
                  if (curChar == 95)
                     { jjAddStates(170, 171); }
                  break;
               case 82:
                  if (curChar == 95)
                     { jjAddStates(172, 173); }
                  break;
               case 85:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(174, 175); }
                  break;
               case 88:
                  if (curChar == 95)
                     { jjAddStates(176, 177); }
                  break;
               case 92:
                  if (curChar == 95)
                     { jjAddStates(178, 179); }
                  break;
               case 97:
                  if (curChar == 95)
                     { jjAddStates(180, 181); }
                  break;
               case 99:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(182, 183); }
                  break;
               case 102:
                  if (curChar == 95)
                     { jjAddStates(184, 185); }
                  break;
               case 107:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 106)
                     kind = 106;
                  { jjCheckNAddStates(15, 17); }
                  break;
               case 108:
                  if ((0x87fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 106)
                     kind = 106;
                  { jjCheckNAdd(108); }
                  break;
               case 110:
                  if ((0x87fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(38, 41); }
                  break;
               case 113:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 107)
                     kind = 107;
                  { jjCheckNAddStates(42, 46); }
                  break;
               case 114:
                  if ((0x87fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 107)
                     kind = 107;
                  { jjCheckNAdd(114); }
                  break;
               case 116:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 117;
                  break;
               case 117:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(136, 138); }
                  break;
               case 118:
                  if ((0x7e8000007eL & l) != 0L)
                     { jjCheckNAddTwoStates(118, 119); }
                  break;
               case 119:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAdd(69); }
                  break;
               case 121:
                  if (curChar == 95)
                     { jjAddStates(186, 187); }
                  break;
               case 123:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 124;
                  break;
               case 125:
                  if (curChar == 95)
                     { jjAddStates(188, 189); }
                  break;
               case 127:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 128;
                  break;
               case 128:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 93)
                     kind = 93;
                  { jjCheckNAddTwoStates(129, 130); }
                  break;
               case 129:
                  if ((0x7e8000007eL & l) != 0L)
                     { jjCheckNAddTwoStates(129, 130); }
                  break;
               case 130:
                  if ((0x7e0000007eL & l) != 0L && kind > 93)
                     kind = 93;
                  break;
               case 132:
                  if (curChar == 95)
                     { jjAddStates(190, 191); }
                  break;
               case 134:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 135;
                  break;
               case 136:
                  if (curChar == 95)
                     { jjAddStates(192, 193); }
                  break;
               case 138:
                  if ((0x100000001000000L & l) != 0L)
                     { jjCheckNAddTwoStates(139, 140); }
                  break;
               case 139:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddTwoStates(139, 140); }
                  break;
               case 141:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjAddStates(194, 195); }
                  break;
               case 142:
                  if ((0x1000000010000L & l) != 0L)
                     { jjAddStates(196, 197); }
                  break;
               case 145:
                  if ((0x100000001000000L & l) != 0L)
                     { jjCheckNAdd(146); }
                  break;
               case 146:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(147, 149); }
                  break;
               case 148:
                  if ((0x1000000010000L & l) != 0L)
                     { jjAddStates(198, 199); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 9:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 106)
                     kind = 106;
                  { jjCheckNAddStates(15, 17); }
                  break;
               case 109:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 106)
                        kind = 106;
                     { jjCheckNAdd(108); }
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(38, 41); }
                  break;
               case 152:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 106)
                        kind = 106;
                     { jjCheckNAdd(108); }
                  }
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(38, 41); }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 107)
                        kind = 107;
                     { jjCheckNAddStates(42, 46); }
                  }
                  break;
               case 153:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 106)
                        kind = 106;
                     { jjCheckNAdd(108); }
                  }
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(38, 41); }
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 107)
                        kind = 107;
                     { jjCheckNAdd(114); }
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 107)
                        kind = 107;
                     { jjCheckNAddStates(42, 46); }
                  }
                  break;
               case 151:
               case 53:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(50, 52); }
                  break;
               case 23:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 38:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(20, 23); }
                  break;
               case 59:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 6)
                     kind = 6;
                  { jjAddStates(47, 49); }
                  break;
               case 64:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 7)
                     kind = 7;
                  break;
               case 108:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 106)
                     kind = 106;
                  { jjCheckNAdd(108); }
                  break;
               case 110:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(38, 41); }
                  break;
               case 113:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 107)
                     kind = 107;
                  { jjCheckNAddStates(42, 46); }
                  break;
               case 114:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 107)
                     kind = 107;
                  { jjCheckNAdd(114); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 151 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_5(){
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_5(0x400L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_5(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(1, 10);
         break;
      default :
         return 2;
   }
   return 2;
}
private final int jjStopStringLiteralDfa_6(int pos, long active0){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x1000L) != 0L)
            return 2;
         return -1;
      case 1:
         if ((active0 & 0x1000L) != 0L)
            return 3;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_6(int pos, long active0){
   return jjMoveNfa_6(jjStopStringLiteralDfa_6(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_6(){
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa1_6(0x1000L);
      default :
         return jjMoveNfa_6(5, 0);
   }
}
private int jjMoveStringLiteralDfa1_6(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_6(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa2_6(active0, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_6(0, active0);
}
private int jjMoveStringLiteralDfa2_6(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_6(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_6(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(2, 12);
         break;
      default :
         break;
   }
   return jjStartNfa_6(1, active0);
}
private int jjMoveNfa_6(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 5;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 5:
                  if ((0xffffdfffffffffffL & l) != 0L)
                  {
                     if (kind > 11)
                        kind = 11;
                     { jjCheckNAddStates(200, 202); }
                  }
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 2;
                  if (curChar == 45)
                     { jjCheckNAdd(0); }
                  break;
               case 2:
                  if ((0xffffdfffffffffffL & l) != 0L)
                  {
                     if (kind > 11)
                        kind = 11;
                     { jjCheckNAddStates(200, 202); }
                  }
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 0:
                  if ((0xffffdfffffffffffL & l) == 0L)
                     break;
                  if (kind > 11)
                     kind = 11;
                  { jjCheckNAddStates(200, 202); }
                  break;
               case 1:
                  if (curChar == 45)
                     { jjCheckNAdd(0); }
                  break;
               case 3:
                  if ((0xbfffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 11)
                     kind = 11;
                  { jjCheckNAddStates(200, 202); }
                  break;
               case 4:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 5:
               case 0:
               case 3:
                  if (kind > 11)
                     kind = 11;
                  { jjCheckNAddStates(200, 202); }
                  break;
               case 2:
                  if (kind > 11)
                     kind = 11;
                  { jjCheckNAddStates(200, 202); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 5:
               case 0:
               case 3:
                  if (!jjCanMove_3(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 11)
                     kind = 11;
                  { jjCheckNAddStates(200, 202); }
                  break;
               case 2:
                  if (!jjCanMove_3(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 11)
                     kind = 11;
                  { jjCheckNAddStates(200, 202); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 5 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_2(int pos, long active0, long active1, long active2){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x3eL) != 0L)
            return 0;
         if ((active1 & 0x7dbfc00009540000L) != 0L || (active2 & 0xfb7bbdffL) != 0L)
         {
            jjmatchedKind = 16;
            return 0;
         }
         if ((active0 & 0x100L) != 0L || (active2 & 0x40200L) != 0L)
         {
            jjmatchedKind = 16;
            return 59;
         }
         if ((active1 & 0x40000000000000L) != 0L || (active2 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 16;
            return 152;
         }
         if ((active0 & 0xfffffffffe000000L) != 0L || (active1 & 0x1bfffL) != 0L)
         {
            jjmatchedKind = 16;
            return 110;
         }
         if ((active0 & 0xc000L) != 0L || (active1 & 0x8200000000000000L) != 0L || (active2 & 0x804000L) != 0L)
            return 1;
         if ((active1 & 0x6aa0000L) != 0L)
         {
            jjmatchedKind = 16;
            return 153;
         }
         return -1;
      case 1:
         if ((active0 & 0x8000L) != 0L)
            return 2;
         if ((active1 & 0x4aa0000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 16;
               jjmatchedPos = 1;
            }
            return 153;
         }
         if ((active0 & 0xfffffffffe000000L) != 0L || (active1 & 0x3fffL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 16;
               jjmatchedPos = 1;
            }
            return 154;
         }
         if ((active1 & 0x4000000009558000L) != 0L || (active2 & 0x7f7f803fL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 16;
               jjmatchedPos = 1;
            }
            return 0;
         }
         if ((active1 & 0x2000000L) != 0L)
            return 155;
         if ((active0 & 0x100L) != 0L)
            return 64;
         return -1;
      case 2:
         if ((active0 & 0xfffeffdffe000000L) != 0L || (active1 & 0x3fffL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 16;
               jjmatchedPos = 2;
            }
            return 156;
         }
         if ((active1 & 0x540000L) != 0L || (active2 & 0x27000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 16;
               jjmatchedPos = 2;
            }
            return 0;
         }
         if ((active1 & 0x2a0000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 16;
               jjmatchedPos = 2;
            }
            return 153;
         }
         return -1;
      case 3:
         if ((active0 & 0xfeeebfdffe000000L) != 0L || (active1 & 0x3bffL) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 3;
            return 156;
         }
         if ((active1 & 0x540000L) != 0L || (active2 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 3;
            return 0;
         }
         if ((active1 & 0x2a0000L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 3;
            return 153;
         }
         return -1;
      case 4:
         if ((active1 & 0x2a0000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 16;
               jjmatchedPos = 4;
            }
            return 153;
         }
         if ((active0 & 0xfcae3e5e9e000000L) != 0L || (active1 & 0x31dfL) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 16;
               jjmatchedPos = 4;
            }
            return 156;
         }
         if ((active1 & 0x540000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 16;
               jjmatchedPos = 4;
            }
            return 0;
         }
         return -1;
      case 5:
         if ((active1 & 0xa0000L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 5;
            return 153;
         }
         if ((active0 & 0x7cae12580e000000L) != 0L || (active1 & 0x119bL) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 5;
            return 156;
         }
         if ((active1 & 0x140000L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 5;
            return 0;
         }
         return -1;
      case 6:
         if ((active0 & 0x1c2a12180a000000L) != 0L || (active1 & 0x1112L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 6;
            return 156;
         }
         return -1;
      case 7:
         if ((active0 & 0x102a000802000000L) != 0L || (active1 & 0x1112L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 7;
            return 156;
         }
         return -1;
      case 8:
         if ((active0 & 0x102a000000000000L) != 0L || (active1 & 0x110L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 8;
            return 156;
         }
         return -1;
      case 9:
         if ((active0 & 0xa000000000000L) != 0L || (active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 9;
            return 156;
         }
         return -1;
      case 10:
         if ((active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 10;
            return 156;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_2(int pos, long active0, long active1, long active2){
   return jjMoveNfa_2(jjStopStringLiteralDfa_2(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_2(){
   switch(curChar)
   {
      case 9:
         return jjStartNfaWithStates_2(0, 2, 0);
      case 10:
         return jjStartNfaWithStates_2(0, 3, 0);
      case 12:
         return jjStartNfaWithStates_2(0, 5, 0);
      case 13:
         return jjStartNfaWithStates_2(0, 4, 0);
      case 32:
         return jjStartNfaWithStates_2(0, 1, 0);
      case 33:
         jjmatchedKind = 16;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x2L);
      case 36:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x18000L, 0x0L);
      case 37:
         jjmatchedKind = 16;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x400000L);
      case 38:
         jjmatchedKind = 16;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x80008L);
      case 40:
         return jjStartNfaWithStates_2(0, 16, 0);
      case 41:
         return jjStartNfaWithStates_2(0, 16, 0);
      case 42:
         jjmatchedKind = 16;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x20000L);
      case 43:
         jjmatchedKind = 16;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x8010L);
      case 44:
         return jjStartNfaWithStates_2(0, 16, 0);
      case 45:
         jjmatchedKind = 16;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x8010020L);
      case 46:
         jjmatchedKind = 16;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x4000000L);
      case 47:
         jjmatchedKind = 16;
         return jjMoveStringLiteralDfa1_2(0x100L, 0x0L, 0x40000L);
      case 58:
         jjmatchedKind = 16;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x540000L, 0x10000000L);
      case 59:
         return jjStartNfaWithStates_2(0, 16, 0);
      case 60:
         jjmatchedKind = 121;
         return jjMoveStringLiteralDfa1_2(0xc000L, 0x8000000000000000L, 0x804000L);
      case 61:
         jjmatchedKind = 16;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x4000000000000000L, 0x0L);
      case 62:
         jjmatchedKind = 16;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x63000001L);
      case 63:
         return jjStartNfaWithStates_2(0, 16, 0);
      case 64:
         jjmatchedKind = 16;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x1000000L, 0x0L);
      case 91:
         return jjStartNfaWithStates_2(0, 16, 0);
      case 93:
         return jjStartNfaWithStates_2(0, 16, 0);
      case 94:
         jjmatchedKind = 16;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x200000L);
      case 96:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x6aa0000L, 0x0L);
      case 97:
         return jjMoveStringLiteralDfa1_2(0x6000000L, 0x0L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_2(0x38000000L, 0x0L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_2(0xfc0000000L, 0x0L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_2(0x7000000000L, 0x0L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_2(0x38000000000L, 0x0L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_2(0x7c0000000000L, 0x0L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_2(0x800000000000L, 0x0L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_2(0x3f000000000000L, 0x0L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_2(0x40000000000000L, 0x0L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_2(0x380000000000000L, 0x0L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_2(0x3c00000000000000L, 0x0L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_2(0x4000000000000000L, 0x0L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_2(0x8000000000000000L, 0x1fL, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x7e0L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x1800L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x2000L, 0x0L);
      case 123:
         return jjStartNfaWithStates_2(0, 16, 0);
      case 124:
         jjmatchedKind = 16;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x100004L);
      case 125:
         jjmatchedKind = 16;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x8000000L, 0x0L);
      case 126:
         return jjStartNfaWithStates_2(0, 16, 0);
      default :
         return jjMoveNfa_2(10, 0);
   }
}
private int jjMoveStringLiteralDfa1_2(long active0, long active1, long active2){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa2_2(active0, 0x8000L, active1, 0L, active2, 0L);
      case 38:
         if ((active2 & 0x8L) != 0L)
            return jjStartNfaWithStates_2(1, 16, 0);
         break;
      case 42:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_2(1, 8, 64);
         break;
      case 43:
         if ((active2 & 0x10L) != 0L)
            return jjStartNfaWithStates_2(1, 16, 0);
         break;
      case 45:
         if ((active2 & 0x20L) != 0L)
            return jjStartNfaWithStates_2(1, 16, 0);
         break;
      case 46:
         if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_2(1, 16, 0);
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0L, active2, 0x4000000L);
      case 47:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(1, 14);
         break;
      case 58:
         if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_2(1, 16, 0);
         else if ((active2 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_2(1, 16, 0);
         break;
      case 60:
         if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_2(1, 89, 155);
         else if ((active2 & 0x4000L) != 0L)
         {
            jjmatchedKind = 142;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0L, active2, 0x800000L);
      case 61:
         if ((active1 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_2(1, 16, 0);
         else if ((active1 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(1, 127);
         else if ((active2 & 0x1L) != 0L)
            return jjStartNfaWithStates_2(1, 16, 0);
         else if ((active2 & 0x2L) != 0L)
            return jjStartNfaWithStates_2(1, 16, 0);
         else if ((active2 & 0x8000L) != 0L)
            return jjStartNfaWithStates_2(1, 16, 0);
         else if ((active2 & 0x10000L) != 0L)
            return jjStartNfaWithStates_2(1, 16, 0);
         else if ((active2 & 0x20000L) != 0L)
            return jjStartNfaWithStates_2(1, 16, 0);
         else if ((active2 & 0x40000L) != 0L)
            return jjStartNfaWithStates_2(1, 16, 0);
         else if ((active2 & 0x80000L) != 0L)
            return jjStartNfaWithStates_2(1, 16, 0);
         else if ((active2 & 0x100000L) != 0L)
            return jjStartNfaWithStates_2(1, 16, 0);
         else if ((active2 & 0x200000L) != 0L)
            return jjStartNfaWithStates_2(1, 16, 0);
         else if ((active2 & 0x400000L) != 0L)
            return jjStartNfaWithStates_2(1, 16, 0);
         break;
      case 62:
         if ((active2 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_2(1, 16, 0);
         else if ((active2 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0L, active2, 0x23000000L);
      case 64:
         if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_2(1, 16, 153);
         break;
      case 96:
         if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_2(1, 16, 0);
         else if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_2(1, 16, 0);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_2(active0, 0x4800400c0000000L, active1, 0L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa2_2(active0, 0x2000000L, active1, 0L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0x600000L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_2(active0, 0x4100001000000000L, active1, 0L, active2, 0L);
      case 102:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_2(1, 16, 154);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_2(active0, 0x8000000100000000L, active1, 0x1820e0L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_2(active0, 0x180000000000L, active1, 0L, active2, 0L);
      case 106:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0x60000L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_2(active0, 0x208200000000L, active1, 0L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_2(active0, 0x6000000000000L, active1, 0L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_2(active0, 0x38010000000000L, active1, 0L, active2, 0L);
      case 111:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_2(active0, 0x40c04c08000000L, active1, 0x1800L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_2(active0, 0x1800000010000000L, active1, 0x700L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa2_2(active0, 0x4000000L, active1, 0L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0x3L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_2(active0, 0x2200000000000000L, active1, 0x4L, active2, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0x8L, active2, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_2(active0, 0x20000000000L, active1, 0L, active2, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_2(active0, 0x20000000L, active1, 0x10L, active2, 0L);
      case 123:
         if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_2(1, 16, 153);
         break;
      case 124:
         if ((active2 & 0x4L) != 0L)
            return jjStartNfaWithStates_2(1, 16, 0);
         break;
      default :
         break;
   }
   return jjStartNfa_2(0, active0, active1, active2);
}
private int jjMoveStringLiteralDfa2_2(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_2(0, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(1, active0, active1, active2);
      return 2;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa3_2(active0, 0x8000L, active1, 0L, active2, 0L);
      case 46:
         if ((active2 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_2(2, 16, 0);
         break;
      case 61:
         if ((active2 & 0x800000L) != 0L)
            return jjStopAtPos(2, 151);
         else if ((active2 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_2(2, 16, 0);
         break;
      case 62:
         if ((active2 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0L, active2, 0x2000000L);
      case 97:
         return jjMoveStringLiteralDfa3_2(active0, 0x300000000L, active1, 0x60101L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_2(active0, 0x2000000000000000L, active1, 0L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_2(active0, 0x400000000000000L, active1, 0L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_2(active0, 0x10000000L, active1, 0L, active2, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_2(active0, 0x1000000000L, active1, 0L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_2(active0, 0x800000000000000L, active1, 0x2828L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_2(active0, 0x200040000000000L, active1, 0x1000L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_2(active0, 0x40180c00000000L, active1, 0x10L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_2(active0, 0x9000200008000000L, active1, 0L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_2(active0, 0x6000000000000L, active1, 0x4L, active2, 0L);
      case 114:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_2(2, 16, 156);
         return jjMoveStringLiteralDfa3_2(active0, 0L, active1, 0xc2L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_2(active0, 0x8008046000000L, active1, 0x600000L, active2, 0L);
      case 116:
         if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_2(active0, 0x40a08200a0000000L, active1, 0x180000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_2(active0, 0x14000000000L, active1, 0x200L, active2, 0L);
      case 119:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_2(2, 16, 156);
         break;
      case 121:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_2(2, 16, 156);
         break;
      default :
         break;
   }
   return jjStartNfa_2(1, active0, active1, active2);
}
private int jjMoveStringLiteralDfa3_2(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_2(1, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(2, active0, active1, active2);
      return 3;
   }
   switch(curChar)
   {
      case 45:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(3, 15);
         break;
      case 61:
         if ((active2 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_2(3, 16, 0);
         break;
      case 97:
         return jjMoveStringLiteralDfa4_2(active0, 0x381010000000L, active1, 0x1000L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa4_2(active0, 0x4000000000L, active1, 0L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_2(active0, 0x80000000L, active1, 0x10L, active2, 0L);
      case 100:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_2(3, 16, 156);
         break;
      case 101:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_2(3, 16, 156);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_2(3, 16, 156);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_2(3, 16, 156);
         else if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_2(3, 16, 156);
         return jjMoveStringLiteralDfa4_2(active0, 0x20020004000000L, active1, 0x4L, active2, 0L);
      case 103:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_2(3, 16, 156);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_2(active0, 0x80000000000000L, active1, 0x2L, active2, 0L);
      case 107:
         return jjMoveStringLiteralDfa4_2(active0, 0x400000000000000L, active1, 0L, active2, 0L);
      case 108:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_2(3, 16, 156);
         return jjMoveStringLiteralDfa4_2(active0, 0x2002000008000000L, active1, 0x2000L, active2, 0L);
      case 109:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_2(3, 16, 156);
         return jjMoveStringLiteralDfa4_2(active0, 0L, active1, 0x180000L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa4_2(active0, 0L, active1, 0x100L, active2, 0L);
      case 111:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_2(3, 16, 156);
         return jjMoveStringLiteralDfa4_2(active0, 0x4000000000000L, active1, 0xc0L, active2, 0L);
      case 114:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_2(3, 16, 156);
         return jjMoveStringLiteralDfa4_2(active0, 0x8000000000000000L, active1, 0L, active2, 0L);
      case 115:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_2(3, 16, 156);
         return jjMoveStringLiteralDfa4_2(active0, 0x40600000000L, active1, 0x600000L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa4_2(active0, 0x1008000802000000L, active1, 0x9L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_2(active0, 0x4000000000000000L, active1, 0L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa4_2(active0, 0x800000000000000L, active1, 0x60000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_2(2, active0, active1, active2);
}
private int jjMoveStringLiteralDfa4_2(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_2(2, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(3, active0, active1, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 58:
         if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_2(4, 16, 153);
         break;
      case 96:
         if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_2(4, 16, 0);
         break;
      case 97:
         return jjMoveStringLiteralDfa5_2(active0, 0xc08000000000000L, active1, 0x60000L);
      case 99:
         return jjMoveStringLiteralDfa5_2(active0, 0L, active1, 0xaL);
      case 101:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_2(4, 16, 156);
         else if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_2(4, 16, 156);
         return jjMoveStringLiteralDfa5_2(active0, 0x1002000008000000L, active1, 0L);
      case 104:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_2(4, 16, 156);
         return jjMoveStringLiteralDfa5_2(active0, 0L, active1, 0x10L);
      case 105:
         return jjMoveStringLiteralDfa5_2(active0, 0x2000000800000000L, active1, 0x1L);
      case 107:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_2(4, 16, 156);
         break;
      case 108:
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_2(active0, 0x104000000000L, active1, 0x180000L);
      case 110:
         return jjMoveStringLiteralDfa5_2(active0, 0x20000000000L, active1, 0L);
      case 114:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_2(4, 16, 156);
         return jjMoveStringLiteralDfa5_2(active0, 0x4024000006000000L, active1, 0L);
      case 115:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_2(4, 16, 156);
         return jjMoveStringLiteralDfa5_2(active0, 0L, active1, 0x100L);
      case 116:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_2(4, 16, 156);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_2(4, 16, 156);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_2(4, 16, 156);
         return jjMoveStringLiteralDfa5_2(active0, 0L, active1, 0x1000L);
      case 117:
         return jjMoveStringLiteralDfa5_2(active0, 0x1000000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa5_2(active0, 0x80000000000000L, active1, 0L);
      case 119:
         if ((active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_2(active0, 0L, active1, 0x80L);
      default :
         break;
   }
   return jjStartNfa_2(3, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa5_2(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_2(3, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(4, active0, active1, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 58:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_2(5, 16, 153);
         else if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_2(5, 16, 153);
         break;
      case 96:
         if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_2(5, 16, 0);
         else if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_2(5, 16, 0);
         break;
      case 97:
         return jjMoveStringLiteralDfa6_2(active0, 0xa000000L, active1, 0L);
      case 99:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_2(5, 16, 156);
         else if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_2(5, 16, 156);
         return jjMoveStringLiteralDfa6_2(active0, 0x1000000000000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa6_2(active0, 0x20000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_2(5, 16, 156);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_2(5, 16, 156);
         break;
      case 102:
         return jjMoveStringLiteralDfa6_2(active0, 0x20000000000000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa6_2(active0, 0x400000000000000L, active1, 0L);
      case 104:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_2(5, 16, 156);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_2(active0, 0L, active1, 0x1100L);
      case 108:
         return jjMoveStringLiteralDfa6_2(active0, 0x101000000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa6_2(active0, 0x2000000000000L, active1, 0L);
      case 110:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_2(5, 16, 156);
         return jjMoveStringLiteralDfa6_2(active0, 0x8000800000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa6_2(active0, 0L, active1, 0x10L);
      case 115:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_2(5, 16, 156);
         break;
      case 116:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_2(5, 16, 156);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_2(5, 16, 156);
         return jjMoveStringLiteralDfa6_2(active0, 0x800000000000000L, active1, 0x2L);
      default :
         break;
   }
   return jjStartNfa_2(4, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa6_2(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_2(4, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(5, active0, active1, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_2(active0, 0x20000000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa7_2(active0, 0x8000002000000L, active1, 0L);
      case 101:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_2(6, 16, 156);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_2(6, 16, 156);
         return jjMoveStringLiteralDfa7_2(active0, 0x2000000000000L, active1, 0x100L);
      case 102:
         return jjMoveStringLiteralDfa7_2(active0, 0L, active1, 0x2L);
      case 108:
         return jjMoveStringLiteralDfa7_2(active0, 0L, active1, 0x1000L);
      case 110:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_2(6, 16, 156);
         break;
      case 111:
         return jjMoveStringLiteralDfa7_2(active0, 0L, active1, 0x10L);
      case 115:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_2(6, 16, 156);
         break;
      case 116:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_2(6, 16, 156);
         return jjMoveStringLiteralDfa7_2(active0, 0x1000000000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa7_2(active0, 0x800000000L, active1, 0L);
      case 121:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_2(6, 16, 156);
         break;
      default :
         break;
   }
   return jjStartNfa_2(5, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa7_2(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_2(5, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(6, active0, active1, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa8_2(active0, 0x20000000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_2(7, 16, 156);
         else if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_2(7, 16, 156);
         return jjMoveStringLiteralDfa8_2(active0, 0x1008000000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa8_2(active0, 0x2000000000000L, active1, 0x110L);
      case 112:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_2(7, 16, 156);
         break;
      case 116:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_2(7, 16, 156);
         break;
      default :
         break;
   }
   return jjStartNfa_2(6, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa8_2(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_2(6, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(7, active0, active1, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_2(8, 16, 156);
         break;
      case 101:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_2(8, 16, 156);
         break;
      case 105:
         return jjMoveStringLiteralDfa9_2(active0, 0L, active1, 0x10L);
      case 111:
         return jjMoveStringLiteralDfa9_2(active0, 0x8000000000000L, active1, 0L);
      case 116:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_2(8, 16, 156);
         return jjMoveStringLiteralDfa9_2(active0, 0x2000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_2(7, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa9_2(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_2(7, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(8, active0, active1, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 102:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_2(9, 16, 156);
         break;
      case 115:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_2(9, 16, 156);
         break;
      case 122:
         return jjMoveStringLiteralDfa10_2(active0, 0L, active1, 0x10L);
      default :
         break;
   }
   return jjStartNfa_2(8, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa10_2(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_2(8, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(9, 0L, active1, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa11_2(active1, 0x10L);
      default :
         break;
   }
   return jjStartNfa_2(9, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa11_2(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_2(9, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(10, 0L, active1, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 100:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_2(11, 16, 156);
         break;
      default :
         break;
   }
   return jjStartNfa_2(10, 0L, active1, 0L);
}
private int jjStartNfaWithStates_2(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_2(state, pos + 1);
}
private int jjMoveNfa_2(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 152;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 59:
                  if ((0xefffffffffffffffL & l) != 0L)
                  {
                     if (kind > 16)
                        kind = 16;
                     { jjCheckNAdd(0); }
                  }
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 64;
                  else if (curChar == 47)
                  {
                     if (kind > 6)
                        kind = 6;
                     { jjCheckNAddStates(203, 205); }
                  }
                  break;
               case 153:
                  { jjCheckNAddStates(206, 208); }
                  if ((0xefffffffffffffffL & l) != 0L)
                  {
                     if (kind > 16)
                        kind = 16;
                     { jjCheckNAdd(0); }
                  }
                  break;
               case 152:
                  if ((0xefffffffffffffffL & l) != 0L)
                  {
                     if (kind > 16)
                        kind = 16;
                     { jjCheckNAdd(0); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 98)
                        kind = 98;
                     { jjCheckNAddStates(209, 212); }
                  }
                  break;
               case 156:
                  if ((0xefffffffffffffffL & l) != 0L)
                  {
                     if (kind > 16)
                        kind = 16;
                     { jjCheckNAdd(0); }
                  }
                  if ((0x3ff00100fffc1ffL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     { jjCheckNAdd(115); }
                  }
                  else if ((0x240000000000L & l) != 0L)
                     { jjCheckNAddStates(213, 215); }
                  if ((0x3ff00100fffc1ffL & l) != 0L)
                     { jjCheckNAddStates(216, 219); }
                  else if (curChar == 42)
                  {
                     if (kind > 107)
                        kind = 107;
                  }
                  if ((0x3ff00100fffc1ffL & l) != 0L)
                  {
                     if (kind > 106)
                        kind = 106;
                     { jjCheckNAdd(109); }
                  }
                  if (curChar == 36)
                  {
                     if (kind > 107)
                        kind = 107;
                     { jjCheckNAddStates(220, 224); }
                  }
                  break;
               case 64:
                  if ((0xefffffffffffffffL & l) != 0L)
                  {
                     if (kind > 16)
                        kind = 16;
                     { jjCheckNAdd(0); }
                  }
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 10:
                  if ((0xefffffffffffffffL & l) != 0L)
                  {
                     if (kind > 16)
                        kind = 16;
                     { jjCheckNAdd(0); }
                  }
                  else if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 1;
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 93)
                        kind = 93;
                     { jjCheckNAddStates(225, 239); }
                  }
                  else if (curChar == 36)
                  {
                     if (kind > 106)
                        kind = 106;
                     { jjCheckNAddStates(240, 242); }
                  }
                  else if (curChar == 47)
                     { jjAddStates(243, 244); }
                  else if (curChar == 34)
                     { jjCheckNAddStates(245, 248); }
                  else if (curChar == 39)
                     { jjAddStates(249, 251); }
                  else if (curChar == 46)
                     { jjCheckNAdd(12); }
                  if (curChar == 48)
                     { jjAddStates(252, 259); }
                  break;
               case 110:
                  if ((0xefffffffffffffffL & l) != 0L)
                  {
                     if (kind > 16)
                        kind = 16;
                     { jjCheckNAdd(0); }
                  }
                  if ((0x3ff00100fffc1ffL & l) != 0L)
                  {
                     if (kind > 106)
                        kind = 106;
                     { jjCheckNAdd(109); }
                  }
                  else if ((0x240000000000L & l) != 0L)
                     { jjCheckNAddStates(213, 215); }
                  if (curChar == 36)
                     { jjCheckNAddStates(216, 219); }
                  break;
               case 155:
               case 54:
                  { jjCheckNAddStates(206, 208); }
                  break;
               case 154:
                  if ((0xefffffffffffffffL & l) != 0L)
                  {
                     if (kind > 16)
                        kind = 16;
                     { jjCheckNAdd(0); }
                  }
                  if ((0x3ff00100fffc1ffL & l) != 0L)
                     { jjCheckNAddStates(216, 219); }
                  else if ((0x240000000000L & l) != 0L)
                     { jjCheckNAddStates(213, 215); }
                  if ((0x3ff00100fffc1ffL & l) != 0L)
                  {
                     if (kind > 106)
                        kind = 106;
                     { jjCheckNAdd(109); }
                  }
                  else if (curChar == 42)
                  {
                     if (kind > 107)
                        kind = 107;
                  }
                  if (curChar == 36)
                  {
                     if (kind > 107)
                        kind = 107;
                     { jjCheckNAddStates(220, 224); }
                  }
                  break;
               case 0:
                  if ((0xefffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 16)
                     kind = 16;
                  { jjCheckNAdd(0); }
                  break;
               case 1:
                  if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 9:
                  if (curChar == 32 && kind > 78)
                     kind = 78;
                  break;
               case 11:
                  if (curChar == 46)
                     { jjCheckNAdd(12); }
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  { jjCheckNAddStates(209, 212); }
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(13, 14); }
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  { jjCheckNAddStates(260, 262); }
                  break;
               case 16:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(17); }
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  { jjCheckNAddStates(263, 265); }
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(18, 19); }
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  { jjCheckNAddTwoStates(17, 20); }
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  { jjCheckNAddStates(266, 269); }
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  { jjCheckNAddStates(270, 274); }
                  break;
               case 23:
                  if (curChar == 39)
                     { jjAddStates(249, 251); }
                  break;
               case 24:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     { jjCheckNAdd(25); }
                  break;
               case 25:
                  if (curChar == 39 && kind > 103)
                     kind = 103;
                  break;
               case 27:
                  if ((0x8400000000L & l) != 0L)
                     { jjCheckNAdd(25); }
                  break;
               case 28:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(29, 25); }
                  break;
               case 29:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAdd(25); }
                  break;
               case 30:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 31:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAdd(29); }
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(25); }
                  break;
               case 38:
                  if (curChar == 34)
                     { jjCheckNAddStates(245, 248); }
                  break;
               case 39:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     { jjCheckNAddStates(245, 248); }
                  break;
               case 41:
                  if ((0x8400000000L & l) != 0L)
                     { jjCheckNAddStates(245, 248); }
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 44:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(245, 248); }
                  break;
               case 48:
                  if (curChar == 34 && kind > 104)
                     kind = 104;
                  break;
               case 49:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(275, 279); }
                  break;
               case 50:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(245, 248); }
                  break;
               case 51:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 52:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAdd(50); }
                  break;
               case 58:
                  if (curChar == 47)
                     { jjAddStates(243, 244); }
                  break;
               case 60:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  { jjCheckNAddStates(203, 205); }
                  break;
               case 61:
                  if ((0x2400L & l) != 0L && kind > 6)
                     kind = 6;
                  break;
               case 62:
                  if (curChar == 10 && kind > 6)
                     kind = 6;
                  break;
               case 63:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 65:
                  if ((0xffff7fffffffffffL & l) != 0L && kind > 7)
                     kind = 7;
                  break;
               case 66:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 67:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 93)
                     kind = 93;
                  { jjCheckNAddStates(225, 239); }
                  break;
               case 68:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(68, 69); }
                  break;
               case 69:
               case 120:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(70); }
                  break;
               case 71:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(71, 72); }
                  break;
               case 72:
               case 131:
                  if ((0x3ff000000000000L & l) != 0L && kind > 93)
                     kind = 93;
                  break;
               case 73:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(73, 74); }
                  break;
               case 74:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(280, 282); }
                  break;
               case 75:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(283, 286); }
                  break;
               case 77:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(78); }
                  break;
               case 78:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(287, 289); }
                  break;
               case 79:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(79, 80); }
                  break;
               case 80:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(78, 20); }
                  break;
               case 81:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(290, 293); }
                  break;
               case 82:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(294, 298); }
                  break;
               case 83:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(83, 84); }
                  break;
               case 84:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(85, 86); }
                  break;
               case 85:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(299, 301); }
                  break;
               case 87:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(88); }
                  break;
               case 88:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  { jjCheckNAddStates(302, 304); }
                  break;
               case 89:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(89, 90); }
                  break;
               case 90:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  { jjCheckNAddTwoStates(88, 20); }
                  break;
               case 91:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  { jjCheckNAddStates(305, 308); }
                  break;
               case 92:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(309, 312); }
                  break;
               case 93:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(93, 94); }
                  break;
               case 94:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(95, 96); }
                  break;
               case 95:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(313, 315); }
                  break;
               case 96:
                  if (curChar != 46)
                     break;
                  if (kind > 98)
                     kind = 98;
                  { jjCheckNAddStates(316, 318); }
                  break;
               case 97:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  { jjCheckNAddStates(319, 322); }
                  break;
               case 98:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(98, 99); }
                  break;
               case 99:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  { jjCheckNAddStates(316, 318); }
                  break;
               case 101:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(102); }
                  break;
               case 102:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  { jjCheckNAddStates(323, 325); }
                  break;
               case 103:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(103, 104); }
                  break;
               case 104:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  { jjCheckNAddTwoStates(102, 20); }
                  break;
               case 105:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  { jjCheckNAddStates(326, 329); }
                  break;
               case 106:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  { jjCheckNAddStates(330, 334); }
                  break;
               case 107:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(335, 338); }
                  break;
               case 108:
                  if (curChar != 36)
                     break;
                  if (kind > 106)
                     kind = 106;
                  { jjCheckNAddStates(240, 242); }
                  break;
               case 109:
                  if ((0x3ff00100fffc1ffL & l) == 0L)
                     break;
                  if (kind > 106)
                     kind = 106;
                  { jjCheckNAdd(109); }
                  break;
               case 111:
                  if ((0x3ff00100fffc1ffL & l) != 0L)
                     { jjCheckNAddStates(216, 219); }
                  break;
               case 112:
                  if ((0x240000000000L & l) != 0L)
                     { jjCheckNAddStates(213, 215); }
                  break;
               case 113:
                  if (curChar == 42 && kind > 107)
                     kind = 107;
                  break;
               case 114:
                  if (curChar != 36)
                     break;
                  if (kind > 107)
                     kind = 107;
                  { jjCheckNAddStates(220, 224); }
                  break;
               case 115:
                  if ((0x3ff00100fffc1ffL & l) == 0L)
                     break;
                  if (kind > 107)
                     kind = 107;
                  { jjCheckNAdd(115); }
                  break;
               case 116:
                  if (curChar == 48)
                     { jjAddStates(252, 259); }
                  break;
               case 118:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(339, 341); }
                  break;
               case 119:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(119, 120); }
                  break;
               case 121:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(342, 344); }
                  break;
               case 122:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(122, 123); }
                  break;
               case 123:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAdd(70); }
                  break;
               case 125:
                  if ((0x3000000000000L & l) != 0L)
                     { jjCheckNAddStates(345, 347); }
                  break;
               case 126:
                  if ((0x3000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(126, 127); }
                  break;
               case 127:
                  if ((0x3000000000000L & l) != 0L)
                     { jjCheckNAdd(70); }
                  break;
               case 129:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 93)
                     kind = 93;
                  { jjCheckNAddTwoStates(130, 131); }
                  break;
               case 130:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(130, 131); }
                  break;
               case 132:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 93)
                     kind = 93;
                  { jjCheckNAddTwoStates(133, 134); }
                  break;
               case 133:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(133, 134); }
                  break;
               case 134:
                  if ((0xff000000000000L & l) != 0L && kind > 93)
                     kind = 93;
                  break;
               case 136:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 93)
                     kind = 93;
                  { jjCheckNAddTwoStates(137, 138); }
                  break;
               case 137:
                  if ((0x3000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(137, 138); }
                  break;
               case 138:
                  if ((0x3000000000000L & l) != 0L && kind > 93)
                     kind = 93;
                  break;
               case 140:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjAddStates(348, 349); }
                  break;
               case 141:
                  if (curChar == 46)
                     { jjCheckNAdd(142); }
                  break;
               case 142:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(142, 143); }
                  break;
               case 144:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(145); }
                  break;
               case 145:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  { jjCheckNAddTwoStates(145, 20); }
                  break;
               case 147:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(350, 352); }
                  break;
               case 148:
                  if (curChar == 46)
                     { jjCheckNAdd(149); }
                  break;
               case 150:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(151); }
                  break;
               case 151:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  { jjCheckNAddTwoStates(151, 20); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 59:
               case 0:
                  if (kind > 16)
                     kind = 16;
                  { jjCheckNAdd(0); }
                  break;
               case 153:
                  if (kind > 16)
                     kind = 16;
                  { jjCheckNAdd(0); }
                  if ((0xfffffffeffffffffL & l) != 0L)
                     { jjCheckNAddStates(206, 208); }
                  else if (curChar == 96)
                  {
                     if (kind > 105)
                        kind = 105;
                  }
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 152:
                  if (kind > 16)
                     kind = 16;
                  { jjCheckNAdd(0); }
                  break;
               case 156:
                  if (kind > 16)
                     kind = 16;
                  { jjCheckNAdd(0); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     { jjCheckNAddStates(220, 224); }
                  }
                  if ((0x87fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     { jjCheckNAdd(115); }
                  }
                  if ((0x87fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(216, 219); }
                  if ((0x87fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 106)
                        kind = 106;
                     { jjCheckNAdd(109); }
                  }
                  break;
               case 64:
                  if (kind > 16)
                     kind = 16;
                  { jjCheckNAdd(0); }
                  break;
               case 10:
                  if (kind > 16)
                     kind = 16;
                  { jjCheckNAdd(0); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 106)
                        kind = 106;
                     { jjCheckNAddStates(240, 242); }
                  }
                  else if (curChar == 96)
                     { jjCheckNAddStates(206, 208); }
                  break;
               case 110:
                  if (kind > 16)
                     kind = 16;
                  { jjCheckNAdd(0); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(216, 219); }
                  if ((0x87fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 106)
                        kind = 106;
                     { jjCheckNAdd(109); }
                  }
                  break;
               case 155:
                  if ((0xfffffffeffffffffL & l) != 0L)
                     { jjCheckNAddStates(206, 208); }
                  else if (curChar == 96)
                  {
                     if (kind > 105)
                        kind = 105;
                  }
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 154:
                  if (kind > 16)
                     kind = 16;
                  { jjCheckNAdd(0); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     { jjCheckNAddStates(220, 224); }
                  }
                  if ((0x87fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(216, 219); }
                  if ((0x87fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 106)
                        kind = 106;
                     { jjCheckNAdd(109); }
                  }
                  break;
               case 2:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 3:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 4:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 5:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 6:
                  if ((0x200000002000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 7:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 8:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 13:
                  if (curChar == 95)
                     { jjAddStates(353, 354); }
                  break;
               case 15:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(355, 356); }
                  break;
               case 18:
                  if (curChar == 95)
                     { jjAddStates(357, 358); }
                  break;
               case 20:
                  if ((0x5000000050L & l) != 0L && kind > 98)
                     kind = 98;
                  break;
               case 24:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAdd(25); }
                  break;
               case 26:
                  if (curChar == 92)
                     { jjAddStates(359, 361); }
                  break;
               case 27:
                  if ((0x14404410000000L & l) != 0L)
                     { jjCheckNAdd(25); }
                  break;
               case 32:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 33:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 34:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 35:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 36:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAdd(25); }
                  break;
               case 37:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 39:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(245, 248); }
                  break;
               case 40:
                  if (curChar == 92)
                     { jjAddStates(362, 364); }
                  break;
               case 41:
                  if ((0x14404410000000L & l) != 0L)
                     { jjCheckNAddStates(245, 248); }
                  break;
               case 42:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 43:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 44:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 45:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 46:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(245, 248); }
                  break;
               case 47:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 53:
               case 55:
                  if (curChar == 96)
                     { jjCheckNAddStates(206, 208); }
                  break;
               case 54:
                  if ((0xfffffffeffffffffL & l) != 0L)
                     { jjCheckNAddStates(206, 208); }
                  break;
               case 56:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 57:
                  if (curChar == 96 && kind > 105)
                     kind = 105;
                  break;
               case 60:
                  if (kind > 6)
                     kind = 6;
                  { jjAddStates(203, 205); }
                  break;
               case 65:
                  if (kind > 7)
                     kind = 7;
                  break;
               case 68:
                  if (curChar == 95)
                     { jjAddStates(365, 366); }
                  break;
               case 70:
                  if ((0x100000001000L & l) != 0L && kind > 92)
                     kind = 92;
                  break;
               case 71:
                  if (curChar == 95)
                     { jjAddStates(367, 368); }
                  break;
               case 73:
                  if (curChar == 95)
                     { jjAddStates(369, 370); }
                  break;
               case 76:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(371, 372); }
                  break;
               case 79:
                  if (curChar == 95)
                     { jjAddStates(373, 374); }
                  break;
               case 83:
                  if (curChar == 95)
                     { jjAddStates(375, 376); }
                  break;
               case 86:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(377, 378); }
                  break;
               case 89:
                  if (curChar == 95)
                     { jjAddStates(379, 380); }
                  break;
               case 93:
                  if (curChar == 95)
                     { jjAddStates(381, 382); }
                  break;
               case 98:
                  if (curChar == 95)
                     { jjAddStates(383, 384); }
                  break;
               case 100:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(385, 386); }
                  break;
               case 103:
                  if (curChar == 95)
                     { jjAddStates(387, 388); }
                  break;
               case 108:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 106)
                     kind = 106;
                  { jjCheckNAddStates(240, 242); }
                  break;
               case 109:
                  if ((0x87fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 106)
                     kind = 106;
                  { jjCheckNAdd(109); }
                  break;
               case 111:
                  if ((0x87fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(216, 219); }
                  break;
               case 114:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 107)
                     kind = 107;
                  { jjCheckNAddStates(220, 224); }
                  break;
               case 115:
                  if ((0x87fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 107)
                     kind = 107;
                  { jjCheckNAdd(115); }
                  break;
               case 117:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 118;
                  break;
               case 118:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(339, 341); }
                  break;
               case 119:
                  if ((0x7e8000007eL & l) != 0L)
                     { jjCheckNAddTwoStates(119, 120); }
                  break;
               case 120:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAdd(70); }
                  break;
               case 122:
                  if (curChar == 95)
                     { jjAddStates(389, 390); }
                  break;
               case 124:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 125;
                  break;
               case 126:
                  if (curChar == 95)
                     { jjAddStates(391, 392); }
                  break;
               case 128:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 129;
                  break;
               case 129:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 93)
                     kind = 93;
                  { jjCheckNAddTwoStates(130, 131); }
                  break;
               case 130:
                  if ((0x7e8000007eL & l) != 0L)
                     { jjCheckNAddTwoStates(130, 131); }
                  break;
               case 131:
                  if ((0x7e0000007eL & l) != 0L && kind > 93)
                     kind = 93;
                  break;
               case 133:
                  if (curChar == 95)
                     { jjAddStates(393, 394); }
                  break;
               case 135:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 136;
                  break;
               case 137:
                  if (curChar == 95)
                     { jjAddStates(395, 396); }
                  break;
               case 139:
                  if ((0x100000001000000L & l) != 0L)
                     { jjCheckNAddTwoStates(140, 141); }
                  break;
               case 140:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddTwoStates(140, 141); }
                  break;
               case 142:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjAddStates(397, 398); }
                  break;
               case 143:
                  if ((0x1000000010000L & l) != 0L)
                     { jjAddStates(399, 400); }
                  break;
               case 146:
                  if ((0x100000001000000L & l) != 0L)
                     { jjCheckNAdd(147); }
                  break;
               case 147:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(350, 352); }
                  break;
               case 149:
                  if ((0x1000000010000L & l) != 0L)
                     { jjAddStates(401, 402); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 59:
               case 0:
                  if (!jjCanMove_3(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 16)
                     kind = 16;
                  { jjCheckNAdd(0); }
                  break;
               case 153:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 16)
                        kind = 16;
                     { jjCheckNAdd(0); }
                  }
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(206, 208); }
                  break;
               case 152:
                  if (!jjCanMove_3(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 16)
                     kind = 16;
                  { jjCheckNAdd(0); }
                  break;
               case 156:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 16)
                        kind = 16;
                     { jjCheckNAdd(0); }
                  }
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 106)
                        kind = 106;
                     { jjCheckNAdd(109); }
                  }
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(216, 219); }
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 107)
                        kind = 107;
                     { jjCheckNAdd(115); }
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 107)
                        kind = 107;
                     { jjCheckNAddStates(220, 224); }
                  }
                  break;
               case 64:
                  if (!jjCanMove_3(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 16)
                     kind = 16;
                  { jjCheckNAdd(0); }
                  break;
               case 10:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 16)
                        kind = 16;
                     { jjCheckNAdd(0); }
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 106)
                        kind = 106;
                     { jjCheckNAddStates(240, 242); }
                  }
                  break;
               case 110:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 16)
                        kind = 16;
                     { jjCheckNAdd(0); }
                  }
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 106)
                        kind = 106;
                     { jjCheckNAdd(109); }
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(216, 219); }
                  break;
               case 155:
               case 54:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(206, 208); }
                  break;
               case 154:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 16)
                        kind = 16;
                     { jjCheckNAdd(0); }
                  }
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 106)
                        kind = 106;
                     { jjCheckNAdd(109); }
                  }
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(216, 219); }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 107)
                        kind = 107;
                     { jjCheckNAddStates(220, 224); }
                  }
                  break;
               case 24:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 39:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(245, 248); }
                  break;
               case 60:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 6)
                     kind = 6;
                  { jjAddStates(203, 205); }
                  break;
               case 65:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 7)
                     kind = 7;
                  break;
               case 108:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 106)
                     kind = 106;
                  { jjCheckNAddStates(240, 242); }
                  break;
               case 109:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 106)
                     kind = 106;
                  { jjCheckNAdd(109); }
                  break;
               case 111:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(216, 219); }
                  break;
               case 114:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 107)
                     kind = 107;
                  { jjCheckNAddStates(220, 224); }
                  break;
               case 115:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 107)
                     kind = 107;
                  { jjCheckNAdd(115); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 152 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_1(int pos, long active0, long active1, long active2){
   switch (pos)
   {
      case 0:
         if ((active1 & 0x8200000000000000L) != 0L || (active2 & 0x804000L) != 0L)
            return 49;
         if ((active0 & 0x3c00000000000000L) != 0L)
         {
            jjmatchedKind = 106;
            return 108;
         }
         if ((active0 & 0x200000L) != 0L || (active1 & 0x40000000000000L) != 0L || (active2 & 0x4000000L) != 0L)
            return 219;
         if ((active0 & 0x7000000000L) != 0L)
         {
            jjmatchedKind = 106;
            return 121;
         }
         if ((active0 & 0xfc0000000L) != 0L)
         {
            jjmatchedKind = 106;
            return 220;
         }
         if ((active0 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 106;
            return 118;
         }
         if ((active0 & 0x8000000000000000L) != 0L || (active1 & 0x1fL) != 0L)
         {
            jjmatchedKind = 24;
            return 221;
         }
         if ((active0 & 0x3c07c003e000000L) != 0L || (active1 & 0x3fe0L) != 0L)
         {
            jjmatchedKind = 106;
            return 221;
         }
         if ((active0 & 0x38000000000L) != 0L)
         {
            jjmatchedKind = 106;
            return 114;
         }
         if ((active0 & 0x400000L) != 0L || (active1 & 0x2000000000540000L) != 0L || (active2 & 0x10000000L) != 0L)
            return 26;
         if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 106;
            return 42;
         }
         if ((active0 & 0x100L) != 0L || (active2 & 0x40200L) != 0L)
            return 126;
         if ((active0 & 0x3f000000000000L) != 0L)
         {
            jjmatchedKind = 106;
            return 38;
         }
         if ((active1 & 0x800000000000000L) != 0L || (active2 & 0xe3008051L) != 0L)
         {
            jjmatchedKind = 20;
            return -1;
         }
         if ((active2 & 0x80100a0L) != 0L)
            return 9;
         if ((active1 & 0x6aa0000L) != 0L)
            return 222;
         if ((active2 & 0x402000L) != 0L)
         {
            jjmatchedKind = 24;
            return -1;
         }
         if ((active1 & 0x18000L) != 0L)
         {
            jjmatchedKind = 106;
            return 223;
         }
         return -1;
      case 1:
         if ((active2 & 0x10000000L) != 0L)
            return 224;
         if ((active1 & 0x6aa0000L) != 0L)
            return 222;
         if ((active0 & 0xbfc6fd8ffe000000L) != 0L || (active1 & 0x3fffL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 106;
               jjmatchedPos = 1;
            }
            return 225;
         }
         if ((active0 & 0x38020000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 24;
               jjmatchedPos = 1;
            }
            return 225;
         }
         if ((active0 & 0x100L) != 0L)
            return 131;
         if ((active1 & 0x540000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 19;
               jjmatchedPos = 1;
            }
            return 226;
         }
         if ((active0 & 0x4000000000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 106;
               jjmatchedPos = 1;
            }
            return 227;
         }
         if ((active2 & 0x63008011L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 20;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x1006000000000L) != 0L)
            return 225;
         if ((active2 & 0x400000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 24;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active2 & 0x20L) != 0L)
            return 10;
         if ((active0 & 0x1000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 106;
               jjmatchedPos = 1;
            }
            return 228;
         }
         return -1;
      case 2:
         if ((active0 & 0x130400000000000L) != 0L || (active1 & 0x400L) != 0L)
            return 229;
         if ((active1 & 0x2a0000L) != 0L)
            return 222;
         if ((active2 & 0x23000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 20;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0xfecebfdffe000000L) != 0L || (active1 & 0x3bffL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 106;
               jjmatchedPos = 2;
            }
            return 229;
         }
         if ((active1 & 0x540000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 19;
               jjmatchedPos = 2;
            }
            return 230;
         }
         return -1;
      case 3:
         if ((active0 & 0x240818160000000L) != 0L || (active1 & 0xa20L) != 0L)
            return 229;
         if ((active1 & 0x2a0000L) != 0L)
            return 222;
         if ((active2 & 0x2000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 20;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active1 & 0x540000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 3;
            return 230;
         }
         if ((active0 & 0xfcae3e5e9e000000L) != 0L || (active1 & 0x31dfL) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 3;
            return 229;
         }
         return -1;
      case 4:
         if ((active0 & 0x80003c0690000000L) != 0L || (active1 & 0x20c4L) != 0L)
            return 229;
         if ((active0 & 0x7cae02580e000000L) != 0L || (active1 & 0x111bL) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 106;
               jjmatchedPos = 4;
            }
            return 229;
         }
         if ((active1 & 0x140000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 19;
               jjmatchedPos = 4;
            }
            return 230;
         }
         if ((active1 & 0x2a0000L) != 0L)
            return 222;
         return -1;
      case 5:
         if ((active0 & 0x6084004004000000L) != 0L || (active1 & 0x89L) != 0L)
            return 229;
         if ((active1 & 0xa0000L) != 0L)
            return 222;
         if ((active0 & 0x1c2a12180a000000L) != 0L || (active1 & 0x1112L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 5;
            return 229;
         }
         return -1;
      case 6:
         if ((active0 & 0xc00121008000000L) != 0L)
            return 229;
         if ((active0 & 0x102a000802000000L) != 0L || (active1 & 0x1112L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 6;
            return 229;
         }
         return -1;
      case 7:
         if ((active0 & 0x802000000L) != 0L || (active1 & 0x1002L) != 0L)
            return 229;
         if ((active0 & 0x102a000000000000L) != 0L || (active1 & 0x110L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 7;
            return 229;
         }
         return -1;
      case 8:
         if ((active0 & 0x1020000000000000L) != 0L || (active1 & 0x100L) != 0L)
            return 229;
         if ((active0 & 0xa000000000000L) != 0L || (active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 8;
            return 229;
         }
         return -1;
      case 9:
         if ((active0 & 0xa000000000000L) != 0L)
            return 229;
         if ((active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 9;
            return 229;
         }
         return -1;
      case 10:
         if ((active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 10;
            return 229;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0, long active1, long active2){
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_1(){
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 122;
         return jjMoveStringLiteralDfa1_1(0x800000L, 0x0L, 0x2L);
      case 36:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x18000L, 0x0L);
      case 37:
         jjmatchedKind = 24;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x400000L);
      case 38:
         jjmatchedKind = 138;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x80008L);
      case 40:
         return jjStopAtPos(0, 110);
      case 41:
         return jjStopAtPos(0, 111);
      case 42:
         jjmatchedKind = 136;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x20000L);
      case 43:
         jjmatchedKind = 20;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x8010L);
      case 44:
         return jjStopAtPos(0, 117);
      case 45:
         jjmatchedKind = 135;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x8010020L);
      case 46:
         jjmatchedKind = 118;
         return jjMoveStringLiteralDfa1_1(0x200000L, 0x0L, 0x4000000L);
      case 47:
         jjmatchedKind = 137;
         return jjMoveStringLiteralDfa1_1(0x100L, 0x0L, 0x40000L);
      case 58:
         jjmatchedKind = 125;
         return jjMoveStringLiteralDfa1_1(0x400000L, 0x540000L, 0x10000000L);
      case 59:
         return jjStopAtPos(0, 116);
      case 60:
         jjmatchedKind = 121;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x8000000000000000L, 0x804000L);
      case 61:
         jjmatchedKind = 120;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x4000000000000000L, 0x0L);
      case 62:
         jjmatchedKind = 20;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x63000001L);
      case 63:
         return jjStopAtPos(0, 124);
      case 64:
         jjmatchedKind = 119;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x1000000L, 0x0L);
      case 91:
         return jjStopAtPos(0, 114);
      case 93:
         return jjStopAtPos(0, 115);
      case 94:
         jjmatchedKind = 140;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x200000L);
      case 96:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x6aa0000L, 0x0L);
      case 97:
         return jjMoveStringLiteralDfa1_1(0x6000000L, 0x0L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_1(0x38000000L, 0x0L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_1(0xfc0000000L, 0x0L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_1(0x7000000000L, 0x0L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_1(0x38000000000L, 0x0L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_1(0x7c0000000000L, 0x0L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_1(0x800000000000L, 0x0L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_1(0x3f000000000000L, 0x0L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_1(0x40000000000000L, 0x0L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_1(0x380000000000000L, 0x0L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_1(0x3c00000000000000L, 0x0L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_1(0x4000000000000000L, 0x0L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_1(0x8000000000000000L, 0x1fL, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x7e0L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x1800L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x2000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 112);
      case 124:
         jjmatchedKind = 139;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x100004L);
      case 125:
         jjmatchedKind = 113;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x8000000L, 0x0L);
      case 126:
         return jjStopAtPos(0, 20);
      default :
         return jjMoveNfa_1(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_1(long active0, long active1, long active2){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active2 & 0x8L) != 0L)
            return jjStopAtPos(1, 131);
         break;
      case 42:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_1(1, 8, 131);
         break;
      case 43:
         if ((active2 & 0x10L) != 0L)
            return jjStopAtPos(1, 132);
         break;
      case 45:
         if ((active2 & 0x20L) != 0L)
            return jjStartNfaWithStates_1(1, 133, 10);
         break;
      case 46:
         if ((active1 & 0x8000L) != 0L)
            return jjStopAtPos(1, 79);
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0L, active2, 0x4000000L);
      case 58:
         if ((active1 & 0x10000L) != 0L)
            return jjStopAtPos(1, 80);
         else if ((active2 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_1(1, 156, 224);
         break;
      case 60:
         if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_1(1, 89, 222);
         else if ((active2 & 0x4000L) != 0L)
         {
            jjmatchedKind = 142;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0L, active2, 0x800000L);
      case 61:
         if ((active1 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(1, 126);
         else if ((active1 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(1, 127);
         else if ((active2 & 0x1L) != 0L)
            return jjStopAtPos(1, 128);
         else if ((active2 & 0x2L) != 0L)
            return jjStopAtPos(1, 129);
         else if ((active2 & 0x8000L) != 0L)
            return jjStopAtPos(1, 143);
         else if ((active2 & 0x10000L) != 0L)
            return jjStopAtPos(1, 144);
         else if ((active2 & 0x20000L) != 0L)
            return jjStopAtPos(1, 145);
         else if ((active2 & 0x40000L) != 0L)
            return jjStopAtPos(1, 146);
         else if ((active2 & 0x80000L) != 0L)
            return jjStopAtPos(1, 147);
         else if ((active2 & 0x100000L) != 0L)
            return jjStopAtPos(1, 148);
         else if ((active2 & 0x200000L) != 0L)
            return jjStopAtPos(1, 149);
         else if ((active2 & 0x400000L) != 0L)
            return jjStopAtPos(1, 150);
         break;
      case 62:
         if ((active2 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 155);
         else if ((active2 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 158;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0L, active2, 0x23000000L);
      case 64:
         if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_1(1, 87, 222);
         break;
      case 96:
         if ((active1 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 88);
         else if ((active1 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 91);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_1(active0, 0x4800400c0000000L, active1, 0L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa2_1(active0, 0x2000000L, active1, 0L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0x600000L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_1(active0, 0x4100001000000000L, active1, 0L, active2, 0L);
      case 102:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_1(1, 48, 225);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_1(active0, 0x8000000100000000L, active1, 0x1820e0L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_1(active0, 0x180000800000L, active1, 0L, active2, 0L);
      case 106:
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0x60000L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_1(active0, 0x208200000000L, active1, 0L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_1(active0, 0x6000000000000L, active1, 0L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_1(active0, 0x38010000000000L, active1, 0L, active2, 0L);
      case 111:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_1(active0, 0x40c04c08000000L, active1, 0x1800L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_1(active0, 0x1800000010000000L, active1, 0x700L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa2_1(active0, 0x4000000L, active1, 0L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0x3L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_1(active0, 0x2200000000000000L, active1, 0x4L, active2, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0x8L, active2, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_1(active0, 0x20000000000L, active1, 0L, active2, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_1(active0, 0x20000000L, active1, 0x10L, active2, 0L);
      case 123:
         if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(1, 21);
         else if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(1, 22);
         else if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_1(1, 90, 222);
         break;
      case 124:
         if ((active2 & 0x4L) != 0L)
            return jjStopAtPos(1, 130);
         break;
      default :
         break;
   }
   return jjStartNfa_1(0, active0, active1, active2);
}
private int jjMoveStringLiteralDfa2_1(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_1(0, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(1, active0, active1, active2);
      return 2;
   }
   switch(curChar)
   {
      case 46:
         if ((active2 & 0x4000000L) != 0L)
            return jjStopAtPos(2, 154);
         break;
      case 61:
         if ((active2 & 0x800000L) != 0L)
            return jjStopAtPos(2, 151);
         else if ((active2 & 0x1000000L) != 0L)
            return jjStopAtPos(2, 152);
         break;
      case 62:
         if ((active2 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 157;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0L, active2, 0x2000000L);
      case 97:
         return jjMoveStringLiteralDfa3_1(active0, 0x300000000L, active1, 0x60101L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_1(active0, 0x2000000000000000L, active1, 0L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_1(active0, 0x400000000000000L, active1, 0L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_1(active0, 0x10000000L, active1, 0L, active2, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_1(active0, 0x1000000000L, active1, 0L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_1(active0, 0x800000000000000L, active1, 0x2828L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_1(active0, 0x200040000000000L, active1, 0x1000L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa3_1(active0, 0x800000L, active1, 0L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_1(active0, 0x40180c00000000L, active1, 0x10L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_1(active0, 0x9000200008000000L, active1, 0L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_1(active0, 0x6000000000000L, active1, 0x4L, active2, 0L);
      case 114:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_1(2, 46, 229);
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0xc2L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_1(active0, 0x8008046000000L, active1, 0x600000L, active2, 0L);
      case 116:
         if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_1(active0, 0x40a08200a0000000L, active1, 0x180000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_1(active0, 0x14000000000L, active1, 0x200L, active2, 0L);
      case 119:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_1(2, 56, 229);
         break;
      case 121:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_1(2, 74, 229);
         break;
      default :
         break;
   }
   return jjStartNfa_1(1, active0, active1, active2);
}
private int jjMoveStringLiteralDfa3_1(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_1(1, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(2, active0, active1, active2);
      return 3;
   }
   switch(curChar)
   {
      case 61:
         if ((active2 & 0x2000000L) != 0L)
            return jjStopAtPos(3, 153);
         break;
      case 97:
         return jjMoveStringLiteralDfa4_1(active0, 0x381010000000L, active1, 0x1000L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa4_1(active0, 0x4000000000L, active1, 0L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_1(active0, 0x80000000L, active1, 0x10L, active2, 0L);
      case 100:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_1(3, 75, 229);
         break;
      case 101:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_1(3, 29, 229);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_1(3, 30, 229);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_1(3, 39, 229);
         else if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_1(3, 73, 229);
         return jjMoveStringLiteralDfa4_1(active0, 0x20020004000000L, active1, 0x4L, active2, 0L);
      case 103:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_1(3, 54, 229);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_1(active0, 0x80000000000000L, active1, 0x2L, active2, 0L);
      case 107:
         return jjMoveStringLiteralDfa4_1(active0, 0x400000000000000L, active1, 0L, active2, 0L);
      case 108:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_1(3, 57, 229);
         return jjMoveStringLiteralDfa4_1(active0, 0x2002000008000000L, active1, 0x2000L, active2, 0L);
      case 109:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_1(3, 40, 229);
         return jjMoveStringLiteralDfa4_1(active0, 0L, active1, 0x180000L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa4_1(active0, 0L, active1, 0x100L, active2, 0L);
      case 111:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_1(3, 47, 229);
         return jjMoveStringLiteralDfa4_1(active0, 0x4000000000000L, active1, 0xc0L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa4_1(active0, 0x800000L, active1, 0L, active2, 0L);
      case 114:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_1(3, 32, 229);
         return jjMoveStringLiteralDfa4_1(active0, 0x8000000000000000L, active1, 0L, active2, 0L);
      case 115:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_1(3, 69, 229);
         return jjMoveStringLiteralDfa4_1(active0, 0x40600000000L, active1, 0x600000L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa4_1(active0, 0x1008000802000000L, active1, 0x9L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_1(active0, 0x4000000000000000L, active1, 0L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa4_1(active0, 0x800000000000000L, active1, 0x60000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_1(2, active0, active1, active2);
}
private int jjMoveStringLiteralDfa4_1(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_1(2, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(3, active0, active1, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 58:
         if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_1(4, 85, 222);
         break;
      case 96:
         if ((active1 & 0x400000L) != 0L)
            return jjStopAtPos(4, 86);
         break;
      case 97:
         return jjMoveStringLiteralDfa5_1(active0, 0xc08000000000000L, active1, 0x60000L);
      case 99:
         return jjMoveStringLiteralDfa5_1(active0, 0L, active1, 0xaL);
      case 101:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_1(4, 42, 229);
         else if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_1(4, 77, 229);
         return jjMoveStringLiteralDfa5_1(active0, 0x1002000008000000L, active1, 0L);
      case 104:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_1(4, 31, 229);
         return jjMoveStringLiteralDfa5_1(active0, 0L, active1, 0x10L);
      case 105:
         return jjMoveStringLiteralDfa5_1(active0, 0x2000000800000000L, active1, 0x1L);
      case 107:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_1(4, 28, 229);
         break;
      case 108:
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_1(active0, 0x104000000000L, active1, 0x180000L);
      case 110:
         return jjMoveStringLiteralDfa5_1(active0, 0x20000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa5_1(active0, 0x800000L, active1, 0L);
      case 114:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_1(4, 66, 229);
         return jjMoveStringLiteralDfa5_1(active0, 0x4024000006000000L, active1, 0L);
      case 115:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_1(4, 33, 229);
         return jjMoveStringLiteralDfa5_1(active0, 0L, active1, 0x100L);
      case 116:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_1(4, 34, 229);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_1(4, 45, 229);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_1(4, 63, 229);
         return jjMoveStringLiteralDfa5_1(active0, 0L, active1, 0x1000L);
      case 117:
         return jjMoveStringLiteralDfa5_1(active0, 0x1000000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa5_1(active0, 0x80000000000000L, active1, 0L);
      case 119:
         if ((active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_1(active0, 0L, active1, 0x80L);
      default :
         break;
   }
   return jjStartNfa_1(3, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa5_1(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(3, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(4, active0, active1, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 58:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_1(5, 81, 222);
         else if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_1(5, 83, 222);
         break;
      case 96:
         if ((active1 & 0x40000L) != 0L)
            return jjStopAtPos(5, 82);
         else if ((active1 & 0x100000L) != 0L)
            return jjStopAtPos(5, 84);
         break;
      case 97:
         return jjMoveStringLiteralDfa6_1(active0, 0xa000000L, active1, 0L);
      case 99:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_1(5, 61, 229);
         else if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_1(5, 64, 229);
         return jjMoveStringLiteralDfa6_1(active0, 0x1000000000000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa6_1(active0, 0x20000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_1(5, 38, 229);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_1(5, 55, 229);
         break;
      case 102:
         return jjMoveStringLiteralDfa6_1(active0, 0x20000000000000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa6_1(active0, 0x400000000000000L, active1, 0L);
      case 104:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_1(5, 67, 229);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_1(active0, 0L, active1, 0x1100L);
      case 108:
         return jjMoveStringLiteralDfa6_1(active0, 0x101000000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa6_1(active0, 0x2000000000000L, active1, 0L);
      case 110:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_1(5, 62, 229);
         return jjMoveStringLiteralDfa6_1(active0, 0x8000800000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa6_1(active0, 0x800000L, active1, 0x10L);
      case 115:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_1(5, 71, 229);
         break;
      case 116:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_1(5, 26, 229);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_1(5, 50, 229);
         return jjMoveStringLiteralDfa6_1(active0, 0x800000000000000L, active1, 0x2L);
      default :
         break;
   }
   return jjStartNfa_1(4, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa6_1(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(4, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(5, active0, active1, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_1(active0, 0x20000000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa7_1(active0, 0x8000002000000L, active1, 0L);
      case 101:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_1(6, 58, 229);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_1(6, 59, 229);
         return jjMoveStringLiteralDfa7_1(active0, 0x2000000000000L, active1, 0x100L);
      case 102:
         return jjMoveStringLiteralDfa7_1(active0, 0L, active1, 0x2L);
      case 108:
         return jjMoveStringLiteralDfa7_1(active0, 0L, active1, 0x1000L);
      case 110:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_1(6, 27, 229);
         break;
      case 111:
         return jjMoveStringLiteralDfa7_1(active0, 0L, active1, 0x10L);
      case 115:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_1(6, 41, 229);
         break;
      case 116:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_1(6, 36, 229);
         return jjMoveStringLiteralDfa7_1(active0, 0x1000000000800000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa7_1(active0, 0x800000000L, active1, 0L);
      case 121:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_1(6, 44, 229);
         break;
      default :
         break;
   }
   return jjStartNfa_1(5, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa7_1(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(5, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(6, active0, active1, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa8_1(active0, 0x800000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa8_1(active0, 0x20000000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_1(7, 35, 229);
         else if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_1(7, 76, 229);
         return jjMoveStringLiteralDfa8_1(active0, 0x1008000000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa8_1(active0, 0x2000000000000L, active1, 0x110L);
      case 112:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_1(7, 65, 229);
         break;
      case 116:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_1(7, 25, 229);
         break;
      default :
         break;
   }
   return jjStartNfa_1(6, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa8_1(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(6, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(7, active0, active1, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_1(8, 60, 229);
         break;
      case 101:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_1(8, 53, 229);
         break;
      case 105:
         return jjMoveStringLiteralDfa9_1(active0, 0L, active1, 0x10L);
      case 110:
         return jjMoveStringLiteralDfa9_1(active0, 0x800000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa9_1(active0, 0x8000000000000L, active1, 0L);
      case 116:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_1(8, 72, 229);
         return jjMoveStringLiteralDfa9_1(active0, 0x2000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_1(7, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa9_1(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(7, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(8, active0, active1, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 102:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_1(9, 51, 229);
         break;
      case 115:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_1(9, 49, 229);
         break;
      case 116:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(9, 23);
         break;
      case 122:
         return jjMoveStringLiteralDfa10_1(active0, 0L, active1, 0x10L);
      default :
         break;
   }
   return jjStartNfa_1(8, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa10_1(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(8, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(9, 0L, active1, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa11_1(active1, 0x10L);
      default :
         break;
   }
   return jjStartNfa_1(9, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa11_1(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_1(9, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(10, 0L, active1, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 100:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_1(11, 68, 229);
         break;
      default :
         break;
   }
   return jjStartNfa_1(10, 0L, active1, 0L);
}
private int jjStartNfaWithStates_1(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_1(state, pos + 1);
}
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 219;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 26:
                  if ((0x3ff200000000000L & l) != 0L)
                  {
                     if (kind > 19)
                        kind = 19;
                     { jjCheckNAddStates(403, 406); }
                  }
                  else if (curChar == 58)
                     { jjCheckNAdd(24); }
                  if (curChar == 58)
                     { jjCheckNAddTwoStates(14, 25); }
                  break;
               case 221:
                  if ((0x3ff00100fffc1ffL & l) != 0L)
                  {
                     if (kind > 106)
                        kind = 106;
                     { jjCheckNAdd(176); }
                  }
                  else if ((0x240000000000L & l) != 0L)
                     { jjCheckNAddStates(407, 409); }
                  else if (curChar == 58)
                     { jjCheckNAdd(32); }
                  if (curChar == 36)
                     { jjCheckNAddStates(410, 413); }
                  else if (curChar == 45)
                  {
                     if (kind > 19)
                        kind = 19;
                     { jjCheckNAddStates(414, 419); }
                  }
                  break;
               case 114:
                  if ((0x3ff00100fffc1ffL & l) != 0L)
                  {
                     if (kind > 106)
                        kind = 106;
                     { jjCheckNAdd(176); }
                  }
                  else if ((0x240000000000L & l) != 0L)
                     { jjCheckNAddStates(407, 409); }
                  else if (curChar == 58)
                     { jjCheckNAdd(32); }
                  if (curChar == 36)
                     { jjCheckNAddStates(410, 413); }
                  else if (curChar == 45)
                  {
                     if (kind > 19)
                        kind = 19;
                     { jjCheckNAddStates(414, 419); }
                  }
                  break;
               case 126:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 131;
                  else if (curChar == 47)
                  {
                     if (kind > 6)
                        kind = 6;
                     { jjCheckNAddStates(420, 422); }
                  }
                  break;
               case 230:
                  if ((0x3ff200000000000L & l) != 0L)
                  {
                     if (kind > 19)
                        kind = 19;
                     { jjCheckNAddStates(423, 428); }
                  }
                  else if ((0x4400080000000000L & l) != 0L)
                     { jjCheckNAddStates(429, 431); }
                  else if ((0x400800000000L & l) != 0L)
                     { jjCheckNAddTwoStates(17, 21); }
                  if ((0x3ff200000000000L & l) != 0L)
                  {
                     if (kind > 19)
                        kind = 19;
                     { jjCheckNAddStates(432, 435); }
                  }
                  else if (curChar == 58)
                     { jjCheckNAddStates(436, 438); }
                  if (curChar == 58)
                     { jjCheckNAddTwoStates(19, 20); }
                  break;
               case 222:
               case 102:
                  { jjCheckNAddStates(439, 441); }
                  break;
               case 118:
                  if ((0x3ff00100fffc1ffL & l) != 0L)
                  {
                     if (kind > 106)
                        kind = 106;
                     { jjCheckNAdd(176); }
                  }
                  else if ((0x240000000000L & l) != 0L)
                     { jjCheckNAddStates(407, 409); }
                  else if (curChar == 58)
                     { jjCheckNAdd(32); }
                  if (curChar == 36)
                     { jjCheckNAddStates(410, 413); }
                  else if (curChar == 45)
                  {
                     if (kind > 19)
                        kind = 19;
                     { jjCheckNAddStates(414, 419); }
                  }
                  break;
               case 224:
                  if ((0x3ff200000000000L & l) != 0L)
                  {
                     if (kind > 19)
                        kind = 19;
                     { jjCheckNAddStates(403, 406); }
                  }
                  else if (curChar == 58)
                  {
                     if (kind > 19)
                        kind = 19;
                     { jjCheckNAddStates(403, 406); }
                  }
                  if (curChar == 58)
                     { jjCheckNAdd(24); }
                  break;
               case 220:
                  if ((0x3ff00100fffc1ffL & l) != 0L)
                  {
                     if (kind > 106)
                        kind = 106;
                     { jjCheckNAdd(176); }
                  }
                  else if ((0x240000000000L & l) != 0L)
                     { jjCheckNAddStates(407, 409); }
                  else if (curChar == 58)
                     { jjCheckNAdd(32); }
                  if (curChar == 36)
                     { jjCheckNAddStates(410, 413); }
                  else if (curChar == 45)
                  {
                     if (kind > 19)
                        kind = 19;
                     { jjCheckNAddStates(414, 419); }
                  }
                  break;
               case 219:
                  if ((0x3ff200000000000L & l) != 0L)
                  {
                     if (kind > 19)
                        kind = 19;
                     { jjCheckNAddStates(403, 406); }
                  }
                  else if (curChar == 58)
                     { jjCheckNAdd(24); }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 98)
                        kind = 98;
                     { jjCheckNAddStates(442, 445); }
                  }
                  break;
               case 108:
                  if ((0x3ff00100fffc1ffL & l) != 0L)
                  {
                     if (kind > 106)
                        kind = 106;
                     { jjCheckNAdd(176); }
                  }
                  else if ((0x240000000000L & l) != 0L)
                     { jjCheckNAddStates(407, 409); }
                  else if (curChar == 58)
                     { jjCheckNAdd(32); }
                  if (curChar == 36)
                     { jjCheckNAddStates(410, 413); }
                  else if (curChar == 45)
                  {
                     if (kind > 19)
                        kind = 19;
                     { jjCheckNAddStates(414, 419); }
                  }
                  break;
               case 38:
                  if ((0x3ff00100fffc1ffL & l) != 0L)
                  {
                     if (kind > 106)
                        kind = 106;
                     { jjCheckNAdd(176); }
                  }
                  else if ((0x240000000000L & l) != 0L)
                     { jjCheckNAddStates(407, 409); }
                  else if (curChar == 58)
                     { jjCheckNAdd(32); }
                  if (curChar == 36)
                     { jjCheckNAddStates(410, 413); }
                  else if (curChar == 45)
                  {
                     if (kind > 19)
                        kind = 19;
                     { jjCheckNAddStates(414, 419); }
                  }
                  break;
               case 223:
                  if ((0x3ff00100fffc1ffL & l) != 0L)
                  {
                     if (kind > 106)
                        kind = 106;
                     { jjCheckNAdd(176); }
                  }
                  else if ((0x240000000000L & l) != 0L)
                     { jjCheckNAddStates(407, 409); }
                  if (curChar == 36)
                     { jjCheckNAddStates(410, 413); }
                  break;
               case 227:
                  if ((0x3ff00100fffc1ffL & l) != 0L)
                     { jjCheckNAddStates(410, 413); }
                  else if ((0x240000000000L & l) != 0L)
                     { jjCheckNAddStates(407, 409); }
                  else if (curChar == 58)
                     { jjCheckNAdd(32); }
                  if ((0x3ff00100fffc1ffL & l) != 0L)
                  {
                     if (kind > 106)
                        kind = 106;
                     { jjCheckNAdd(176); }
                  }
                  else if (curChar == 42)
                  {
                     if (kind > 107)
                        kind = 107;
                  }
                  else if (curChar == 45)
                  {
                     if (kind > 19)
                        kind = 19;
                     { jjCheckNAddStates(414, 419); }
                  }
                  if (curChar == 36)
                  {
                     if (kind > 107)
                        kind = 107;
                     { jjCheckNAddStates(446, 450); }
                  }
                  break;
               case 226:
                  if ((0x3ff200000000000L & l) != 0L)
                  {
                     if (kind > 19)
                        kind = 19;
                     { jjCheckNAddStates(423, 428); }
                  }
                  else if ((0x4400080000000000L & l) != 0L)
                     { jjCheckNAddStates(429, 431); }
                  else if ((0x400800000000L & l) != 0L)
                     { jjCheckNAddTwoStates(17, 21); }
                  if (curChar == 58)
                     { jjCheckNAddStates(436, 438); }
                  break;
               case 225:
                  if ((0x3ff00100fffc1ffL & l) != 0L)
                     { jjCheckNAddStates(410, 413); }
                  else if ((0x240000000000L & l) != 0L)
                     { jjCheckNAddStates(407, 409); }
                  else if (curChar == 58)
                     { jjCheckNAdd(32); }
                  if ((0x3ff00100fffc1ffL & l) != 0L)
                  {
                     if (kind > 106)
                        kind = 106;
                     { jjCheckNAdd(176); }
                  }
                  else if (curChar == 42)
                  {
                     if (kind > 107)
                        kind = 107;
                  }
                  else if (curChar == 45)
                  {
                     if (kind > 19)
                        kind = 19;
                     { jjCheckNAddStates(414, 419); }
                  }
                  if (curChar == 36)
                  {
                     if (kind > 107)
                        kind = 107;
                     { jjCheckNAddStates(446, 450); }
                  }
                  break;
               case 229:
                  if ((0x3ff00100fffc1ffL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     { jjCheckNAdd(182); }
                  }
                  else if ((0x240000000000L & l) != 0L)
                     { jjCheckNAddStates(407, 409); }
                  else if (curChar == 58)
                     { jjCheckNAdd(32); }
                  if ((0x3ff00100fffc1ffL & l) != 0L)
                     { jjCheckNAddStates(410, 413); }
                  else if (curChar == 42)
                  {
                     if (kind > 107)
                        kind = 107;
                  }
                  else if (curChar == 45)
                  {
                     if (kind > 19)
                        kind = 19;
                     { jjCheckNAddStates(414, 419); }
                  }
                  if ((0x3ff00100fffc1ffL & l) != 0L)
                  {
                     if (kind > 106)
                        kind = 106;
                     { jjCheckNAdd(176); }
                  }
                  if (curChar == 36)
                  {
                     if (kind > 107)
                        kind = 107;
                     { jjCheckNAddStates(446, 450); }
                  }
                  break;
               case 9:
                  if (curChar == 45)
                     { jjCheckNAdd(10); }
                  break;
               case 121:
                  if ((0x3ff00100fffc1ffL & l) != 0L)
                  {
                     if (kind > 106)
                        kind = 106;
                     { jjCheckNAdd(176); }
                  }
                  else if ((0x240000000000L & l) != 0L)
                     { jjCheckNAddStates(407, 409); }
                  else if (curChar == 58)
                     { jjCheckNAdd(32); }
                  if (curChar == 36)
                     { jjCheckNAddStates(410, 413); }
                  else if (curChar == 45)
                  {
                     if (kind > 19)
                        kind = 19;
                     { jjCheckNAddStates(414, 419); }
                  }
                  break;
               case 42:
                  if ((0x3ff00100fffc1ffL & l) != 0L)
                  {
                     if (kind > 106)
                        kind = 106;
                     { jjCheckNAdd(176); }
                  }
                  else if ((0x240000000000L & l) != 0L)
                     { jjCheckNAddStates(407, 409); }
                  else if (curChar == 58)
                     { jjCheckNAdd(32); }
                  if (curChar == 36)
                     { jjCheckNAddStates(410, 413); }
                  else if (curChar == 45)
                  {
                     if (kind > 19)
                        kind = 19;
                     { jjCheckNAddStates(414, 419); }
                  }
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 93)
                        kind = 93;
                     { jjCheckNAddStates(451, 465); }
                  }
                  else if ((0x400400800000000L & l) != 0L)
                     { jjCheckNAddTwoStates(14, 25); }
                  else if ((0x4000080000000000L & l) != 0L)
                  {
                     if (kind > 20)
                        kind = 20;
                  }
                  else if (curChar == 36)
                  {
                     if (kind > 106)
                        kind = 106;
                     { jjCheckNAddStates(466, 468); }
                  }
                  else if (curChar == 47)
                     { jjAddStates(469, 470); }
                  else if (curChar == 34)
                     { jjCheckNAddStates(471, 474); }
                  else if (curChar == 39)
                     { jjAddStates(475, 477); }
                  else if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 49;
                  else if (curChar == 37)
                  {
                     if (kind > 24)
                        kind = 24;
                  }
                  else if (curChar == 45)
                     { jjCheckNAddTwoStates(9, 10); }
                  if (curChar == 48)
                     { jjAddStates(478, 485); }
                  else if (curChar == 46)
                     { jjCheckNAdd(60); }
                  else if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 26;
                  else if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 228:
                  if ((0x3ff00100fffc1ffL & l) != 0L)
                     { jjCheckNAddStates(410, 413); }
                  else if ((0x240000000000L & l) != 0L)
                     { jjCheckNAddStates(407, 409); }
                  else if (curChar == 58)
                     { jjCheckNAdd(32); }
                  if ((0x3ff00100fffc1ffL & l) != 0L)
                  {
                     if (kind > 106)
                        kind = 106;
                     { jjCheckNAdd(176); }
                  }
                  else if (curChar == 42)
                  {
                     if (kind > 107)
                        kind = 107;
                  }
                  else if (curChar == 45)
                  {
                     if (kind > 19)
                        kind = 19;
                     { jjCheckNAddStates(414, 419); }
                  }
                  if (curChar == 36)
                  {
                     if (kind > 107)
                        kind = 107;
                     { jjCheckNAddStates(446, 450); }
                  }
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjAddStates(486, 487); }
                  break;
               case 2:
               case 7:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(3); }
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) != 0L && kind > 17)
                     kind = 17;
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 8:
                  if (curChar == 45)
                     { jjCheckNAddTwoStates(9, 10); }
                  break;
               case 11:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 18)
                     kind = 18;
                  { jjCheckNAddTwoStates(11, 10); }
                  break;
               case 13:
                  if ((0x400400800000000L & l) != 0L)
                     { jjCheckNAddTwoStates(14, 25); }
                  break;
               case 14:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 19)
                     kind = 19;
                  { jjCheckNAddStates(403, 406); }
                  break;
               case 15:
                  if ((0x4400080000000000L & l) != 0L)
                     { jjCheckNAddStates(429, 431); }
                  break;
               case 16:
                  if ((0x400800000000L & l) != 0L)
                     { jjCheckNAddTwoStates(17, 21); }
                  break;
               case 17:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 19)
                     kind = 19;
                  { jjCheckNAddStates(432, 435); }
                  break;
               case 18:
                  if (curChar == 58)
                     { jjCheckNAddTwoStates(19, 20); }
                  break;
               case 19:
                  if (curChar == 58)
                     { jjCheckNAddStates(429, 431); }
                  break;
               case 20:
                  if (curChar != 58)
                     break;
                  if (kind > 19)
                     kind = 19;
                  { jjCheckNAddStates(432, 435); }
                  break;
               case 21:
                  if (curChar == 58)
                     { jjCheckNAdd(20); }
                  break;
               case 22:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 19)
                     kind = 19;
                  { jjCheckNAddStates(423, 428); }
                  break;
               case 23:
                  if (curChar == 58)
                     { jjCheckNAddStates(436, 438); }
                  break;
               case 24:
                  if (curChar != 58)
                     break;
                  if (kind > 19)
                     kind = 19;
                  { jjCheckNAddStates(403, 406); }
                  break;
               case 25:
                  if (curChar == 58)
                     { jjCheckNAdd(24); }
                  break;
               case 27:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 29:
                  if (curChar != 45)
                     break;
                  if (kind > 19)
                     kind = 19;
                  { jjCheckNAddStates(414, 419); }
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 19)
                     kind = 19;
                  { jjCheckNAddStates(414, 419); }
                  break;
               case 32:
                  if (curChar != 58)
                     break;
                  if (kind > 19)
                     kind = 19;
                  { jjCheckNAddStates(414, 419); }
                  break;
               case 33:
                  if (curChar == 58)
                     { jjCheckNAdd(32); }
                  break;
               case 34:
                  if (curChar == 58)
                     { jjCheckNAdd(32); }
                  break;
               case 35:
                  if ((0x4000080000000000L & l) != 0L && kind > 20)
                     kind = 20;
                  break;
               case 44:
                  if (curChar == 37 && kind > 24)
                     kind = 24;
                  break;
               case 49:
                  if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 57:
                  if (curChar == 32 && kind > 78)
                     kind = 78;
                  break;
               case 58:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 59:
                  if (curChar == 46)
                     { jjCheckNAdd(60); }
                  break;
               case 60:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  { jjCheckNAddStates(442, 445); }
                  break;
               case 61:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(61, 62); }
                  break;
               case 62:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  { jjCheckNAddStates(488, 490); }
                  break;
               case 64:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(65); }
                  break;
               case 65:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  { jjCheckNAddStates(491, 493); }
                  break;
               case 66:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(66, 67); }
                  break;
               case 67:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  { jjCheckNAddTwoStates(65, 68); }
                  break;
               case 69:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  { jjCheckNAddStates(494, 497); }
                  break;
               case 70:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  { jjCheckNAddStates(498, 502); }
                  break;
               case 71:
                  if (curChar == 39)
                     { jjAddStates(475, 477); }
                  break;
               case 72:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     { jjCheckNAdd(73); }
                  break;
               case 73:
                  if (curChar == 39 && kind > 103)
                     kind = 103;
                  break;
               case 75:
                  if ((0x8400000000L & l) != 0L)
                     { jjCheckNAdd(73); }
                  break;
               case 76:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(77, 73); }
                  break;
               case 77:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAdd(73); }
                  break;
               case 78:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 79:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAdd(77); }
                  break;
               case 81:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 82:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 83:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 84:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(73); }
                  break;
               case 86:
                  if (curChar == 34)
                     { jjCheckNAddStates(471, 474); }
                  break;
               case 87:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     { jjCheckNAddStates(471, 474); }
                  break;
               case 89:
                  if ((0x8400000000L & l) != 0L)
                     { jjCheckNAddStates(471, 474); }
                  break;
               case 91:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 92:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 93;
                  break;
               case 93:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               case 94:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(471, 474); }
                  break;
               case 96:
                  if (curChar == 34 && kind > 104)
                     kind = 104;
                  break;
               case 97:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(503, 507); }
                  break;
               case 98:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(471, 474); }
                  break;
               case 99:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 100;
                  break;
               case 100:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAdd(98); }
                  break;
               case 125:
                  if (curChar == 47)
                     { jjAddStates(469, 470); }
                  break;
               case 127:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  { jjCheckNAddStates(420, 422); }
                  break;
               case 128:
                  if ((0x2400L & l) != 0L && kind > 6)
                     kind = 6;
                  break;
               case 129:
                  if (curChar == 10 && kind > 6)
                     kind = 6;
                  break;
               case 130:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 129;
                  break;
               case 131:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 132;
                  break;
               case 132:
                  if ((0xffff7fffffffffffL & l) != 0L && kind > 7)
                     kind = 7;
                  break;
               case 133:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 131;
                  break;
               case 134:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 93)
                     kind = 93;
                  { jjCheckNAddStates(451, 465); }
                  break;
               case 135:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(135, 136); }
                  break;
               case 136:
               case 187:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(137); }
                  break;
               case 138:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(138, 139); }
                  break;
               case 139:
               case 198:
                  if ((0x3ff000000000000L & l) != 0L && kind > 93)
                     kind = 93;
                  break;
               case 140:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(140, 141); }
                  break;
               case 141:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(508, 510); }
                  break;
               case 142:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(511, 514); }
                  break;
               case 144:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(145); }
                  break;
               case 145:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(515, 517); }
                  break;
               case 146:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(146, 147); }
                  break;
               case 147:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(145, 68); }
                  break;
               case 148:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(518, 521); }
                  break;
               case 149:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(522, 526); }
                  break;
               case 150:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(150, 151); }
                  break;
               case 151:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(152, 153); }
                  break;
               case 152:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(527, 529); }
                  break;
               case 154:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(155); }
                  break;
               case 155:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  { jjCheckNAddStates(530, 532); }
                  break;
               case 156:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(156, 157); }
                  break;
               case 157:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  { jjCheckNAddTwoStates(155, 68); }
                  break;
               case 158:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  { jjCheckNAddStates(533, 536); }
                  break;
               case 159:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(537, 540); }
                  break;
               case 160:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(160, 161); }
                  break;
               case 161:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(162, 163); }
                  break;
               case 162:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(541, 543); }
                  break;
               case 163:
                  if (curChar != 46)
                     break;
                  if (kind > 98)
                     kind = 98;
                  { jjCheckNAddStates(544, 546); }
                  break;
               case 164:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  { jjCheckNAddStates(547, 550); }
                  break;
               case 165:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(165, 166); }
                  break;
               case 166:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  { jjCheckNAddStates(544, 546); }
                  break;
               case 168:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(169); }
                  break;
               case 169:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  { jjCheckNAddStates(551, 553); }
                  break;
               case 170:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(170, 171); }
                  break;
               case 171:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  { jjCheckNAddTwoStates(169, 68); }
                  break;
               case 172:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  { jjCheckNAddStates(554, 557); }
                  break;
               case 173:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  { jjCheckNAddStates(558, 562); }
                  break;
               case 174:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(563, 566); }
                  break;
               case 175:
                  if (curChar != 36)
                     break;
                  if (kind > 106)
                     kind = 106;
                  { jjCheckNAddStates(466, 468); }
                  break;
               case 176:
                  if ((0x3ff00100fffc1ffL & l) == 0L)
                     break;
                  if (kind > 106)
                     kind = 106;
                  { jjCheckNAdd(176); }
                  break;
               case 177:
                  if (curChar == 36)
                     { jjCheckNAddStates(410, 413); }
                  break;
               case 178:
                  if ((0x3ff00100fffc1ffL & l) != 0L)
                     { jjCheckNAddStates(410, 413); }
                  break;
               case 179:
                  if ((0x240000000000L & l) != 0L)
                     { jjCheckNAddStates(407, 409); }
                  break;
               case 180:
                  if (curChar == 42 && kind > 107)
                     kind = 107;
                  break;
               case 181:
                  if (curChar != 36)
                     break;
                  if (kind > 107)
                     kind = 107;
                  { jjCheckNAddStates(446, 450); }
                  break;
               case 182:
                  if ((0x3ff00100fffc1ffL & l) == 0L)
                     break;
                  if (kind > 107)
                     kind = 107;
                  { jjCheckNAdd(182); }
                  break;
               case 183:
                  if (curChar == 48)
                     { jjAddStates(478, 485); }
                  break;
               case 185:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(567, 569); }
                  break;
               case 186:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(186, 187); }
                  break;
               case 188:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(570, 572); }
                  break;
               case 189:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(189, 190); }
                  break;
               case 190:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAdd(137); }
                  break;
               case 192:
                  if ((0x3000000000000L & l) != 0L)
                     { jjCheckNAddStates(573, 575); }
                  break;
               case 193:
                  if ((0x3000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(193, 194); }
                  break;
               case 194:
                  if ((0x3000000000000L & l) != 0L)
                     { jjCheckNAdd(137); }
                  break;
               case 196:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 93)
                     kind = 93;
                  { jjCheckNAddTwoStates(197, 198); }
                  break;
               case 197:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(197, 198); }
                  break;
               case 199:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 93)
                     kind = 93;
                  { jjCheckNAddTwoStates(200, 201); }
                  break;
               case 200:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(200, 201); }
                  break;
               case 201:
                  if ((0xff000000000000L & l) != 0L && kind > 93)
                     kind = 93;
                  break;
               case 203:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 93)
                     kind = 93;
                  { jjCheckNAddTwoStates(204, 205); }
                  break;
               case 204:
                  if ((0x3000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(204, 205); }
                  break;
               case 205:
                  if ((0x3000000000000L & l) != 0L && kind > 93)
                     kind = 93;
                  break;
               case 207:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjAddStates(576, 577); }
                  break;
               case 208:
                  if (curChar == 46)
                     { jjCheckNAdd(209); }
                  break;
               case 209:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(209, 210); }
                  break;
               case 211:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(212); }
                  break;
               case 212:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  { jjCheckNAddTwoStates(212, 68); }
                  break;
               case 214:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(578, 580); }
                  break;
               case 215:
                  if (curChar == 46)
                     { jjCheckNAdd(216); }
                  break;
               case 217:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(218); }
                  break;
               case 218:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  { jjCheckNAddTwoStates(218, 68); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 26:
               case 14:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 19)
                     kind = 19;
                  { jjCheckNAddStates(403, 406); }
                  break;
               case 221:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(410, 413); }
                  if ((0x87fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 106)
                        kind = 106;
                     { jjCheckNAdd(176); }
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(581, 583); }
                  break;
               case 114:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(410, 413); }
                  if ((0x87fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 106)
                        kind = 106;
                     { jjCheckNAdd(176); }
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(581, 583); }
                  if (curChar == 103)
                  {
                     if (kind > 24)
                        kind = 24;
                  }
                  else if (curChar == 120)
                  {
                     if (kind > 24)
                        kind = 24;
                  }
                  else if (curChar == 109)
                     { jjCheckNAdd(113); }
                  if (curChar == 109)
                  {
                     if (kind > 24)
                        kind = 24;
                  }
                  break;
               case 230:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 19)
                        kind = 19;
                     { jjCheckNAddStates(423, 428); }
                  }
                  else if (curChar == 126)
                     { jjCheckNAddStates(429, 431); }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 19)
                        kind = 19;
                     { jjCheckNAddStates(432, 435); }
                  }
                  break;
               case 222:
                  if ((0xfffffffeffffffffL & l) != 0L)
                     { jjCheckNAddStates(439, 441); }
                  else if (curChar == 96)
                  {
                     if (kind > 105)
                        kind = 105;
                  }
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 103;
                  break;
               case 118:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(410, 413); }
                  if ((0x87fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 106)
                        kind = 106;
                     { jjCheckNAdd(176); }
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(581, 583); }
                  if (curChar == 97)
                     { jjCheckNAdd(40); }
                  else if (curChar == 101)
                     { jjCheckNAdd(36); }
                  break;
               case 224:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 19)
                     kind = 19;
                  { jjCheckNAddStates(403, 406); }
                  break;
               case 220:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(410, 413); }
                  if ((0x87fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 106)
                        kind = 106;
                     { jjCheckNAdd(176); }
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(581, 583); }
                  if (curChar == 109)
                  {
                     if (kind > 24)
                        kind = 24;
                  }
                  break;
               case 219:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 19)
                     kind = 19;
                  { jjCheckNAddStates(403, 406); }
                  break;
               case 108:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(410, 413); }
                  if ((0x87fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 106)
                        kind = 106;
                     { jjCheckNAdd(176); }
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(581, 583); }
                  if (curChar == 99)
                     { jjCheckNAdd(36); }
                  else if (curChar == 105)
                  {
                     if (kind > 24)
                        kind = 24;
                  }
                  else if (curChar == 116)
                  {
                     if (kind > 24)
                        kind = 24;
                  }
                  else if (curChar == 120)
                  {
                     if (kind > 24)
                        kind = 24;
                  }
                  if (curChar == 99)
                  {
                     if (kind > 24)
                        kind = 24;
                  }
                  break;
               case 38:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(410, 413); }
                  if ((0x87fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 106)
                        kind = 106;
                     { jjCheckNAdd(176); }
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(581, 583); }
                  if (curChar == 110)
                  {
                     if (kind > 24)
                        kind = 24;
                  }
                  break;
               case 223:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(410, 413); }
                  if ((0x87fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 106)
                        kind = 106;
                     { jjCheckNAdd(176); }
                  }
                  break;
               case 227:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     { jjCheckNAddStates(446, 450); }
                  }
                  if ((0x87fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(410, 413); }
                  if ((0x87fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 106)
                        kind = 106;
                     { jjCheckNAdd(176); }
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(581, 583); }
                  if (curChar == 109)
                  {
                     if (kind > 24)
                        kind = 24;
                  }
                  break;
               case 226:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 19)
                        kind = 19;
                     { jjCheckNAddStates(423, 428); }
                  }
                  else if (curChar == 126)
                     { jjCheckNAddStates(429, 431); }
                  break;
               case 225:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     { jjCheckNAddStates(446, 450); }
                  }
                  if ((0x87fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(410, 413); }
                  if ((0x87fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 106)
                        kind = 106;
                     { jjCheckNAdd(176); }
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(581, 583); }
                  break;
               case 229:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     { jjCheckNAddStates(446, 450); }
                  }
                  if ((0x87fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     { jjCheckNAdd(182); }
                  }
                  if ((0x87fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(410, 413); }
                  if ((0x87fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 106)
                        kind = 106;
                     { jjCheckNAdd(176); }
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(581, 583); }
                  break;
               case 9:
               case 10:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 18)
                     kind = 18;
                  { jjCheckNAddTwoStates(11, 10); }
                  break;
               case 121:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(410, 413); }
                  if ((0x87fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 106)
                        kind = 106;
                     { jjCheckNAdd(176); }
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(581, 583); }
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 123;
                  else if (curChar == 101)
                     { jjCheckNAdd(115); }
                  if (curChar == 112)
                     { jjCheckNAdd(110); }
                  break;
               case 42:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(410, 413); }
                  if ((0x87fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 106)
                        kind = 106;
                     { jjCheckNAdd(176); }
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(581, 583); }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 106)
                        kind = 106;
                     { jjCheckNAddStates(466, 468); }
                  }
                  else if (curChar == 96)
                     { jjCheckNAddStates(439, 441); }
                  else if (curChar == 126)
                  {
                     if (kind > 20)
                        kind = 20;
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(581, 583); }
                  if (curChar == 100)
                     { jjAddStates(584, 586); }
                  else if (curChar == 114)
                     { jjAddStates(587, 588); }
                  else if (curChar == 109)
                     { jjCheckNAddTwoStates(36, 113); }
                  else if (curChar == 101)
                     { jjCheckNAddStates(589, 592); }
                  else if (curChar == 112)
                     { jjCheckNAddStates(593, 597); }
                  else if (curChar == 107)
                     jjstateSet[jjnewStateCnt++] = 47;
                  else if (curChar == 104)
                     { jjCheckNAdd(45); }
                  else if (curChar == 115)
                  {
                     if (kind > 24)
                        kind = 24;
                  }
                  else if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 42;
                  else if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 38;
                  else if (curChar == 99)
                     { jjCheckNAdd(36); }
                  break;
               case 228:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     { jjCheckNAddStates(446, 450); }
                  }
                  if ((0x87fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(410, 413); }
                  if ((0x87fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 106)
                        kind = 106;
                     { jjCheckNAdd(176); }
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(581, 583); }
                  if (curChar == 103)
                  {
                     if (kind > 24)
                        kind = 24;
                  }
                  break;
               case 1:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjAddStates(486, 487); }
                  break;
               case 2:
               case 7:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAdd(3); }
                  break;
               case 3:
                  if ((0x7e0000007eL & l) != 0L && kind > 17)
                     kind = 17;
                  break;
               case 4:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 5:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 6:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 15:
                  if (curChar == 126)
                     { jjCheckNAddStates(429, 431); }
                  break;
               case 17:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 19)
                     kind = 19;
                  { jjCheckNAddStates(432, 435); }
                  break;
               case 22:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 19)
                     kind = 19;
                  { jjCheckNAddStates(423, 428); }
                  break;
               case 28:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(581, 583); }
                  break;
               case 30:
                  if ((0x7fffffe00000000L & l) == 0L)
                     break;
                  if (kind > 19)
                     kind = 19;
                  { jjCheckNAddStates(414, 419); }
                  break;
               case 31:
                  if ((0x7fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(29, 33); }
                  break;
               case 35:
                  if (curChar == 126 && kind > 20)
                     kind = 20;
                  break;
               case 36:
                  if (curChar == 109 && kind > 24)
                     kind = 24;
                  break;
               case 37:
               case 123:
                  if (curChar == 99)
                     { jjCheckNAdd(36); }
                  break;
               case 39:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 40:
                  if (curChar == 100 && kind > 24)
                     kind = 24;
                  break;
               case 41:
                  if (curChar == 97)
                     { jjCheckNAdd(40); }
                  break;
               case 43:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 44:
               case 113:
                  if (curChar == 115 && kind > 24)
                     kind = 24;
                  break;
               case 45:
                  if (curChar == 122 && kind > 24)
                     kind = 24;
                  break;
               case 46:
               case 47:
                  if (curChar == 104)
                     { jjCheckNAdd(45); }
                  break;
               case 48:
                  if (curChar == 107)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 50:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 51:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 52:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 53:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 54:
                  if ((0x200000002000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 55:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 56:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 61:
                  if (curChar == 95)
                     { jjAddStates(598, 599); }
                  break;
               case 63:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(600, 601); }
                  break;
               case 66:
                  if (curChar == 95)
                     { jjAddStates(602, 603); }
                  break;
               case 68:
                  if ((0x5000000050L & l) != 0L && kind > 98)
                     kind = 98;
                  break;
               case 72:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAdd(73); }
                  break;
               case 74:
                  if (curChar == 92)
                     { jjAddStates(604, 606); }
                  break;
               case 75:
                  if ((0x14404410000000L & l) != 0L)
                     { jjCheckNAdd(73); }
                  break;
               case 80:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 81:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 82:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 83:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 84:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAdd(73); }
                  break;
               case 85:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 87:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(471, 474); }
                  break;
               case 88:
                  if (curChar == 92)
                     { jjAddStates(607, 609); }
                  break;
               case 89:
                  if ((0x14404410000000L & l) != 0L)
                     { jjCheckNAddStates(471, 474); }
                  break;
               case 90:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 91:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 92:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 93;
                  break;
               case 93:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               case 94:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(471, 474); }
                  break;
               case 95:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               case 101:
               case 103:
                  if (curChar == 96)
                     { jjCheckNAddStates(439, 441); }
                  break;
               case 102:
                  if ((0xfffffffeffffffffL & l) != 0L)
                     { jjCheckNAddStates(439, 441); }
                  break;
               case 104:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 103;
                  break;
               case 105:
                  if (curChar == 96 && kind > 105)
                     kind = 105;
                  break;
               case 106:
                  if (curChar == 112)
                     { jjCheckNAddStates(593, 597); }
                  break;
               case 107:
                  if (curChar == 120 && kind > 24)
                     kind = 24;
                  break;
               case 109:
                  if (curChar == 116 && kind > 24)
                     kind = 24;
                  break;
               case 110:
                  if (curChar == 105 && kind > 24)
                     kind = 24;
                  break;
               case 111:
                  if (curChar == 99)
                     { jjCheckNAdd(36); }
                  break;
               case 112:
                  if (curChar == 101)
                     { jjCheckNAddStates(589, 592); }
                  break;
               case 115:
                  if (curChar == 103 && kind > 24)
                     kind = 24;
                  break;
               case 116:
                  if (curChar == 109)
                     { jjCheckNAddTwoStates(36, 113); }
                  break;
               case 117:
                  if (curChar == 114)
                     { jjAddStates(587, 588); }
                  break;
               case 119:
                  if (curChar == 97)
                     { jjCheckNAdd(40); }
                  break;
               case 120:
                  if (curChar == 100)
                     { jjAddStates(584, 586); }
                  break;
               case 122:
                  if (curChar == 112)
                     { jjCheckNAdd(110); }
                  break;
               case 124:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 123;
                  break;
               case 127:
                  if (kind > 6)
                     kind = 6;
                  { jjAddStates(420, 422); }
                  break;
               case 132:
                  if (kind > 7)
                     kind = 7;
                  break;
               case 135:
                  if (curChar == 95)
                     { jjAddStates(610, 611); }
                  break;
               case 137:
                  if ((0x100000001000L & l) != 0L && kind > 92)
                     kind = 92;
                  break;
               case 138:
                  if (curChar == 95)
                     { jjAddStates(612, 613); }
                  break;
               case 140:
                  if (curChar == 95)
                     { jjAddStates(348, 349); }
                  break;
               case 143:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(399, 400); }
                  break;
               case 146:
                  if (curChar == 95)
                     { jjAddStates(614, 615); }
                  break;
               case 150:
                  if (curChar == 95)
                     { jjAddStates(401, 402); }
                  break;
               case 153:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(616, 617); }
                  break;
               case 156:
                  if (curChar == 95)
                     { jjAddStates(618, 619); }
                  break;
               case 160:
                  if (curChar == 95)
                     { jjAddStates(620, 621); }
                  break;
               case 165:
                  if (curChar == 95)
                     { jjAddStates(622, 623); }
                  break;
               case 167:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(624, 625); }
                  break;
               case 170:
                  if (curChar == 95)
                     { jjAddStates(626, 627); }
                  break;
               case 175:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 106)
                     kind = 106;
                  { jjCheckNAddStates(466, 468); }
                  break;
               case 176:
                  if ((0x87fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 106)
                     kind = 106;
                  { jjCheckNAdd(176); }
                  break;
               case 177:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(410, 413); }
                  break;
               case 178:
                  if ((0x87fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(410, 413); }
                  break;
               case 181:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 107)
                     kind = 107;
                  { jjCheckNAddStates(446, 450); }
                  break;
               case 182:
                  if ((0x87fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 107)
                     kind = 107;
                  { jjCheckNAdd(182); }
                  break;
               case 184:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 185;
                  break;
               case 185:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(567, 569); }
                  break;
               case 186:
                  if ((0x7e8000007eL & l) != 0L)
                     { jjCheckNAddTwoStates(186, 187); }
                  break;
               case 187:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAdd(137); }
                  break;
               case 189:
                  if (curChar == 95)
                     { jjAddStates(628, 629); }
                  break;
               case 191:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 192;
                  break;
               case 193:
                  if (curChar == 95)
                     { jjAddStates(630, 631); }
                  break;
               case 195:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 196;
                  break;
               case 196:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 93)
                     kind = 93;
                  { jjCheckNAddTwoStates(197, 198); }
                  break;
               case 197:
                  if ((0x7e8000007eL & l) != 0L)
                     { jjCheckNAddTwoStates(197, 198); }
                  break;
               case 198:
                  if ((0x7e0000007eL & l) != 0L && kind > 93)
                     kind = 93;
                  break;
               case 200:
                  if (curChar == 95)
                     { jjAddStates(632, 633); }
                  break;
               case 202:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 203;
                  break;
               case 204:
                  if (curChar == 95)
                     { jjAddStates(634, 635); }
                  break;
               case 206:
                  if ((0x100000001000000L & l) != 0L)
                     { jjCheckNAddTwoStates(207, 208); }
                  break;
               case 207:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddTwoStates(207, 208); }
                  break;
               case 209:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjAddStates(636, 637); }
                  break;
               case 210:
                  if ((0x1000000010000L & l) != 0L)
                     { jjAddStates(638, 639); }
                  break;
               case 213:
                  if ((0x100000001000000L & l) != 0L)
                     { jjCheckNAdd(214); }
                  break;
               case 214:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(578, 580); }
                  break;
               case 216:
                  if ((0x1000000010000L & l) != 0L)
                     { jjAddStates(640, 641); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 221:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 106)
                        kind = 106;
                     { jjCheckNAdd(176); }
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(410, 413); }
                  break;
               case 114:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 106)
                        kind = 106;
                     { jjCheckNAdd(176); }
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(410, 413); }
                  break;
               case 222:
               case 102:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(439, 441); }
                  break;
               case 118:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 106)
                        kind = 106;
                     { jjCheckNAdd(176); }
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(410, 413); }
                  break;
               case 220:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 106)
                        kind = 106;
                     { jjCheckNAdd(176); }
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(410, 413); }
                  break;
               case 108:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 106)
                        kind = 106;
                     { jjCheckNAdd(176); }
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(410, 413); }
                  break;
               case 38:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 106)
                        kind = 106;
                     { jjCheckNAdd(176); }
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(410, 413); }
                  break;
               case 223:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 106)
                        kind = 106;
                     { jjCheckNAdd(176); }
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(410, 413); }
                  break;
               case 227:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 106)
                        kind = 106;
                     { jjCheckNAdd(176); }
                  }
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(410, 413); }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 107)
                        kind = 107;
                     { jjCheckNAddStates(446, 450); }
                  }
                  break;
               case 225:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 106)
                        kind = 106;
                     { jjCheckNAdd(176); }
                  }
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(410, 413); }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 107)
                        kind = 107;
                     { jjCheckNAddStates(446, 450); }
                  }
                  break;
               case 229:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 106)
                        kind = 106;
                     { jjCheckNAdd(176); }
                  }
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(410, 413); }
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 107)
                        kind = 107;
                     { jjCheckNAdd(182); }
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 107)
                        kind = 107;
                     { jjCheckNAddStates(446, 450); }
                  }
                  break;
               case 121:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 106)
                        kind = 106;
                     { jjCheckNAdd(176); }
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(410, 413); }
                  break;
               case 42:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 106)
                        kind = 106;
                     { jjCheckNAdd(176); }
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(410, 413); }
                  break;
               case 0:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 106)
                     kind = 106;
                  { jjCheckNAddStates(466, 468); }
                  break;
               case 228:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 106)
                        kind = 106;
                     { jjCheckNAdd(176); }
                  }
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(410, 413); }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 107)
                        kind = 107;
                     { jjCheckNAddStates(446, 450); }
                  }
                  break;
               case 72:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 87:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(471, 474); }
                  break;
               case 127:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 6)
                     kind = 6;
                  { jjAddStates(420, 422); }
                  break;
               case 132:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 7)
                     kind = 7;
                  break;
               case 176:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 106)
                     kind = 106;
                  { jjCheckNAdd(176); }
                  break;
               case 177:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(410, 413); }
                  break;
               case 178:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(410, 413); }
                  break;
               case 181:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 107)
                     kind = 107;
                  { jjCheckNAddStates(446, 450); }
                  break;
               case 182:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 107)
                     kind = 107;
                  { jjCheckNAdd(182); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 219 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_4(){
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_4(0x200L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_4(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(1, 9);
         break;
      default :
         return 2;
   }
   return 2;
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, 
"\55\55\76", null, "\74\57", "\74\41\55\55", null, null, null, null, null, "\56\173", 
"\72\173", "\41\151\155\160\157\162\164\141\156\164", null, 
"\141\142\163\164\162\141\143\164", "\141\163\163\145\162\164", "\142\157\157\154\145\141\156", 
"\142\162\145\141\153", "\142\171\164\145", "\143\141\163\145", "\143\141\164\143\150", 
"\143\150\141\162", "\143\154\141\163\163", "\143\157\156\163\164", 
"\143\157\156\164\151\156\165\145", "\144\145\146\141\165\154\164", "\144\157", "\144\157\165\142\154\145", 
"\145\154\163\145", "\145\156\165\155", "\145\170\164\145\156\144\163", "\146\141\154\163\145", 
"\146\151\156\141\154", "\146\151\156\141\154\154\171", "\146\154\157\141\164", "\146\157\162", 
"\147\157\164\157", "\151\146", "\151\155\160\154\145\155\145\156\164\163", 
"\151\155\160\157\162\164", "\151\156\163\164\141\156\143\145\157\146", "\151\156\164", 
"\151\156\164\145\162\146\141\143\145", "\154\157\156\147", "\156\141\164\151\166\145", "\156\145\167", 
"\156\165\154\154", "\160\141\143\153\141\147\145", "\160\162\151\166\141\164\145", 
"\160\162\157\164\145\143\164\145\144", "\160\165\142\154\151\143", "\162\145\164\165\162\156", 
"\163\150\157\162\164", "\163\164\141\164\151\143", "\163\164\162\151\143\164\146\160", 
"\163\165\160\145\162", "\163\167\151\164\143\150", 
"\163\171\156\143\150\162\157\156\151\172\145\144", "\164\150\151\163", "\164\150\162\157\167", "\164\150\162\157\167\163", 
"\164\162\141\156\163\151\145\156\164", "\164\162\165\145", "\164\162\171", "\166\157\151\144", 
"\166\157\154\141\164\151\154\145", "\167\150\151\154\145", null, "\44\56", "\44\72", "\140\152\141\166\141\72", 
"\72\152\141\166\141\140", "\140\150\164\155\154\72", "\72\150\164\155\154\140", "\140\143\163\163\72", 
"\72\143\163\163\140", "\140\100", "\100\140", "\140\74", "\140\173", "\175\140", null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, "\50", "\51", "\173", "\175", "\133", "\135", "\73", "\54", "\56", "\100", 
"\75", "\74", "\41", "\176", "\77", "\72", "\75\75", "\74\75", "\76\75", "\41\75", 
"\174\174", "\46\46", "\53\53", "\55\55", "\53", "\55", "\52", "\57", "\46", "\174", 
"\136", "\45", "\74\74", "\53\75", "\55\75", "\52\75", "\57\75", "\46\75", "\174\75", 
"\136\75", "\45\75", "\74\74\75", "\76\76\75", "\76\76\76\75", "\56\56\56", "\55\76", 
"\72\72", "\76\76\76", "\76\76", "\76", "\32", "\134\134", "\76\140", "\134", "\74\57", 
"\76\72", };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = ASTParser.GTToken.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}
static final int[] jjnextStates = {
   67, 68, 69, 70, 71, 72, 75, 19, 82, 85, 92, 95, 106, 91, 81, 108, 
   109, 111, 58, 65, 38, 39, 46, 47, 23, 25, 36, 116, 120, 123, 127, 131, 
   134, 138, 145, 111, 112, 113, 110, 111, 112, 113, 110, 111, 114, 112, 113, 59, 
   60, 62, 53, 55, 56, 12, 14, 19, 21, 11, 14, 19, 17, 19, 20, 16, 
   17, 19, 20, 11, 12, 14, 19, 21, 38, 39, 49, 46, 47, 74, 75, 19, 
   72, 75, 19, 81, 78, 19, 80, 77, 78, 19, 80, 74, 72, 75, 19, 81, 
   82, 85, 91, 88, 19, 90, 87, 88, 19, 90, 84, 82, 85, 91, 92, 95, 
   106, 96, 99, 19, 97, 99, 19, 105, 102, 19, 104, 101, 102, 19, 104, 96, 
   97, 99, 19, 105, 94, 92, 95, 106, 118, 119, 69, 121, 122, 69, 125, 126, 
   69, 139, 140, 146, 147, 148, 12, 13, 15, 16, 17, 18, 26, 27, 29, 40, 
   48, 50, 67, 68, 70, 71, 72, 73, 76, 77, 78, 79, 82, 83, 86, 87, 
   88, 89, 92, 93, 97, 98, 100, 101, 102, 103, 121, 122, 125, 126, 132, 133, 
   136, 137, 141, 142, 143, 144, 149, 150, 0, 1, 4, 60, 61, 63, 54, 56, 
   57, 13, 15, 20, 22, 112, 113, 114, 111, 112, 113, 114, 111, 112, 115, 113, 
   114, 68, 69, 70, 71, 72, 73, 76, 20, 83, 86, 93, 96, 107, 92, 82, 
   109, 110, 112, 59, 66, 39, 40, 47, 48, 24, 26, 37, 117, 121, 124, 128, 
   132, 135, 139, 146, 12, 15, 20, 18, 20, 21, 17, 18, 20, 21, 12, 13, 
   15, 20, 22, 39, 40, 50, 47, 48, 75, 76, 20, 73, 76, 20, 82, 79, 
   20, 81, 78, 79, 20, 81, 75, 73, 76, 20, 82, 83, 86, 92, 89, 20, 
   91, 88, 89, 20, 91, 85, 83, 86, 92, 93, 96, 107, 97, 100, 20, 98, 
   100, 20, 106, 103, 20, 105, 102, 103, 20, 105, 97, 98, 100, 20, 106, 95, 
   93, 96, 107, 119, 120, 70, 122, 123, 70, 126, 127, 70, 140, 141, 147, 148, 
   149, 13, 14, 16, 17, 18, 19, 27, 28, 30, 41, 49, 51, 68, 69, 71, 
   72, 73, 74, 77, 78, 79, 80, 83, 84, 87, 88, 89, 90, 93, 94, 98, 
   99, 101, 102, 103, 104, 122, 123, 126, 127, 133, 134, 137, 138, 142, 143, 144, 
   145, 150, 151, 15, 16, 22, 23, 179, 180, 181, 178, 179, 180, 181, 30, 31, 
   15, 16, 17, 18, 127, 128, 130, 15, 16, 17, 18, 22, 23, 16, 17, 21, 
   15, 16, 17, 18, 24, 19, 20, 102, 104, 105, 61, 63, 68, 70, 178, 179, 
   182, 180, 181, 135, 136, 137, 138, 139, 140, 143, 68, 150, 153, 160, 163, 174, 
   159, 149, 176, 177, 179, 126, 133, 87, 88, 95, 96, 72, 74, 85, 184, 188, 
   191, 195, 199, 202, 206, 213, 2, 4, 60, 63, 68, 66, 68, 69, 65, 66, 
   68, 69, 60, 61, 63, 68, 70, 87, 88, 98, 95, 96, 142, 143, 68, 140, 
   143, 68, 149, 146, 68, 148, 145, 146, 68, 148, 142, 140, 143, 68, 149, 150, 
   153, 159, 156, 68, 158, 155, 156, 68, 158, 152, 150, 153, 159, 160, 163, 174, 
   164, 167, 68, 165, 167, 68, 173, 170, 68, 172, 169, 170, 68, 172, 164, 165, 
   167, 68, 173, 162, 160, 163, 174, 186, 187, 137, 189, 190, 137, 193, 194, 137, 
   207, 208, 214, 215, 216, 28, 29, 34, 121, 122, 124, 118, 119, 36, 114, 107, 
   115, 107, 108, 109, 110, 111, 61, 62, 64, 65, 66, 67, 75, 76, 78, 89, 
   97, 99, 135, 136, 138, 139, 146, 147, 154, 155, 156, 157, 160, 161, 165, 166, 
   168, 169, 170, 171, 189, 190, 193, 194, 200, 201, 204, 205, 209, 210, 211, 212, 
   217, 218, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec0[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec3[i2] & l2) != 0L);
      case 2:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 4:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 5:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 6:
         return ((jjbitVec8[i2] & l2) != 0L);
      case 7:
         return ((jjbitVec9[i2] & l2) != 0L);
      case 9:
         return ((jjbitVec10[i2] & l2) != 0L);
      case 10:
         return ((jjbitVec11[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec12[i2] & l2) != 0L);
      case 12:
         return ((jjbitVec13[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec14[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec15[i2] & l2) != 0L);
      case 15:
         return ((jjbitVec16[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec17[i2] & l2) != 0L);
      case 17:
         return ((jjbitVec18[i2] & l2) != 0L);
      case 18:
         return ((jjbitVec19[i2] & l2) != 0L);
      case 19:
         return ((jjbitVec20[i2] & l2) != 0L);
      case 20:
         return ((jjbitVec21[i2] & l2) != 0L);
      case 22:
         return ((jjbitVec22[i2] & l2) != 0L);
      case 23:
         return ((jjbitVec23[i2] & l2) != 0L);
      case 24:
         return ((jjbitVec24[i2] & l2) != 0L);
      case 25:
         return ((jjbitVec25[i2] & l2) != 0L);
      case 29:
         return ((jjbitVec26[i2] & l2) != 0L);
      case 30:
         return ((jjbitVec27[i2] & l2) != 0L);
      case 31:
         return ((jjbitVec28[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec29[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec30[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec31[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec32[i2] & l2) != 0L);
      case 77:
         return ((jjbitVec33[i2] & l2) != 0L);
      case 159:
         return ((jjbitVec34[i2] & l2) != 0L);
      case 164:
         return ((jjbitVec35[i2] & l2) != 0L);
      case 215:
         return ((jjbitVec36[i2] & l2) != 0L);
      case 216:
         return ((jjbitVec37[i2] & l2) != 0L);
      case 250:
         return ((jjbitVec38[i2] & l2) != 0L);
      case 251:
         return ((jjbitVec39[i2] & l2) != 0L);
      case 253:
         return ((jjbitVec40[i2] & l2) != 0L);
      case 254:
         return ((jjbitVec41[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec42[i2] & l2) != 0L);
      default :
         if ((jjbitVec1[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec43[i2] & l2) != 0L);
      case 2:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec44[i2] & l2) != 0L);
      case 4:
         return ((jjbitVec45[i2] & l2) != 0L);
      case 5:
         return ((jjbitVec46[i2] & l2) != 0L);
      case 6:
         return ((jjbitVec47[i2] & l2) != 0L);
      case 7:
         return ((jjbitVec48[i2] & l2) != 0L);
      case 9:
         return ((jjbitVec49[i2] & l2) != 0L);
      case 10:
         return ((jjbitVec50[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec51[i2] & l2) != 0L);
      case 12:
         return ((jjbitVec52[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec53[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec54[i2] & l2) != 0L);
      case 15:
         return ((jjbitVec55[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec56[i2] & l2) != 0L);
      case 17:
         return ((jjbitVec18[i2] & l2) != 0L);
      case 18:
         return ((jjbitVec19[i2] & l2) != 0L);
      case 19:
         return ((jjbitVec57[i2] & l2) != 0L);
      case 20:
         return ((jjbitVec21[i2] & l2) != 0L);
      case 22:
         return ((jjbitVec22[i2] & l2) != 0L);
      case 23:
         return ((jjbitVec58[i2] & l2) != 0L);
      case 24:
         return ((jjbitVec59[i2] & l2) != 0L);
      case 25:
         return ((jjbitVec60[i2] & l2) != 0L);
      case 29:
         return ((jjbitVec26[i2] & l2) != 0L);
      case 30:
         return ((jjbitVec27[i2] & l2) != 0L);
      case 31:
         return ((jjbitVec28[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec61[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec30[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec62[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec32[i2] & l2) != 0L);
      case 77:
         return ((jjbitVec33[i2] & l2) != 0L);
      case 159:
         return ((jjbitVec34[i2] & l2) != 0L);
      case 164:
         return ((jjbitVec35[i2] & l2) != 0L);
      case 215:
         return ((jjbitVec36[i2] & l2) != 0L);
      case 216:
         return ((jjbitVec63[i2] & l2) != 0L);
      case 220:
         return ((jjbitVec64[i2] & l2) != 0L);
      case 221:
         return ((jjbitVec65[i2] & l2) != 0L);
      case 250:
         return ((jjbitVec38[i2] & l2) != 0L);
      case 251:
         return ((jjbitVec66[i2] & l2) != 0L);
      case 253:
         return ((jjbitVec40[i2] & l2) != 0L);
      case 254:
         return ((jjbitVec67[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec68[i2] & l2) != 0L);
      default :
         if ((jjbitVec1[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_3(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec0[i2] & l2) != 0L);
      default :
         if ((jjbitVec21[i1] & l1) != 0L)
            return true;
         return false;
   }
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(Exception e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      CommonTokenAction(matchedToken);
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         break;
       case 3:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         break;
       case 4:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_4();
         if (jjmatchedPos == 0 && jjmatchedKind > 13)
         {
            jjmatchedKind = 13;
         }
         break;
       case 5:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_5();
         if (jjmatchedPos == 0 && jjmatchedKind > 13)
         {
            jjmatchedKind = 13;
         }
         break;
       case 6:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_6();
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           CommonTokenAction(matchedToken);
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        MoreLexicalActions();
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      case 7 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                   input_stream.backup(1);
         break;
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 14 :
        image.append(jjstrLiteralImages[14]);
        lengthOfMatch = jjstrLiteralImages[14].length();
                           input_stream.backup(2);
         break;
      case 89 :
        image.append(jjstrLiteralImages[89]);
        lengthOfMatch = jjstrLiteralImages[89].length();
                       input_stream.backup(1);
         break;
      case 157 :
        image.append(jjstrLiteralImages[157]);
        lengthOfMatch = jjstrLiteralImages[157].length();
     matchedToken.kind = GT;
     ((ASTParser.GTToken)matchedToken).realKind = RUNSIGNEDSHIFT;
     input_stream.backup(2);
         break;
      case 158 :
        image.append(jjstrLiteralImages[158]);
        lengthOfMatch = jjstrLiteralImages[158].length();
     matchedToken.kind = GT;
     ((ASTParser.GTToken)matchedToken).realKind = RSIGNEDSHIFT;
     input_stream.backup(1);
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public ASTParserTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public ASTParserTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  
  public void ReInit(SimpleCharStream stream)
  {


    jjmatchedPos =
    jjnewStateCnt =
    0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 219; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 7 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }


/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "CSS_BODY",
   "UI_BODY",
   "JSON_BODY",
   "IN_JAVA_DOC_COMMENT",
   "IN_MULTI_LINE_COMMENT",
   "UI_COMMENT_MODE",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, 4, 5, 0, 0, -1, -1, -1, 0, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffffffffffffd801L, 0xffffcf843fffffffL, 0x3fffffffffL, 
};
static final long[] jjtoSkip = {
   0x67eL, 0x0L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x640L, 0x0L, 0x0L, 
};
static final long[] jjtoMore = {
   0x2180L, 0x0L, 0x0L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[219];
    private final int[] jjstateSet = new int[2 * 219];
    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    protected int curChar;
}
