import org.gradle.api.tasks.SourceSet;

plugins {
    id	"java-library"// GenInclude net.wti.gradle.settings.plugin.XapiSettingsPlugin adding java-library b/c api dependencies used
}
// GenStart net.wti.gradle.settings.plugin.XapiSettingsPlugin
ext.xapiModern = 'true'

apply from: "$rootDir/gradle/xapi-modern.gradle"
String repo = project.findProperty("xapi.mvn.repo")
if (repo) {
    repositories {
        maven {
            name = 'xapiLocal'
            url = repo
        }
    }
}
plugins.apply 'java-library'
java.toolchain.languageVersion = JavaLanguageVersion.of(8)
repositories.mavenCentral()

SourceSet main = sourceSets.maybeCreate('main');


SourceSet test = sourceSets.maybeCreate('test');

main.java.setSrcDirs([]);
main.resources.setSrcDirs([]);
test.java.setSrcDirs([]);
test.resources.setSrcDirs([]);
main.java.srcDir("$rootDir/jre/uber/src/main/java")
main.resources.srcDir("$rootDir/jre/uber/src/main/resources")
test.java.srcDir("$rootDir/jre/uber/src/test/java")
test.resources.srcDir("$rootDir/jre/uber/src/test/resources")

dependencies {
    api project(path: ":base-jre")
    api project(path: ":process-jre")
    api project(path: ":collect-jre")
    api project(path: ":model-jre")
    api project(path: ":io-jre")
    api project(path: ":dev:scanner-main")
    api project(path: ":ui:javafx")
    testImplementation project(path: ":base-testTools")
    testImplementation project(path: ":model-jre")
}

// Setup publishing to coordinates(net.wetheinter): net.wetheinter:xapi-jre-uber
// GenEnd net.wti.gradle.settings.plugin.XapiSettingsPlugin
// GenInclude body.end from file:///opt/xapi/jre/uber/src/gradle/main/body.end
tasks.named("test", Test).configure {
    Test t ->
        t.maxHeapSize("6G")
}
// Done generating buildfile for :jre:uber at file://$rootDir/jre/uber/uber.gradle
