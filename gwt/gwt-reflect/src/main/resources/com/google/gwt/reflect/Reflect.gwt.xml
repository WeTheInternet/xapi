<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE module PUBLIC "-//Google Inc.//DTD Google Web Toolkit 2.5.1//EN" "http://google-web-toolkit.googlecode.com/svn/tags/2.5.1/distro-source/core/src/gwt-module.dtd">
<module>

  <!-- Enable magic methods in production. -->
  <inherits name="com.google.gwt.core.MagicMethods" />
  <inherits name="com.google.gwt.core.Core" />
  
  <!-- 
  Configuration Property: gwt.reflect.never.fail

  Set this to false to cause the compiler to break if you access any magic methods
  with non-literals.  I.e., if you do not want to pay for more expensive runtime class enhancement,
  and the potential that a member you need won't have been initialized correctly, then you should
  set this value to false.  This strict mode will only work if none of your code performs reflection
  on a reference instead of a literal.
    -->
  <define-configuration-property name="gwt.reflect.never.fail" is-multi-valued="false" />
  <set-configuration-property name="gwt.reflect.never.fail" value="true"/>

  <!-- 
  Configuration Property: gwt.reflect.optimize.annotations 

  This property is used to control whether annotation proxies are generated with support for handling
  annotations created by any means other than the generators below.  When only the generators defined
  here are used, we can make certain optimizing assumptions, because we can ensure that there is only
  ever one global, reused instance of every annotation.
  
  If you want to support interop with instances of annotations generated or instantiated by any other
  means, then you will want to set this property to false so that we generate code which does not
  make any assumptions, and instead performs complete equality checks. 
   -->
  <define-configuration-property name="gwt.reflect.optimize.annotations" is-multi-valued="false" />
  <set-configuration-property name="gwt.reflect.optimize.annotations" value="true"/>


  <!-- Enhance entire class -->
  <extend-configuration-property name="gwt.magic.methods" 
    value="com.google.gwt.reflect.shared.GwtReflect.magicClass(Ljava/lang/Class;)Ljava/lang/Class; *= com.google.gwt.reflect.rebind.injectors.MagicClassInjector"/>
  <extend-configuration-property name="gwt.magic.methods" 
    value="java.lang.Class.magicClass(Ljava/lang/Class;)Ljava/lang/Class; *= com.google.gwt.reflect.rebind.injectors.MagicClassInjector"/>

  <!-- Array reflection, single dim -->
  <extend-configuration-property name="gwt.magic.methods" 
    value="com.google.gwt.reflect.shared.GwtReflect.newArray(Ljava/lang/Class;I)[Ljava/lang/Object; *= com.google.gwt.reflect.rebind.injectors.SingleDimArrayInjector"/>
  <extend-configuration-property name="gwt.magic.methods" 
    value="java.lang.reflect.Array.newInstance(Ljava/lang/Class;I)Ljava/lang/Object; *= com.google.gwt.reflect.rebind.injectors.SingleDimArrayInjector"/>

  <!-- Array reflection, multi dim -->
  <extend-configuration-property name="gwt.magic.methods" 
    value="com.google.gwt.reflect.shared.GwtReflect.newArray(Ljava/lang/Class;II)[[Ljava/lang/Object; *= com.google.gwt.reflect.rebind.injectors.MultiDimArrayInjector"/>
  <extend-configuration-property name="gwt.magic.methods" 
    value="java.lang.reflect.Array.newInstance(Ljava/lang/Class;[I)Ljava/lang/Object; *= com.google.gwt.reflect.rebind.injectors.MultiDimArrayInjector"/>
    
  <!-- ConstPool splitpoint (scans TypeOracle, and slurps all annotated elements) -->
  <extend-configuration-property name="gwt.magic.methods" 
    value="com.google.gwt.reflect.shared.ConstPool.fillConstPool()V *= com.google.gwt.reflect.rebind.injectors.ConstPoolInjector"/>
  
  <!-- "direct reflection" using class and string literals -->
  
  <!-- Methods -->
  <extend-configuration-property name="gwt.magic.methods" 
    value="java.lang.Class.getMethod(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method; *= com.google.gwt.reflect.rebind.injectors.PublicMethodInjector"/>
  <extend-configuration-property name="gwt.magic.methods" 
    value="com.google.gwt.reflect.shared.GwtReflect.getPublicMethod(Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method; *= com.google.gwt.reflect.rebind.injectors.PublicMethodInjector"/>
  <extend-configuration-property name="gwt.magic.methods" 
    value="java.lang.Class.getDeclaredMethod(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method; *= com.google.gwt.reflect.rebind.injectors.DeclaredMethodInjector"/>
  <extend-configuration-property name="gwt.magic.methods" 
    value="com.google.gwt.reflect.shared.GwtReflect.getDeclaredMethod(Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method; *= com.google.gwt.reflect.rebind.injectors.DeclaredMethodInjector"/>
  <extend-configuration-property name="gwt.magic.methods" 
    value="com.google.gwt.reflect.shared.GwtReflect.invoke(Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/Class;Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object; *= com.google.gwt.reflect.rebind.injectors.InvokeInjector"/>

  <!-- Fields -->
  <extend-configuration-property name="gwt.magic.methods" 
    value="java.lang.Class.getField(Ljava/lang/String;)Ljava/lang/reflect/Field; *= com.google.gwt.reflect.rebind.injectors.PublicFieldInjector"/>
  <extend-configuration-property name="gwt.magic.methods" 
    value="java.lang.Class.getDeclaredField(Ljava/lang/String;)Ljava/lang/reflect/Field; *= com.google.gwt.reflect.rebind.injectors.DeclaredFieldInjector"/>

  <!-- Constructors -->
  <extend-configuration-property name="gwt.magic.methods" 
    value="java.lang.Class.getConstructor([Ljava/lang/Class;)Ljava/lang/reflect/Constructor; *= com.google.gwt.reflect.rebind.injectors.PublicConstructorInjector"/>
  <extend-configuration-property name="gwt.magic.methods" 
    value="java.lang.Class.getDeclaredConstructor([Ljava/lang/Class;)Ljava/lang/reflect/Constructor; *= com.google.gwt.reflect.rebind.injectors.DeclaredConstructorInjector"/>
  <extend-configuration-property name="gwt.magic.methods" 
    value="com.google.gwt.reflect.shared.GwtReflect.construct(Ljava/lang/Class;[Ljava/lang/Class;[Ljava/lang/Object;)Ljava/lang/Object; *= com.google.gwt.reflect.rebind.injectors.ConstructInjector"/>

  <!-- Annotations -->
  <extend-configuration-property name="gwt.magic.methods" 
    value="java.lang.Class.getAnnotation(Ljava/lang/Class;)Ljava/lang/annotation/Annotation; *= com.google.gwt.reflect.rebind.injectors.PublicAnnotationInjector"/>


  <source path="client" />
  <source path="shared" />
</module>