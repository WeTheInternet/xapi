<define-tags>
  <define-tag name="to-do"

  // Mock code; creates an equivalent of Map<String, Class>
      features={
          text:String.class,
          data:HasData.class,
          isDone:(Filter<This>.class),
          onClick:ClickHandler.class,
      }

  // Supply defaults for some feature
      data = {done:false, text:""}
      isDone = ()->data.<Boolean>get("done")
      onClick = e -> this.done = !this.done

  // matches the value of the text feature in <to-do text="What is rendered"/>
      dom=<div class="to-do">{text}</div>

      /define-tag>

  <define-tag name="to-dos"
      dom=<div class="to-dos" children = select("to-do") />

      example = <to-dos>
          <to-do text = "Create awesome examples of <to-do/>s to finish" />
          <to-do id   = "polyuser-collaboration-room"
                 text = `Patent a multi-user collaboration room,
                         with a 360 degree digital display around a desk.
                         anyone with a synced keyboard/mouse/powerglove
                         can login, open windows, create and edit text (code),
                         drag ui elements around, and interact  them around anywhere.`
          /to-do>
          <to-do id    = "createAwesomeToDoApp"
              text     = "Finish ALLLLL the things!"
              thisType = "ToDo" // Create an alias to the type of the currrent element, <to-do/>
              isDone   = (siblings().allMatch(ToDo::isDone))
              onClick  = e->{
                 if (!$this.isDone()) {
                   xapi.log.X_Log.alert("Finish your other todos first!");
                 }
                 e.cancel(); // do not propagate to the "super" method in the definition of <to-do />
              }
          /to-do>
          <add-to-do />
          <to-do text = "Make the add-to-do element work in a concise, declarative manner" />
        </to-dos>
  /define-tag>
</define-tags>
