import org.gradle.api.tasks.SourceSet;

// GenInclude buildscript from file:///opt/xapi/gwt/src/gradle/gwtUber/buildscript
buildscript {
    repositories {
        maven {
            name = "xapiLocal"
            url = new URI("file://$rootDir/repo".toString())
            //noinspection UnstableApiUsage
            metadataSources({ m -> m.gradleMetadata() })
        }
    }
    dependencies {
    //    classpath "com.github.jengelman.gradle.plugins:shadow:4.0.4"
    //   classpath "net.wti.gradle:xapi-gradle-meta:$version"
    }
}
ext.xapiModern = 'true'

plugins.apply "java-library"
// GenInclude XapiSettingsPlugin adding java-library b/c api dependencies used
// GenInclude body.start from file:///opt/xapi/gwt/src/gradle/gwtUber/body.start
// See <xapi repo>/gwt/src/gwtUber/todo/TODO.md for details abour re-enabling this
// apply plugin: xapi.gradle.meta.MetaPlugin
// GenStart XapiSettingsPlugin

apply from: "$rootDir/gradle/xapi-modern.gradle"
String repo = project.findProperty("xapi.mvn.repo")
if (repo) {
  repositories {
    maven {
      name = 'xapiLocal'
      url = repo
    }
  }
}
String javaPlugin = findProperty('xapi.java.plugin') ?: 'java-library'
plugins.apply javaPlugin
repositories.mavenCentral()

SourceSet main = sourceSets.maybeCreate('main');


SourceSet test = sourceSets.maybeCreate('test');

main.java.setSrcDirs([]);
main.resources.setSrcDirs([]);
test.java.setSrcDirs([]);
test.resources.setSrcDirs([]);
main.java.srcDir("$rootDir/gwt/src/gwtUber/java")
main.resources.srcDir("$rootDir/gwt/src/gwtUber/resources")
test.java.srcDir("$rootDir/gwt/src/gwtUberTest/java")
test.resources.srcDir("$rootDir/gwt/src/gwtUberTest/resources")

dependencies {
  api project(path: ":util-main")
  api project(path: ":inject-gwt")
  api project(path: ":collect-gwt")
  api project(path: ":base-gwtTestTools")
  api project(path: ":gwt-gwtElemental2")
  api project(path: ":gwt-gwtElemental")
  api project(path: ":model-gwt")
  api project(path: ":process-gwt")
  api project(path: ":io-gwt")
  api project(path: ":gwtc-api")
  api project(path: ":core:reflect-main")
  testImplementation project(path: ":collect-jre")
  api "net.wti.core:xapi-lang-core:${version}"
  api "javax.inject:javax.inject:1:sources"
  testImplementation "net.wetheinter:gwt-codeserver:2.8.0"
  testImplementation "net.wetheinter:gwt-user:2.8.0"
  testImplementation "net.sourceforge.htmlunit:htmlunit:2.19"
  testImplementation "junit:junit:4.13"
  testImplementation "junit:junit:4.13:sources"
}
// GenEnd XapiSettingsPlugin
// GenInclude body.end from file:///opt/xapi/gwt/src/gradle/gwtUber/body.end
configurations {
    allDeps.extendsFrom runtimeClasspath
}

tasks.named "jar", Jar, {
    Jar j ->
//    j.archiveClassifier.set("default")
    j.zip64 = true
    j.duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    Configuration conf = configurations.allDeps

    conf.allDependencies.each {
        if (it instanceof ProjectDependency) {
            j.dependsOn ":$it.dependencyProject.path:jar"
        } else if (it instanceof SelfResolvingDependency) {
            j.dependsOn it.buildDependencies
        }
    }

    j.dependsOn(conf)
    j.from(project.providers.provider({ conf.files.collect({
        it.file && it.name.endsWith(".jar") ? project.zipTree(it) : it
    })}))
}
tasks.withType(Test).configureEach {
    Test t ->
        t.forkEvery(1)
        t.maxParallelForks(3)
        t.maxHeapSize("4G")
}
// Done generating buildfile for :gwt at file://$rootDir/gwt/src/gwtUber/generated-gwtGwtUber.gradle
