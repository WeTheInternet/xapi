import net.wti.gradle.internal.api.ProjectView
import net.wti.gradle.internal.require.api.ArchiveGraph
import net.wti.gradle.schema.api.Transitivity
import net.wti.gradle.schema.api.XapiSchema

buildscript {
    repositories {
        maven {
            name = 'xapiLocal'
            url = new URI("file://$rootDir/repo".toString())
            //noinspection UnstableApiUsage
            metadataSources({ m -> m.gradleMetadata() })
        }
    }
    dependencies {
//        classpath 'com.github.jengelman.gradle.plugins:shadow:4.0.4'
        classpath "net.wti.gradle:xapi-gradle-meta:$version"
        classpath "net.wti.gradle.tools:xapi-gradle-tools:$version"
    }
}
plugins {
    id 'xapi-require'
}
plugins.apply 'xapi-meta'
//plugins.apply 'com.github.johnrengelman.shadow'
//setProperty('xapi.main.component', 'shadow') // hm, just ... make a plain jar here, and edit the publication.
//
//
//tasks.shadowJar.configure {
//    classifier = null
//}

xapiRequire.main().configure {
    req ->
        req.project ':util'
        req.project ':inject-gwt'
        req.project 'collect-gwt'
        req.project ':base-gwtTestTools'
        req.project 'xapi-gwt3', 'main'
        req.external "net.wti.core:xapi-lang-core:${->version}", 'main'
        req.project 'xapi-core-parent:xapi-core-reflect', 'main'
        req.project 'xapi-elemental', 'main'
        req.project ':model-gwt'
        req.project ':process-gwt'
        req.project ':io-gwt'
        req.project 'xapi-dev-gwtc:xapi-gwtc-api', 'main'
}

xapiRequire.module('gwt', 'test').configure {
    req ->
        req.project ':collect-jre'
        req.external 'net.wetheinter:gwt-codeserver:2.8.0'
        req.external 'net.wetheinter:gwt-user:2.8.0'
        req.external 'net.sourceforge.htmlunit:htmlunit:2.19'
        req.external 'junit:junit:4.12'
        req.external Transitivity.runtime, 'junit:junit:4.12:sources'
}

dependencies {
    implementation 'javax.inject:javax.inject:1:sources'
}

description = 'XApi - Gwt uber jar'

XapiSchema s = xapiSchema as XapiSchema
s.whenReady {
    tasks.named 'jar', Jar, {
        Jar j ->
//        j.archiveClassifier.set('default')
        j.zip64 = true
        j.duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        j.whenSelected {
            ProjectView view = xapiRequire.view
            ArchiveGraph m = s.mainPlatform.getMainModule().findGraph(view.projectGraph)
            Configuration conf = m.config("RuntimeClasspath")//.configExportedRuntime()
            j.dependsOn(conf)
            j.from(conf.files.collect({
                it.file && it.name.endsWith(".jar") ? view.zipTree(it) : it
            }))
            // now, also elide from poms...
            // ...and do pre-injection / source / class modifications... :-)
        }
    }
}
tasks.withType(Test).configureEach {
    Test t ->
        t.forkEvery(1)
        t.maxParallelForks(3)
        t.maxHeapSize("4G")
}