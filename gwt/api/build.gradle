//buildscript {
//    dependencies {
//        classpath 'net.wti.gradle:xapi-gradle-plugin:1.5.0'
//    }
//}
//plugins {
//    id 'xapi-base'
//}
plugins {
    id 'xapi-require'
}
apply from: "$rootDir/gradle/xapi-env.gradle"
String xapiVersion = findProperty('xapiVersion')

repositories {
    jcenter()
}

xapiRequire.main.configure {
    req ->
        req.project ':xapi-common'
        req.project ':xapi-util'
}

dependencies {
    compile 'com.google.elemental2:elemental2-core:1.0.0-RC1'
    compile project(':xapi-dev-parent:xapi-dev-source')
    compile "net.wti.core:xapi-fu:$xapiVersion"
    compile project(':xapi-inject')
    compile project(':xapi-core-parent:xapi-core-reflect')
    compile 'com.google.jsinterop:base:1.0.0-RC1'
    compile 'javax.inject:javax.inject:1'
    compile 'javax.inject:javax.inject:1:sources'
    compile 'javax.validation:validation-api:1.0.0.GA'
    compile 'javax.validation:validation-api:1.0.0.GA:sources'
    compileOnly 'net.wetheinter:gwt-dev:2.8.0'
    compileOnly 'net.wetheinter:gwt-user:2.8.0'
}

description = 'XApi - Gwt core emulation layer'

/*
old docs from pom:
  All Gwt jre emulation code goes in this module,
  as well as any gwt-compiler overrides.

  xapi-gwt-api.jar must come before gwt-dev.jar on your compile classpath.
  A plugin is being built to automatically adjust maven runtime dependencies,
  but users of ant or IDEs will need to ensure the super jar comes before
  gwt-dev.  We will petition gwt to accept our mods, but, until then,
  if you want bleeding edge features, you gotta do bleeding edge configuration.


  Code that ties directly into other modules, like java.lang.reflect for
  the reflection submodule, have their super-source here, and generators or
  other implementations in their own modules.

  This is to maintain consistency in what is or isn't whitelisted in XApi GWT.

  Some modules, like appengine, provide dependency-specific super-source
  in their own packages.  This module is for jre, junit and core XApi services.
*/