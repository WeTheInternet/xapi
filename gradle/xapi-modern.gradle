plugins.apply('java-library')
plugins.apply('maven-publish')

String xapiHome = getProperty('xapi.home') // you must apply xapi-env.gradle before applying xapi-modern.gradle

TaskProvider required = rootProject.tasks.named('publishRequired')

// for this ultra-core, zero-dependency buildSrc project, we want to always install
// our jars to xapiLocal repo, so other projects can reference us.
tasks.findByName(BasePlugin.ASSEMBLE_TASK_NAME).finalizedBy(
        PublishingPlugin.PUBLISH_LIFECYCLE_TASK_NAME
)
// We're creating this here, manually, so we can get picked up when someone runs
// ./gradlew xapiPublish or `gw xP` if you have gw alias for ./gradlew-finder (google "gradle gw gist")
// Note that this behavior is similar to xapi-publish plugin, which we cannot (easily) use as we are defining it here.
// We _could_ do some trickier to build in buildSrc and publish in main gradle scripts, but this is only ~50 lines of reimplementation,
// versus weird build-setup-hackery.
Task xapiPublish = tasks.create('xapiPublish')
required.configure { it.dependsOn xapiPublish }
xapiPublish.group = 'Publishing'
xapiPublish.description = 'Publish jars to xapiLocal repository'
tasks.withType(PublishToMavenRepository).configureEach {
    PublishToMavenRepository pub ->
        if (pub.name.contains("XapiLocal")) {
            tasks.assemble.finalizedBy pub
            xapiPublish.dependsOn pub
        }
}

PublishingExtension ext = extensions.findByName(PublishingExtension.NAME) as PublishingExtension
ext.repositories.maven {
    MavenArtifactRepository repo ->
        repo.name = 'xapiLocal'
        repo.url = "file://$xapiHome/repo"
}
SourceSet test = sourceSets.test
// not really what we want, but it's good enough for right now
java.withSourcesJar()
java.withJavadocJar()

TaskProvider<Jar> testJar = tasks.register('testJar', Jar, {
    Jar jar ->
        jar.archiveClassifier.set('tests')
        jar.from test.output
        return
})

//PublishArtifact art = project.artifacts.add('archives', sourceJar)
boolean publishTests = findProperty('publishTests') == 'true'
PublishArtifact testArt = !publishTests ? null : artifacts.add('archives', testJar.get())
ext.publications.create("main", MavenPublication, {
    pub ->
        afterEvaluate {
            if (tasks.names.contains('shadowJar')) {
                shadow.component(pub)
            } else {
                pub.from(components.named('java').get())
            }
        }
        pub.groupId = rootProject.group
        if (testArt != null) {
            pub.artifact(testArt)
        }
})

String repo = findProperty('xapi.mvn.repo')

if (repo) {
    project.setProperty('xapi.mvn.repo', repo.replace("\$rootDir", rootDir.path))
} else {
    project.extensions.add("xapi.mvn.repo", "$rootDir/repo");
}