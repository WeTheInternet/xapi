buildscript {
    repositories {
        maven {
            name = 'xapiLocal'
            url = new java.net.URI("file://$rootDir/repo")
            metadataSources { sources ->
                sources.mavenPom()
            }
        }
    }
    dependencies {
        classpath 'net.wti.gradle.modern:xapi-gradle-schema-parser:0.5.1'
        classpath 'net.wti.gradle.modern:xapi-gradle-settings-plugin:0.5.1'
    }
}

rootProject.name = 'xapi'

apply plugin: 'xapi-settings'

def prop = {
    String key -> System.getProperty(key) ?:
            System.getenv("ORG_GRADLE_PROJECT_$key") ?:
            startParameter.projectProperties.get(key)
}

def multiProject = [
        'lang': ['dev', 'test']
]
def singleProject = [
        'ui': ['gwt', 'jre'],
]

/* in order to overcome "parallelization by project" instead of "by task",
 we should consider a settings.gradle plugin which can "explode" each defined module into N projects:

 src/main/.*
 src/api/.*
 src/jdk8/.*
 src/jdk11/.*
 src/gwt/.*
 src/etc/.*
 src/projects/(main|api|jdk8|jdk11|gwt|etc).gradle

 The projects buildfiles need not actually exist, but will override the supplied-by-settings plugin defaults.
 Those defaults will be made available for manually-supplied buildscripts via `project.parent.initChild(project|path)`.
 These defaults will still be applied _after_ the script is evaluated, unless you call `project.parent.skipChild(project|path)`

 The root build.gradle would then just create project() dependencies for module,
 so that each can build in parallel, and we can have simple project dependencies.
 Heck, the root project could opt to be a pom/bom for each child,
 though perhaps better to have the root project expose post-processed source dependencies;
 perhaps src/impl/.* which transforms any magic-method injection on main:main and dependencies.

 The sub-project dependencies would be used exclusively between submodules, all with sources exposed for processing.
 The main:impl module melts post-processed versions all of main,api,spi, etc,
 and depends on all the post-processed versions of all xapi-module dependencies.

 Other platforms can have jdk8Impl, jdk11Impl, gwtImpl, j2clImpl, etc, which behave the same, but live in src/projects.

 Best of all, it means we don't _have_ to muck with multi-capability-publishing.
 We can save that for allowing variants-within-modules.

 so... new plugin, 'xapi-settings'.
 Have it read a shared settings.xapi file to discover schema(s),
 create the necessary projects here,
 and then in the build scripts, simply create project dependencies if they exist, external if they don't.

 Since all composite builds are declared here,
 we can also wait until settings are fully evaluated,
 then look for the settings.xapi file in each composite build
 to know the whole-world-schema up-front,
 with all possible "external capabilities" known,
 without having to try to communicate into an IncludedBuild in any way.

 It _might_ make sense for us to be able to generate "skins" over composite build modules,
 taking all the src/projects children as dependencies,
 and use project-local toolset to generate new impl modules.

 This allows a consumer project to replace generated sources with their own (just replace the groupId of the composite child).
 The consumer would be able to expose new, higher priority services / injection rules,
 and simply "shade" the entire project into the local build.

 Finally, it should be possible to turn either source/impl on/off independently.
 source can only be turned off if it has already been built/deployed once
 (i.e. if there is no impl to speak of, we must run in source mode at least once to get generated)

 This is to avoid cluttering IDE.  Knowingly having duplicated classes is annoying when searching for types by name.
 There still should only be one actual accessible type from the correct source on your classpath (so jump to source is sane),
 but we'd still, ideally, want to be able to toggle between only-source, only-impl and source-and-impl modes.

 For this to work nicely, impl would likely need to have an optional group of sourcesets to turn on at-will.
 Types with replacements would be filtered from any included sources (sync together everything but replacement files from source dirs),
 then all *that* source is compiled together with various java compiler plugins / processors running.


 The existing work to make multi-capability dependencies can also be used as needed;
 for absorbed composites, it may be possible to model the entire included build in a single project;
 for logical-variants of modules (free vs. debug, etc) (adding arbitrary dimensions of which only one is chosen);
 to expose all platform impls from a single project location.

 We'll decide when and how to use this as we go, and update this code-comment-design-doc ...eventually.

 */


String prefix = prop('xapi.prefix') ?: 'xapi'

def checkPlatform = {
    String proj, platform ->
        def set = prop('xapi.platform')
        if (set) {
            for (String i : set.split(",")) {
                if (i.toLowerCase() == platform.toLowerCase()) {
                    return true
                }
            }
        }
        return 'true' ==
                (
                        prop("${prefix}.${proj}.${platform}") ?:
                        prop("xapi.${proj}.${platform}")
                )
}

def base = {parent->prefix ? ":$prefix-$parent" : ":$parent"}
multiProject.forEach({
    parent, children ->
        String name = base(parent)
        for (String child : children) {
            String mod = "$name-$child"
            include(mod)
            project(mod).buildFileName = "$parent-${child}.gradle"
            project(mod).projectDir = file "$parent/${child}".toString()
        }
})

singleProject.forEach({
    parent, children ->
        String name = base(parent)
        include(name)
        project(name).buildFileName = "${parent}.gradle"
        project(name).projectDir = file parent
        for (String child : children) {
//            if (checkPlatform(parent, child)) {
//                String mod = ":$name-$child".toString()
//                include(mod)
//                project(mod).buildFileName = "$parent-${child}.gradle"
//                project(mod).projectDir = file "$parent/$realizedPath${child}".toString()
//            }
        }
})

include(':xapi-components')
include(':xapi-polymer')
include(':xapi-jre-parent:xapi-jre-ui-parent:xapi-jre-ui-javafx')
include(':xapi-jre-parent:xapi-jre-ui-parent')
include(':xapi-jre-parent:xapi-jre')
include(':xapi-jre-parent')
include(':xapi-maven-plugin')
include(':xapi-samples:xapi-demo')
include(':xapi-samples')

project(':xapi-components').projectDir = file('gwt/components')
project(':xapi-polymer').projectDir = file('gwt/polymer')
project(':xapi-jre-parent:xapi-jre-ui-parent:xapi-jre-ui-javafx').projectDir = file('jre/ui/javafx')
project(':xapi-jre-parent:xapi-jre-ui-parent').projectDir = file('jre/ui')
project(':xapi-jre-parent:xapi-jre').projectDir = file('jre/uber')
project(':xapi-jre-parent').projectDir = file('jre')
project(':xapi-maven-plugin').projectDir = file('maven')
project(':xapi-samples:xapi-demo').projectDir = file('samples/demo')
project(':xapi-samples').projectDir = file('samples')

include(':schema')
project(':schema').buildFileName = "schema.gradle"

// Instead of buildSrc, we're using an included, composite build, and putting it on buildSrc classpath configuration
logger.debug """Project properties: $startParameter.projectProperties
System Property Args: $startParameter.systemPropertiesArgs
System.properties: ${System.properties.toString().split(", ")}
"""

def composite = prop('xapi.composite')
if (composite == 'true' && !System.getProperty('idea.version')) {
    System.setProperty('xapi.composite', 'false')
    logger.quiet("Including net.wti.core|gradle as included builds because composite={}", composite.toString())
    includeBuild('net.wti.gradle.tools')
    includeBuild('net.wti.core')
    includeBuild('net.wti.gradle')
}


//List<String> dist = ['gwt']
//
//dist.each {
//    String s ->
//        include(":xapi-$s")
//        ProjectDescriptor p = project(":xapi-$s")
//        p.buildFileName = "dist-${s}.gradle"
//        p.projectDir = file("dist/${s}".toString())
//}

try {
    enableFeaturePreview('GRADLE_METADATA')
} catch(ignored) {}
try {
    dependencyResolutionManagement.versionCatalogs.create('xapiLib').from(files('gradle/xapiLib.toml'))
} catch(ignored) {}
