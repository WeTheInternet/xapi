buildscript {
    repositories {
        maven {
            name = 'xapiLocal'
            url = new java.net.URI("file://$rootDir/repo")
            metadataSources { sources ->
                sources.mavenPom()
            }
        }
    }
    dependencies {
        classpath 'net.wti.gradle.modern:xapi-gradle-schema-parser:0.5.1'
        classpath 'net.wti.gradle.modern:xapi-gradle-settings-plugin:0.5.1'
    }
}

rootProject.name = 'xapi'

apply plugin: 'xapi-settings'

def prop = {
    String key -> System.getProperty(key) ?:
            System.getenv("ORG_GRADLE_PROJECT_$key") ?:
            startParameter.projectProperties.get(key)
}

//include(':schema')
//project(':schema').buildFileName = "schema.gradle"

// Instead of buildSrc, we're using an included, composite build, and putting it on buildSrc classpath configuration
logger.debug """Project properties: $startParameter.projectProperties
System Property Args: $startParameter.systemPropertiesArgs
System.properties: ${System.properties.toString().split(", ")}
"""

def composite = prop('xapi.composite')
if (composite == 'true' && !System.getProperty('idea.version')) {
    System.setProperty('xapi.composite', 'false')
    logger.quiet("Including net.wti.core|gradle as included builds because composite={}", composite.toString())
//    includeBuild('net.wti.gradle.tools')
    includeBuild('net.wti.core')
    includeBuild('net.wti.gradle.modern')
}


//List<String> dist = ['gwt']
//
//dist.each {
//    String s ->
//        include(":xapi-$s")
//        ProjectDescriptor p = project(":xapi-$s")
//        p.buildFileName = "dist-${s}.gradle"
//        p.projectDir = file("dist/${s}".toString())
//}

try {
    enableFeaturePreview('GRADLE_METADATA')
} catch(ignored) {}
try {
    dependencyResolutionManagement.versionCatalogs.create('xapiLib').from(files('gradle/xapiLib.toml'))
} catch(ignored) {}
