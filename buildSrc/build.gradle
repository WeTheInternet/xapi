buildscript {
    System.setProperty('xapiIntoBuildscript', 'true')
    project.extensions.add('myBuildscript', it)
    apply from: "$rootDir.parent/gradle/xapi-env.gradle"
    dependencies {
        classpath "net.wti.gradle.tools:xapi-gradle-tools:${->version}"
        if (!System.getProperty('idea.version')) {
            classpath "net.wti.gradle.modern:xapi-gradle-migration:${-> version}"
        }
    }
}
plugins {
    id 'idea'
}
if (gradle.getParent() == null || gradle.getParent().getParent() == null) {
    group = 'xapi-buildSrc'
} else {
    String compName = gradle.getParent().getParent().getStartParameter().getCurrentDir().getName()
    group = "$compName-xapi-buildSrc"
}

setProperty('xapiModern', 'true')

String v = version

dependencies {
    if (!System.getProperty('idea.version')) {
        implementation "net.wti.gradle.modern:xapi-gradle-migration:$v"
    }
    implementation "net.wti.gradle:xapi-gradle-loader:$v"
    implementation "net.wti.gradle:xapi-gradle-plugin:$v"
    implementation "net.wti.gradle:xapi-gradle-api:$v"
    implementation "net.wti.gradle.tools:xapi-gradle-tools:$v"
    implementation "net.wti.gradle.tools:xapi-gradle-deprecated:$v"
    implementation "net.wti.core:xapi-lang-core:$v"
    implementation "net.wti.core:xapi-fu:$v"
}

if (
    'true' == System.getProperty('xapi.changing') ||
    'true' == findProperty('xapi.changing') ||
    '1' == System.getProperty('xC') ||
    '1' == findProperty('xC')
) {
    String xapiHome = "$rootDir.parent"
    apply from: "$xapiHome/gradle/rebuild-tools.gradle"
}
